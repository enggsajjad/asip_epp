'\" t
.\"
.\" Copyright 2002 Sun Microsystems, Inc. All rights reserved.
.\" SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
.\"
.TH javadoc 1 "2000 年 7 月 28 日"
.hw javadoc
.SH "名前"
javadoc \- Java API ドキュメンテーションジェネレータ
.SH "形式"
.B javadoc 
[
.I options
] [
.I packagenames
] [
.I sourcefiles
] [
.I @files
]
.SH "パラメータ"
パラメータの順序は任意です。
.TP 15
.I options
このドキュメントで指定されているコマンド行オプションです。
.B javadoc 
のオプションの一般的な使用法については、「使用例」を参照してください。 
.TP
.I packagenames
.BR "java.lang java.lang.reflect java.awt" 
などの、スペースで区切られた
一連のパッケージ名です。ドキュメント化するパッケージごとに別個に
指定する必要があります。
.B javadoc
はこれらのパッケージ名を探すとき、
.B \-sourcepath 
を使用します。
.B javadoc
は、サブパッケージを再帰的に処理することはありません。
アスタリスク (\f3*\f1) などのワイルドカードは使うことができません。
「1 つ以上のパッケージのドキュメント化」の
例を参照してください。 
.TP
.I sourcefiles
スペースで区切られた一連のファイル名です。パス、および
アスタリスク (\f3*\f1) などのワイルドカードを含めることができます。
.B javadoc 
は、ソースファイル名の前にあるパスを使用して、
ソースファイル名を探します。
.B -sourcepath
は使用しません。たとえば、
.B Button.java
を渡すことは 
.BR ./Button.java 
と指定することと同じです。完全パスを付けたソースファイル名の
例は「
.BR /home/src/java/awt/Graphics*.java
」のようになります。「1 つ以上のクラスのドキュメント化」の例を
参照してください。また、「パッケージとクラスのドキュメント化」の
例のように、パッケージ名とソースファイルを組み合わせることもできます。 
.TP
.I @files
複数の
.I packagenames 
および
.I sourcefiles 
を任意の順に含む、1 つ以上のファイル名です。 
.SH "機能説明"
.B javadoc
は、一連の Java ソースファイルの宣言およびドキュメンテーション
コメントを解析し、デフォルトでは public クラスと protected クラス、
内部クラス、インタフェース、コンストラクタ、メソッド、および
フィールドについて説明した一連の HTML ページを生成します。 
.LP
.B javadoc
は、パッケージ全体、個々のソースファイル、またはその両方に対して
実行できます。
.B javadoc
をパッケージ全体に対して実行する場合は、一連の
パッケージ名を javadoc に引数として渡します。個々の
クラスに対して javadoc を実行する場合は、一連の
ソース (\f3.java\f1) ファイル名を渡します。具体的な例は、
このページの最後で示します。 
.LP
実装上の理由から、
.B javadoc
は実行に java コンパイラを必要とし、java コンパイラに依存しています。
.B javadoc
は 
.B javac 
の一部を呼び出して、宣言をコンパイルし、メンバの実装は無視します。
.B javadoc 
は、クラス階層を含むクラスの豊富な内部表現、および「使用」関係を
構築し、そこから HTML を生成します。
.B javadoc 
は、ソースコードのドキュメンテーションコメントから、ユーザの
提供するドキュメンテーションも取得します。 
.LP
.B javadoc
は、メソッド本体のない純粋なスタブファイルである 
.B .java
ソースファイル上で実行されます。つまり、API の作成時には、コードを
記述する前の設計の早い段階でドキュメンテーションコメントを記述し、
.B javadoc
を実行できます。 
.LP
コンパイラに依存することによって、HTML 出力が、実際の実装に正確に対応
することが保証されます。実際の実装は、明示的でなく暗黙的に
ソースコードに依存している場合があります。たとえば、
.B javadoc
は、
.B .class
ファイル内には存在するが、ソースコード内には存在しない
デフォルトコンストラクタ
(「Java Language Specification」の項 8.6.7) をドキュメント化します。 
.LP 
.B javadoc
がドキュメンテーション用の内部構造を構築するときは、参照する
クラスをすべてロードします。このため、ブートストラップクラス、
拡張機能、またはユーザクラスにかかわらず、
.B javadoc
は、参照するクラスをすべて見つけられなければなりません。
詳細は、「クラスの検索方法」を参照してください。一般的に、作成する
クラスは、拡張機能としてロードされるか、
.BR javadoc
のクラスパス内にある必要があります。 
.SS "Javadoc ドックレット"
.B  javadoc
の出力の内容と形式は、ドックレットを使ってカスタマイズできます。
.B  javadoc
には、標準ドックレットと呼ばれるデフォルトの「組み込み型」
ドックレットがあり、これによって HTML 形式の API
ドキュメンテーションを生成します。標準ドックレット
の修正やサブクラス化を行なったり、HTML、XML、MIF、RTF などの好みの
出力形式を生成する独自のドックレットを記述することも可能です。
ドックレットとその使用法については、次を参照してください。 
.LP
.TP 2
\(bu
.B javadoc 
に施された機能強化 
.TP 2
\(bu
.B -doclet 
コマンド行オプション 
.LP
.B -doclet
コマンド行オプションでカスタムドックレットが指定されていない場合、
.B javadoc
は、デフォルトの標準ドックレットを使用します。
.B javadoc
ツールには、どのドックレットが使われているかには関係なく使用できる
コマンド行オプションがあります。標準ドックレットでは、これらの
ほかに、いくつかのコマンド行オプションが追加されます。どちらの
オプションについても、後述の「オプション」で説明します。 
.SS "用語"
いくつかの用語には、
.BR javadoc
のコンテキストで特定の意味があります。 
.TP 20
生成されるドキュメント 
.B javadoc 
ツールが Java ソースコード内の doc コメントから生成したドキュメント
のことです。デフォルトの生成ドキュメントは HTML 形式で、標準
ドックレットによって作成されます。 
.TP
名前
Java 言語での名前、つまりパッケージ、クラス、インタフェース、
フィールド、コンストラクタ、またはメソッドの名前のことです。名前は、
.BR java.lang.String.equals(java.lang.Object) 
のように完全修飾することも、
.BR equals(Object) 
のように部分修飾することもできます。 
.TP
ドキュメント化されるクラス 
.B javadoc 
の実行によって完全なドキュメンテーションが生成されるクラスと
インタフェースです。ドキュメント化するには、ソースファイルが
使用可能でなければならず、ソースファイル名またはパッケージ名の
どちらかを 
.B javadoc 
コマンドに渡さなければなりません。ドキュメント化されるクラスは、
.B javadoc 
の実行で組み込まれるクラス、つまり「組み込みクラス」とも呼ばれます。 
.TP
参照されるクラス 
ドキュメント化されるクラスとインタフェースの定義 (実装) の中で
明示的に参照されているクラスとインタフェースです。参照の例としては、
戻り値の型、パラメータの型、キャストの型、拡張されたクラス、
実装されたインタフェース、インポートされたクラス、メソッド本体で
使用されるクラスなどがあります。doc コメントの中で (
.B @see 
タグなどで) 参照されているクラスは、参照されるクラスとは呼びません。
.B javadoc
を実行すると、
.B javadoc
のブートクラスパスおよびクラスパス内で参照されているクラスのすべてが
メモリにロードされます。参照されているクラスが見つからなかった
場合は、[クラスが見つかりません] という警告が表示されます。
.B javadoc
は、クラスの存在とそのメンバの完全修飾名を決定するのに十分な情報を、
.B .class
ファイルから引き出すことができます。 
.TP
外部参照クラス 
参照されるクラスのうち、
.B javadoc
を実行してもドキュメンテーションが生成されないクラスです。
言い換えると、これらのクラスは 
.B javadoc
の実行の外部に存在するクラスです。これらのクラスに対する、
ドキュメンテーション内での名前のリンクは、「外部参照」または
「外部リンク」と呼ばれます。たとえば、
.B java.awt 
パッケージに対してだけ 
.B javadoc
を実行した場合、Object などの 
.BR java.lang 
内のすべてのクラスは、外部参照クラスになります。外部参照クラスには、
.B \-link 
オプションを使ってリンクすることができます。 
.SS  "ソースファイル"
.B javadoc
は、Java 言語ソースファイル (\f3.java\f1)、パッケージコメントファイル、
概要コメントファイル、およびその他の処理されないファイルの 4 種類の
「ソース」ファイルを基にして、出力を生成します。
.SS "クラスソースコードファイル"
各クラスまたはインタフェース、およびそのメンバは、
.B .java
ファイルの中にそれ自身のドキュメンテーションコメントを
持つことができます。ドキュメンテーションコメントの詳細については、
「ドキュメンテーションコメント」の節を参照してください。
.SS "パッケージコメントファイル"
各パッケージは、独自のドキュメンテーションコメントを
持つことができ、「ソース」ファイルに保持します。
.B javadoc
は、生成するパッケージの要約ページにこのコメントをマージします。
通常、このコメントには、パッケージ全体に適用される
ドキュメンテーションを含めます。 
.LP
パッケージコメントファイルを作成するには、ファイル名を 
.B package.html
にして 
.B .java 
ファイルとともにソースツリー内のパッケージディレクトリに置く
必要があります。
.B javadoc 
は、この場所でこのファイル名を自動的に検索します。ファイル名は、
どのパッ
ケージでも同一です。 
.LP
パッケージコメントファイルの内容は、ほかのすべてのコメントと同様に、
HTML で記述された 1 つの大きなドキュメンテーションコメントですが、
ほかのコメントと異なる点が 1 つだけあります。それは、この
ドキュメンテーションコメントには /** と */、および行頭の
アスタリスクのコメント区切り文字を含めてはならないことです。
コメントを書く場合は、最初の文をパッケージの要約にし、
.B <body>
と最初の文の間にタイトルまたはその他のテキストを含めてはなりません。
パッケージタグを含めることはできますが、他のドキュメンテーション
コメントと同様、
{\f3@link\f1} 以外のタグは、説明のあとに置かなければなりません。
.B @see 
タグをパッケージコメントファイルに追加する場合は、完全指定された
名前を使用する必要があります。 
.LP
.B javadoc 
は、実行時にこのファイルを自動的に検索します。このファイルを
見つけると、
.B javadoc
は次の処理を行います。 
.LP
.TP 2
\(bu
.B <body> 
タグと 
.B </body>
タグの間にあるすべての内容を処理のためにコピーする 
.TP 2
\(bu
存在するパッケージタグを処理する 
.TP 2
\(bu
パッケージの要約などの Javadoc が生成するパッケージ要約ページの
最後に、処理されたテキストを挿入する 
.TP 2
\(bu
パッケージのコメントにある最初の文を、パッケージの要約ページの先頭に
コピーする。また、概要の要約などの概要ページのパッケージリストにも、
この最初の文とパッケージ名を追加する。文の末尾は、クラスやメンバの
記述の最初の文に適用されるのと同じ規則によって特定される 
.SS "概要コメントファイル"
ドキュメント化する各アプリケーションまたはパッケージのセットは、
独自の概要ドキュメンテーションコメントを持つことができ、それは
「ソース」ファイルに保持されます。
.B javadoc
は、生成する概要ページにこのコメントをマージします。通常、この
コメントには、アプリケーションまたはパッケージのセット全体に
当てはまるドキュメンテーションを含めます。 
.LP
概要コメントファイルを作成する場合、ファイルに好きな名前を付けて、
好きな場所に置くことができますが、通常はファイル名を 
.B overview.html
にして、ソースツリーの一番上の階層に置きます。異なるパッケージの
セットに対して 
.BR javadoc
を複数回実行したい場合には、1 つのソースファイルのセットに対して
複数の概要コメントファイルを作成できます。たとえば、
.B java.applet 
パッケージのソースファイルが 
.B /home/user/src/java/applet
ディレクトリに含まれているとすると、
.BR /home/user/src/overview.html 
に概要コメントファイルを作成することができます。 
.LP
概要コメントファイルの内容は、前に述べたパッケージコメントファイルと
同様、HTML で記述された 1 つの大きなドキュメンテーション
コメントです。詳細は、前述の説明を参照してください。繰り返しに
なりますが、このコメントを書く場合は、最初の文をアプリケーション
またはパッケージのセットの要約にし、
.B <body>
と最初の文の間にタイトルまたはその他のテキストを含めてはなりません。
概要タグを含めることができます。どのドキュメンテーションコメントに
ついても、{\f3@link\f1}
以外のタグは、説明のあとに置く必要があります。
.B @see
タグを追加する場合は、完全指定の名前を使用する必要があります。 
.LP
.BR javadoc
の実行時に、
.B \-overview
オプションを使って概要コメントファイル名を指定します。ファイルは、
パッケージコメントファイルと同じように処理されます。 
.TP 2
\(bu
.B <body>
タグと
.B </body>
タグとの間にあるすべての内容を処理のためにコピーする 
.TP 2
\(bu
存在する概要タグを処理する 
.TP 2
\(bu
概要の要約などの Javadoc が生成する概要ページの最後に、
処理されたテキストを挿入する 
.TP 2
\(bu
概要ページの先頭に、概要コメントの最初の文をコピーする 
.SS "その他の処理されないファイル"
ソースには、
.B javadoc
でコピー先のディレクトリにコピーする、その他の任意のファイルを
含めることができます。一般に、このようなファイルには、
グラフィックファイル、Java ソース 
(\f3.java\f1) およびクラス (\f3.class\f1) 例のファイル、内容が
通常の Java ソース
ファイルのドキュメンテーションコメントの影響を受けない
独立した HTML ファイルなどがあります。 
.LP
処理されないファイルを含めるには、それらのファイルを 
.BR doc-files 
というディレクトリに置きます。このディレクトリは、任意のパッケージ
ディレクトリの下に作成できます。パッケージごとにこのようなサブ
ディレクトリを 1 つ持つことができます。このサブディレクトリには、
イメージ、サンプルコード、ソースファイル、
.B .class
ファイル、アプレット、および HTML ファイルを入れることができます。
たとえば、ボタンの画像 
.B button.gif 
を
.B java.awt.Button 
クラスドキュメンテーションに含めたい場合は、そのファイルを 
.B /home/user/src/java/awt/doc-files/
ディレクトリに置きます。これらの処理されないファイルへのリンクは
すべて明示的に記述する必要があります。これは、
.B javadoc 
がファイルを見ずに、単にディレクトリとその内容物を生成先に
コピーするだけだからです。たとえば、
.B Button.java 
ドキュメンテーションコメント内のリンクは、次のようになります。 
.LP
.ft 3
.nf
/**
* This button looks like this:
* <img src="doc-files/Button.gif">
*/
.fi
.ft 1
.SS  "生成されるファイル"
デフォルトでは、
.B javadoc 
は、HTML 形式のドキュメンテーションを生成する標準ドックレットを
使います。
このドックレットは、以下の種類のファイルを生成します。以下の
各 HTML「ページ」は、それぞれ別のファイルに対応します。
.B javadoc
が生成するファイルの名前には、クラスやインタフェースの名前に
ちなんだものと、そうでないもの (\f3package-summary.html\f1 など) 
の 2 種類があります。後者のグループには、前者のグループの名前と
ファイル名が競合しないように、ハイフンが含まれています。 
.SS "基本内容ページ"
.TP 2
\(bu
ドキュメント化する各クラスまたは各インタフェースに対し、1 つのクラス
ページまたはインタフェースページ (\f3classname.html\f1) 
.TP 2
\(bu
ドキュメント化する各パッケージに対し、1 つのパッケージ
ページ (\f3package-summary.html\f1)。
.B javadoc
によって、ソースツリーのパッケージディレクトリ内の 
.B package.html
というファイル内のすべての HTML テキストが含められる 
.TP 2
\(bu
パッケージのセット全体に対して 1 つの概要
ページ (\f3overview-summary.html\f1)。これは、生成される
ドキュメントの先頭ページになる。
.B javadoc
によって、
.B -overview
オプションで指定されたファイル内のすべての HTML テキストが含められる。
このファイルが作成されるのは、
.B javadoc
に 2 つ以上のパッケージ名を渡した
場合だけであることに注意する。詳細は、以下の「HTML フレーム」節を参照
.SS "相互参照ページ"
.TP 2
\(bu
パッケージのセット全体に対して 1 つのクラス階層ページ 
(\f3overview-tree.html\f1)。これを表示するには、ナビゲーション
バーの [概要] をクリックしてから、[階層ツリー] をクリックする 
.TP 2
\(bu
各パッケージに対して 1 つのクラス階層
ページ (\f3package-tree.html\f1)。
特定のパッケージページ、クラスページ、またはインタフェースページを
表示し、[階層ツリー] をクリックすると、そのパッケージの階層が
表示される 
.TP 2
\(bu
各パッケージに対して 1 つの [使用] 
ページ (\f3package-use.html\f1)と、
各クラスおよびインタフェースに対して別に 1 つの [使用]
ページ(\f3class-use/classname.html\f1)。このページは、特定のクラス、
インタフェース、またはパッケージのなんらかの部分を使っている
パッケージ、クラス、メソッド、コンストラクタ、およびフィールドを
記述する。クラスまたはインタフェース A について考えると、
その[使用] ページには、A のサブクラス、A として宣言された
フィールド、A を返すメソッド、A 型のパラメータを持つメソッド
およびコンストラクタが表示される。このページには、パッケージ、
クラス、またはインタフェースに移動してから、ナビゲーションバー
の [使用] リンクをクリックすることによってアクセスできる 
.TP 2
\(bu
非推奨 API ページ (\f3deprecated-list.html\f1)。推奨されない
名前すべての一覧が含まれている (非推奨名は、通常は改良された API が
存在するために使用が推奨されていない API の名前で、たいていはそれに
置き換わる名前が提示されている。非推奨 API は、将来の実装では
削除される可能性がある) 
.TP 2
\(bu
直列化形式ページ (\f3serialized-form.html\f1)。直列化可能クラス
および外部化可能クラスの情報用。これらの各クラスには、直列化
フィールドおよびメソッドに関する説明がある。これらの情報は、API を
使う開発者ではなく、再実装者に必要な情報である。ナビゲーションバーに
リンクがない場合、任意の直列化されたクラスに移動して、
クラスの [関連項目] セクション内の [直列化された形式] をクリック
するとこの情報を取得できる 
.TP 2
\(bu
インデックス (\f3index-*.html\f1)。すべてのクラス名、
インタフェース名、コンストラクタ名、フィールド名、およびメソッド名を
アルファベット順に並べてある。インデックスは、Unicode を扱えるように
国際化されており、1 つのファイルとして生成するか、または先頭
文字 (英語の場合 A から Z) ごとに別のファイルとして生成できる 
.SS "サポートファイル"
.TP 2
\(bu
ヘルプページ (\f3help-doc.html\f1)。ナビゲーションバーおよび
上記のページについて説明する。
.BR \-helpfile 
を使って、デフォルトの
ヘルプファイルに置き換わる独自のカスタムヘルプファイルを提供する
こともできる 
.TP 2
\(bu
1 つの
.B index.html
ファイル。表示用 の HTML フレームを作成する。このファイルは、
フレーム付きの最初のページを表示する場合にロードする。このファイル
自体は、テキスト内容を含まない 
.TP 2
\(bu
複数のフレームファイル (\f3*-frame.html\f1)。パッケージ、クラス、
およびインタフェースの一覧を含む。HTML フレームを表示するときに
使われる 
.TP 2
\(bu
パッケージリストファイル (\f3package-list\f1)。
.B \-link
オプションおよび 
.B \-linkoffline
オプションで使われる。これは、HTML ファイルではなくテキストファイル
のため、リンクではアクセスできない 
.TP 2
\(bu
スタイルシートファイル (\f3stylesheet.css\f1)。生成されるページ上に
表示される限られた色数、フォントファミリ、フォントサイズ、フォントの
スタイルおよび配置を制御する 
.TP 2
\(bu
コピー先ディレクトリにコピーしたいファイル (イメージ、サンプル、
ソースファイルなど) が入っている doc ファイルのディレクトリ。
.B javadoc 
はこのようなファイルを処理しない。つまり、このようなファイル内の
.B javadoc
タグはすべて無視される。ソースツリーに存在しない限り、この
ディレクトリは生成されない
.SS "HTML フレーム"
.B javadoc 
は、下の図に示すように、2 つか 3 つの HTML フレームを生成します。
ソースファイル (*\f3.java\f1) または単一のパッケージ名を引数として
.B javadoc
コマンドに渡す場合は、左側の列にクラスの一覧を表示する
フレーム (C) 1 つだけが作成されます。
.B javadoc
に複数のパッケージ名を渡す場合は、概要ページ (Detail) に加えて、
すべてのパッケージの一覧を表示する第 3 のフレーム (P) が
作成されます。この概要ページのファイル名は
.BR overview-summary.html
です。したがって、このファイルが作成されるのは、2 つ以上のパッケージ
名を渡した場合だけです。[フレームなし] リンクをクリックするか、
.BR overview-summary.html
から表示するようにすると、フレームを省略できます。 
.LP
HTML フレームに慣れていない場合は、フレームには、印刷および
スクロール用の「フォーカス」が必要であることに注意する
必要があります。フレームにフォーカスを与えるには、そのフレームを
クリックします。すると、多くのブラウザでは、矢印キーおよびページキー
を使ってそのフレームをスクロールしたり、[印刷] メニュー
コマンドを使ってそのフレームを印刷したりできるようになります。 
.LP
.ft 3
.nf
    ------------                ------------
    |C| Detail |                |P| Detail |
    | |        |                | |        |
    | |        |                |-|        |
    | |        |                |C|        |
    | |        |                | |        |
    | |        |                | |        |
    ------------                ------------
   javadoc *.java           javadoc java.lang java.awt
.fi
.ft 1
.LP
HTML フレームが必要かどうかによって、次のどちらかのファイルを
開始ページとしてロードします。 
.LP
.TP 2
\(bu
.B index.html 
(フレームあり) 
.TP 2
\(bu
.B overview-summary.html 
(フレームなし) 
.SS "生成されるファイル構造"
生成されるクラスファイルおよびインタフェースファイルは、Java ソース
ファイルおよびクラスファイルと同じディレクトリ階層で組織
されます。この構造は、1 つのサブパッケージにつき 1 つのディレクトリ
で構成されます。 
.LP
たとえば、
.B java.applet.Applet 
クラスに対して生成されるドキュメントは、
.BR java/applet/Applet.html 
に格納されます。生成先のディレクトリの名前が apidocs だと
すると、java.applet パッケージのファイル構造もこれに従います。
前述したように、「frame」という語を名前に含むファイルは、
すべて左上または左下のフレームに表示されます。それ
以外の HTML ファイルは、すべて右側のフレームに表示されます。 
.LP
注: ディレクトリは、太字 (bold) で示してあります。
アスタリスク (*) は、
.B javadoc 
への引数がパッケージ名でなくソースファイル名 (*\f3.java\f1) の
ときに、省略されるファイルおよびディレクトリを示しています。また、
引数がソースファイル名のときには、
.B package-list
は作成されますが、空です。
.B doc-files 
ディレクトリは、ソースツリー内に存在しない限り、生成先に表示されません。 
.LP
.sp 1n
.TS
lb lb.
apidocs	最上位ディレクトリ
  index.html	HTML フレームを設定する初期ページ
* overview-summary.html	最初の文が要約になっている、パッケージ
  overview-tree.html	全パッケージのクラス階層
  deprecated-list.html	全パッケージの推奨されない API 
  serialized-form.html	全パッケージの直列化形式
* overview-frame.html	全パッケージ。左上フレームに表示
  allclasses-frame.html	全パッケージの全クラスのリスト。左下フレームに表示
  help-doc.html	これらのページの構成を示すユーザヘルプ
  index-all.html	-splitindex なしで作成されたデフォルトインデックス
  index-files	-splitindex で作成されたディレクトリ
    index-<number>.html	-splitindex で作成されたインデックスファイル
  package-list	外部参照の解釈処理、パッケージ名
  stylesheet.css	(フォント、色など) HTML スタイルシート
  java	サブパッケージディレクトリ
    applet	サブパッケージディレクトリ
      Applet.html	Applet クラスのページ
      AppletContext.html	AppletContext インタフェースのページ
      AppletStub.html	AppletStub インタフェースのページ
      AudioClip.html	AudioClip インタフェースのページ
    * package-summary.html	最初の文が要約である、このパッケージのクラス
    * package-frame.html	このパッケージのクラス。左下のフレームに表示
    * package-tree.html	このパッケージのクラス階層
      package-use	このパッケージが使われる場所
      files	イメージとサンプルファイルがあるディレクトリ
      class-use	API を使用するページがあるディレクトリ
        Applet.html	Applet クラスを使用するページ
        AppletContext.html	AppletContext インタフェースを使用するページ
        AppletStub.html	AppletStub インタフェースを使用するページ
        AudioClip.html	AudioClip インタフェースを使用するページ
.TE
.SS  "ドキュメンテーションコメント: ソースコードへのコメント"
.LP
ソースコードの任意のエンティティ (クラス、インタフェース、
メソッド、コンストラクタ、
またはフィールド) の宣言の前には、ドキュメンテーションコメントを
入れることができます。このコメントは、
.B javadoc
コメントとも呼ばれています。doc コメントは、コメントを
開始する文字 
.B /** 
から、コメントを終了する文字 
.B */ 
までの間の
文字です。コメントは複数行にまたがることができます。
.LP
.RS
.ft 3
.nf
/**
* This is the typical format of a simple documentation comment.
*/
.fi
.ft 1
.RE
.LP
次のように、コメントは 1 行にまとめることもできます。
.LP
.RS
.ft 3
.nf
/** This comment takes up only one line. */
.fi
.ft 1
.RE
.LP
ドキュメンテーションコメントが認識されるのは、クラス、
インタフェース、コンストラクタ、メソッド、またはフィールド
宣言の前に置かれた場合だけです (クラス、メソッド、およびフィールドの
例を参照)。メソッドの本体に置かれたドキュメンテーション
コメントは無視されます。
.B javadoc
ツールは、宣言文ごとに 1 つのドキュメンテーションコメントだけを
認識します。
.LP
よく発生する間違いは、重要な文をクラスコメントとクラス宣言の間に
入れてしまうことです。
.B javadoc
はクラスコメントを無視するため、注意してください。
.LP
.RS
.ft 3
.nf
/**
* This is the class comment for the class Whatever.
*/

import com.sun;   // MISTAKE - Important not to put statements here

public class Whatever {
}
.fi
.ft 1
.RE
.LP
コメントは、説明とそれに続くタグから構成されています。
説明は開始区切り文字 
.B /** 
から始まり、タグ付き段落まで続きます。タグ付き段落は行頭の
.B @
文字から始まります。この文字よりも前にあるアスタリスクおよび空白は
すべて無視
されます。タグ付き段落が始まった後では、説明は継続できません。
タグの数は
任意です。いくつかの種類のタグは繰り返すことができますが、
できないものもあります。
次の 
.B @see
はタグ付き段落を開始します。
.LP
.RS
.ft 3
.nf
 /**
 * This is a doc comment.
 * @see java.lang.Object
 */
.fi
.ft 1
.RE
.LP
コメントは HTML で記述します。テキストは HTML で
記述しなければなりません。
これは、HTML のエンティティを使う必要があること、
および HTML タグを使用できること
を意味します。HTML は、使用するブラウザがサポートする
任意のバージョンを使うことが
できます。標準ドックレットは、階層式スタイルシートと
フレームを含むほかの部分 (ドキュメンテーションコメント
以外) は、HTML 3.2 に準拠したコードを生成するように記述
されています 
(フレームセット対応のため、生成される各
ファイルは、「HTML 4.0」で始まる)。 
.LP
たとえば、より小さい (<) およびより大きい (>) という
記号は、
.B &lt; 
と 
.BR &gt; 
と記述する必要があります。同様に、アンパサンド (&) は、
.BR &amp; 
と記述する必要があります。次の例で
は、ボールドの HTML タグ <b> を示します。 
.LP
次に doc コメントを示します。 
.LP
.RS
.ft 3
.nf
/**
* This is a <b>doc</b> comment.
* @see java.lang.Object
*/
.fi
.ft 1
.RE
.LP
.B javadoc 
は、doc コメントを解析するときに、各行の先頭にある
文字アスタリスク (*) をすべて破棄し
ます。また、最初のアスタリスク (*) より前の空白と
タブも破棄します。したがって、
行頭の空白をそのままにしておきたい場合は、
先頭のアスタリスクを省略してはな
りません。たとえば、
.B <pre> 
タグを使って、サンプルコードをインデントする場合などです。
.LP
各 doc コメントの最初の文は、宣言されている
エンティティに関する簡潔かつ完全
な説明を含む要約文でなければなりません。
この文は、空白、タブ、または行末記
号が続いている最初のピリオド、あるいは最初のタグで終了します。
.B javadoc
は、HTML ページの最初にあるメンバ要約に、この最初の文をコピーします。
.LP
.B java 
では、単一の文で複数のフィールドを宣言できます。
しかし、この文のドキュメンテ
ーションコメントは 1 つだけで、このコメントが
すべてのフィールドにコピーされます。
したがって、フィールドごとに個々の
ドキュメンテーションコメントを付けたい場合は、
各フィールドを異なる文で宣言しなければなりません。
たとえば、次のドキュメンテー
ションコメントは単一の宣言としては意味を成さず、
2 つの宣言として処理するべき
です。
.LP
.RS
.ft 3
.nf
/**
* The horizontal and vertical distances of point (x,y)
*/
public int x, y;      // Avoid this
.fi
.ft 1
.RE
.LP
.B javadoc
は、上記コードから次のドキュメンテーションを生成します。
.LP
.RS
.ft 3
public int x
.fi
.ft 1
The horizontal and vertical distances of point
(x,y).
.ft 3
.nf
public int y
.fi
.ft 1
The horizontal and vertical distances of point
(x,y).
.RE
.LP
ヘッダタグを使用するときは注意してください。
メンバ用のドキュメンテーションコ
メントを書くときは、
.B <H1>
や
.BR <H2>
などの HTML ヘッダタグを使用しないでください。これは、
.B javadoc
が全ドキュメントを構造化して生成するため、
これらの構造化タグを使用すると、
ドキュメントの書式が乱れる可能性があるためです。
しかし、クラスやパッケージの
コメントでは、これらのヘッダタグを使用して構造化を指示してください。
.LP
メソッドのコメントの自動再利用は、コメントの継承とも呼びます。
クラスまたはインタフェースのメソッドがドキュメンテーションコメント
またはタグを持たない場合、
.B javadoc
は、以前オーバーライドまたは実装したメソッドがあれば、そのメソッドから
コメントまたはタグを再利用します。次の場合に、これを行います。
.TP 2
\(bu
クラスのメソッドがスーパークラスのメソッドをオーバーライドした
.PD 0
.TP 2
\(bu
インタフェースのメソッドがスーパーインタフェースのメソッドをオーバーライドした
.TP 2
\(bu
クラスのメソッドがインタフェースのメソッドを実装した
.PD
.LP
最初の 2 つの場合、メソッド m() が別のメソッドをオーバーライドすると、
.B javadoc
は m() のドキュメンテーションに「オーバーライド」という
サブヘッダを作成し、また、オーバーライドするメソッドへのリンクも作成します。
.LP
3 つ目の場合、特定のクラスのメソッド m() がインタフェースの
メソッドを実装すると、
.B javadoc
は m() のドキュメンテーションに「定義」という
サブヘッダを作成し、また、実装するメソッドへのリンクも作成します。
.LP
検索する方法は、クラス C のメソッドの場合、
.B javadoc
はクラス C が実装するすべてのインタフェースを再帰的に検索し、
次に C のスーパークラスすべてを検索します。インタフェース I のメソッドの場合、
.B javadoc
は I のスーパーインタフェースすべてを再帰的に検索します。
どちらの場合も、最初に検索したコメントをコピーします。
.LP 
ドキュメンテーションコメントの仕様については、「Java Language Specification」
(James Gosling、Bill Joy、Guy Steele 共著) の第 18 章「Documentation Comments」を
参照してください。 
.SS "javadoc のタグ"
.LP
.B javadoc 
は、
.B javadoc
コメント内に埋め込まれた特殊なタグを解析します。これらの
特殊な doc タグを使うと、
書式の整った完全な API ドキュメンテーションをソース
コードから自動的に生成できます。
タグは、単価記号 (\f3@\f1) で始まり、大文字小文字が
区別されます。これらのタグは、
以下に示すとおりに、大文字と小文字を区別して入力する
必要があります。タグは、行
の先頭 (ただし先行する空白と省略可能なアスタリスクは除く) から
始めなければなり
ません。慣習上、同じ名前のタグは 1 個所にまとめて記述します。
たとえば、
.B @see
タグが複数ある場合は、すべてを 1 個所にまとめて記述します。 
.LP
今後のリリースで導入されるタグについては、
「Proposed Javadoc Tags」を参照してください。 
.LP
現時点で有効なタグを以下に示します。 
.LP
.sp 1n
.TS
center, box;
cbp-1 | cbp-1
l | l .
タグ 	導入された JDK 
	のバージョン
=
@author	1.0
{@docRoot}	1.3
@deprecated	1.0
@exception	1.0
{@link}	1.2
@param	1.0
@return	1.0
@see	1.0
@serial	1.2
@serialData	1.2
@serialField	1.2
@since	1.1
@throws	1.2
@version	1.0
.TE
.LP
.TP
.BI @author  " name-text"
.B \-author 
オプションが使われている場合、
生成されるドキュメントに、指定された 
name-text を持つ Author エントリを追加します。
1 つの doc コメントに複数の 
.B @author
タグを含めることができます。
.B @author
タグごとに 1 つ、またはタグごとに複数の名前を
指定できます。前者の場合は、
.B javadoc
は、名前と名前の間にコンマ (\f3,\f1) とスペースを挿入します。
後者の場合、テキスト全体が
解析されることなく生成されるドキュメントにコピーされます。
このため、コンマ以外
の現地仕様の名前区切り文字を使う場合は、1 行に複数の名前を指定します。 

.TP
.B {@docRoot}
生成された任意のページを起点とした、ドキュメントの (出力先) 
ルートディレクトリの相対パスを表します。このタグは、著作権ページ
または会社のロゴなど、生成されるすべてのページから参照するファイル
を取り込むときに使います。通常は、各ページの最下部から著作権
ページにリンクします。
.RS
.LP
この 
.B {@docRoot}
タグは、コマンド行および doc コメントで使うことができます。
.TP 4
1.
コマンド行では、次のようにヘッダ (header)、フッタ (footer)、またはページの最下部 (bottom)を定義します。
.sp 1n
.B javadoc \-bottom '<a href="{@docRoot}/copyright.html">Copyright</a>'
.TP
2.
doc コメントには次のように記述します。
.sp 1n
.nf
.ft 3
/**
* See the <a href="{@docRoot}/copyright.html">Copyright</a>.
*/
.ft 1
.fi
.LP
このタグが必要な理由は、生成されるドキュメントが、サブパッケージと
同じ階層のディレクトリに格納されるためです。たとえば、次のように指定します。 
.sp 1n
.ti +5n
.B <a href="{@docRoot}/copyright.html">
.sp 1n
次のように解決されます。 
.sp 1n
.ti +5n
\f3<a href=".\|.\|/.\|.\|/copyright.html">\f1   .\|.\|. 
java/lang/Object.java の場合
.sp 1n
および
.sp 1n
.ti +5n
\f3<a href=".\|.\|/.\|.\|/.\|.\|/copyright.html">\f1 .\|.\|. java/lang/ref/Reference.java の場合
.RE

.TP
.BI @deprecated " deprecated-text"
この API は (動作はするが) 使用すべきでないことを示す
コメントを追加します。
.B javadoc 
 は、deprecated-text を説明の前に移動してイタリックにし、
その前にボールドの警告
「推奨されません。」を追加します。 
.LP
.RS 
deprecated-text の最初の文では、少なくともユーザにどのようなときに
その API が推奨されないか、およびそれに代わる API を提示する
必要があります。
.B javadoc 
は、最初の文だけを要約セクションとインデックスにコピーします。
あとに続く文で、なぜその API が推奨されないかを
説明することもできます。代わりの API を
指し示す {\f3@link\f1} タグ (
.B javadoc 
1.2 以降の場合) を含める必要があります。 
.LP
.TP 2
\(bu
.B javadoc
1.2 では、{\f3@link\f1} タグを使用してください。これにより、
必要な場所にインラインで
リンクが作成されます。たとえば、次のように使います。 
.LP
.RS
.ft 3
.nf
/**
 * @deprecated  As of JDK 1.1, replaced by 
 *    {@link #setBounds(int,int,int,int)}
 */
.fi
.ft 1
.RE
.LP
.TP 2
\(bu
.B javadoc 
1.1 では、各 
.B @deprecated 
タグに 
.B @see
タグ (インラインにできない) を作成するのが標準の形式です。 
.LP
推奨されないタグについての詳細は、「
.B @deprecated
タグ」 を参照してください。 
.RE
.TP
.BI @exception  " class-name description"
.B @exception
タグは、
.BR @throws
と同義です。 
.TP
{\f3@link \f2name label\f1}
指定された名前を指すインラインリンクを挿入します。
このタグの name と label の構文
は、後述する 
.B @see
タグと同じですが、関連項目セクションにリンクを置くのではなく、
インラインリンクを生成
する点が異なります。インラインテキストのほかの部分と
区別するため、このタグの開始と
終了には大括弧を使います。ラベルの中で「}」を
使う必要がある場合は、HTML のエン
ティティ表記法の &#125; を使います。 
.RS 
.LP
1 つの行で使える {\f3@link\f1} タグの数に制限はありません。
このタグは、ドキュメンテーションコメントの説明部分、または 
.BR @deprecated
、
.BR @return
、
.BR @param
などの任意のタグのテキスト部分で使うことができます。 
.LP
たとえば、次のコメントでは 
.B getComponentAt(int, int) 
メソッドを参照しています。 
.LP
.ft 3
.nf
Use the {\f3@link #getComponentAt(int, int) getComponentAt\f1} method.
.fi
.ft 1
.LP
標準ドックレットでは、このコメントから次の HTML が生成されます
(このコメントが同じパッケージの別のクラス
を参照していると仮定した場合)。 
.LP
.ft 3
.nf
Use the 
<a href="Component.html#getComponentAt(int, int)">\\
               getComponentAt</a>method.
.fi
.ft 1
.LP
この HTML は Web ページ上で次のように表示されます。 
.LP
.ft 3
.nf
Use the getComponentAt method.
.fi
.ft 1
.RE
.TP
.BI @param  " parameter-name description"
Parameters セクションにパラメータを追加します。
説明は次の行に続けて記述できます。 
.TP
.BI @return  " description"
description で指定されたテキストを持つ戻り値
セクションを追加します。テキストでは、
戻り値の型と取り得る値の範囲について記述する必要があります。 
.TP
.BI @see  " reference"
.IR reference 
を指すリンクまたはテキストエントリを
持つ [関連項目] 見出しを追加します。
doc コメントには任意の数の 
.B @see
タグを含めることができ、これらのタグはすべて
同じ見出しの下にまとめられます。
.B @see
タグには次の 3 つの形式があります。3 番目がもっとも一般的な形式です。 
.TP
.BI @see " string"     
注: この形式は JDK 1.2 では使用できません。
この形式では、引用されたテキストが
表示されません。 ただし、JDK 1.2.2 で修正されました。
string のテキストエントリを追加します。
リンクは生成されません。string は、書籍、または
URL ではアクセスできない情報の参照先です。
.B javadoc 
は、最初の文字が二重引用符 (") かどうかを調べて、
上の 2 つの形式とこの形式とを区
別します。次に例を示します。 
.LP
.RS 
.ft 3
.nf
     @see "The Java Programming Language"
.fi
.ft 1
.LP
これは次のようなテキストを生成します。 
.LP
.ft 3
.nf
     関連項目:
          "The Java Programming Language"
.fi
.ft 1
.RE
.TP
\f3@see <a href="\f2URL#value\f3">\f2label\f3</a>\f1
.IR URL#value 
で定義されたとおりにリンクを追加します。

.I URL#value 
は、相対 URL または絶対 URL です。
.B javadoc
は、最初の文字として、小なり括弧 (\f3<\f1) を探すことで、
このリンクをその他の場合と区別します。 
.LP
.RS 
.ft 3
.nf
     @see <a href="spec.html#section">Java Spec</a>
.fi
.ft 1
.LP
これは次のようなリンクを生成します。 
.LP
.ft 3
.nf
    関連項目:
          Java Spec
.fi
.ft 1
.RE
.TP
.BI @see  " package.class#member label"
Java 言語で指定された名前のドキュメンテーションを指す、
表示テキスト label を持つ
リンクを追加します。label は省略可能です。label を省略した場合は、
該当する名前が
適切に短くされて (「名前の表示方法」を参照)、
表示テキストとして代わりに表示されます。ラベルは、表示
テキストを短縮する場合や、該当する名前と異なる
表示テキストを指定する場合に使
います。 
.LP
.RS
JDK 1.2 では、ラベルではなく、名前だけが
.B <code>
HTML タグに囲まれて自動的に表示されます。JDK 1.2.2 以降は、
.B <code>
は常に、ラベルが使用されているかどうかにかかわらず、
表示可能なテキストを囲みます。
.TP 2
\(bu
.I package.class#member 
には、Java 言語で有効な任意の名前、つまりパッケージ、
クラス、インタフェース、
コンストラクタ、メソッド、またはフィールドの名前を指定します
。ただし、メンバ名の前の
ドットは、ハッシュ文字 (#) で置き換えます。
指定した名前が、ドキュメント化されるクラス
にある場合、
.B javadoc 
は該当する名前へのリンクを自動的に作成します。
外部参照クラスへのリンクを作成する
には、
.B \-link
オプションを使います。参照されるクラスに属していない名前の
ドキュメンテーションを参
照するには、ほかの 2 つの形式の 
.B @see
タグを使います。1 番目の引数については、「名前の指定」 で
詳しく説明します。 
.TP 2
\(bu
.I label 
は省略可能なテキストで、
リンクのラベルとして表示されます。label には空白を含
めることができます。label を省略した場合は、
.I package.class.member 
が、現在のクラスおよびパッケージに応じて
適切に短くされて表示されます。「名前の表示方法」を参照してください。 
.TP 2
\(bu
空白文字は 
.I package.class#member 
と 
.IR label 
の間の区切り文字です。括弧内の空白文字は、
ラベルの開始を意味しないため、
メソッドのパラメータ間のデリミタとして使うことができます。 
.LP
この例では、Character クラスの 
.B @see
タグが String クラスの equals メソッドを参照しています。
タグには、名前 \f3String#equals(Object)\f1 とラベル \f3equals\f1 の
両方の引数が含まれています。 
.LP
.ft 3
.nf
      /**
      * @see String#equals(Object) equals
      */
.fi
.ft 1
.LP
標準ドックレットは、次のような HTML を生成します。 
.LP
.ft 3
.nf
    <dl>
    <dt><b>関連項目:</b>
    <dd><a href="../../java/lang/String#equals\\
                 (java.lang.Object)"><code>equals</code></a>
    </dl>
.fi
.ft 1
.LP
これは、ブラウザでは次のように表示され、
ラベルがリンクテキストになります。 
.LP
.ft 3
.nf
     関連項目:
          equals
.fi
.ft 1
.LP
.B 名前の指定:
この
.I package.class#member
の名前は、
.BR java.lang.String#toUpperCase() 
のように完全指定することも、
.B String#toUpperCase() 
や 
.BR #toUpperCase() 
などのように完全指定しないことも可能です。
完全指定しない場合、
.B javadoc
は、通常の Java コンパイラの検索順序で検索を行います。
詳細は、以下の「
.BR @see
の検索順序」を参照してください。指定する名前では、
メソッドの複数の引数の型の間など、
括弧内に空白を含めることができます。 
.LP
短い部分修飾名を指定することの利点は、入力する
文字数が減ることと、ソースコードが
読みやすくなることです。以下の表に示すのは、さまざまな
形式の名前です。Class には
クラスかインタフェース、Type にはクラス、インタフェース、
配列、または基本データ型、
method にはメソッドまたはコンストラクタを指定できます。 
.LP
.sp
.TS
box;
cbp-1
l . 
T{
一般的な形式
.BI @see " package.class#member"
T}
=
現在のクラスのメンバを参照する 
@see  #field
@see  #method(Type, Type,...)
@see  #method(Type argname, Type argname,...)
.LP
現在の、またはインポートされたパッケージの別のクラスを参照する
@see  Class#field
@see  Class#method(Type, Type,...)
@see  Class#method(Type argname, Type argname,...)
@see  Class
.LP
別のパッケージを参照する (完全修飾)
@see  package.Class#field
@see  package.Class#method(Type, Type,...)
@see  package.Class#method(Type argname, Type argname,...)
@see  package.Class
@see  package
.TE
.LP
上の表に対する注を以下に示します。 
.LP
.TP 2
\(bu
クラスまたはパッケージを省いた最初の形式のセットでは、
.B javadoc 
は現在のクラス階層だけで検索を行います。
.B javadoc 
は、現在のクラスかインタフェースのメンバ、スーパークラスか
スーパーインタフェースの 1 つ、または
親クラスかインタフェースの 1 つ (検索手順 1 〜 3) を検索します。
現在のパッケージのほかの部分やほかのパッケージ (検索手順 4 〜 5) は
検索しません。 
.TP 2
\(bu
メソッドまたはコンストラクタが、getValue のように
括弧を付けずに名前として入力され、
かつ同じ名前のフィールドがない場合は、
.B javadoc
は正確にリンクを作成しますが、括弧と引数を追加するように
促す警告メッセージを出力
します。このメソッドをオーバーロードした場合、
.B javadoc 
は、指定されたメソッドではなく、検索で見つかった
最初のメソッドにリンクします。 
.TP 2
\(bu
内部クラスは、どの形式の場合でも、単に 
.BR inner 
という形ではなく、
.BR outer.inner 
という形で指定しなければなりません。 
.TP 2
\(bu
すでに述べたとおり、クラスとメンバを区切るのに、ドット (\f3.\f1) ではなく
ハッシュ文字 (\f3#\f1) が
使われていることに注意してください。ドットは、クラス、
内部クラス、パッケージ、および
サブパッケージを区切るのにも使われますが、
.B javadoc
では、クラスとメンバを区切るのにハッシュ文字を使うことで、
あいまいさを排除しています。
上に示した形式では、ハッシュ文字の使用は不可欠です。
これ以外の形式では、
あいまいにならない限りドットは許容されます。
ただし、その場合でも警告は表示されます。 
.LP
.B @see の検索順序:
.B javadoc 
は、ソースファイル (\f3.java\f1)、パッケージ
ファイル (\f3package.html\f1)、または
概要ファイル (\f3overview.html\f1) 内で使われる 
.B @see
タグを処理します。あとの 2 つのファイルでは、
.BR @see
を使って指定する名前を完全修飾する必要があります。
ソースファイルでは、完全修飾名
と部分修飾名のどちらを指定することもできます。 
.LP
.B javadoc
が、完全修飾されていない 
.B .java
ファイルで 
.B @see
タグを見つけた場合、指定された名前を Java コンパイラと
同じ順序で検索します。ただし、
.B javadoc
は、一部の名前空間のあいまいさは検出しません。これは、
.B javadoc
が、ソースコードにこれらのエラーが存在していないことを
前提として動作するためです。
検索順序は、「Java Language Specification」の第 6 章「Names」で
正式に定義され、
内部クラス仕様で修正されています。具体的には、
検索は次の順序で行われます。 
.LP
.TP 4
1. 
現在のクラスまたはインタフェース 
.PD 0
.TP 4
2. 
名前を囲むクラスとインタフェース。もっとも近いものを最初に検索 
.TP 4
3. 
スーパークラスとスーパーインタフェース。もっとも近いものを最初に検索 
.TP 4
4. 
現在のパッケージ 
.TP 4
5. 
インポートされるパッケージ、クラス、
およびインタフェース。import 文の順序に従って検索 
.PD
.LP
.B javadoc 
は、一致する名前が見つかるまで、各クラスについて
手順 1 〜 3 を繰り返して検索を続け
ます。つまり、現在のクラスとそのクラスを囲む
クラス E を検索したあと、E のスーパクラスを
検索し、最後に E を囲むクラスを検索します。手順 4 と 5 では、
.B javadoc
は、1 つのパッケージ内でのクラスまたはインタフェースの検索を、
なんらかの決まった順
序で行うわけではありません (この検索順序はコンパイラに依存します)。
手順 5 では、
.B javadoc
は、
.BR java.lang 
を検索します。これは、
.BR java.lang 
がすべてのプログラムによって自動的にインポートされるためです。 
.LP
.B javadoc 
は、必ずしもサブクラスを検索するわけではなく、Javadoc の
実行中にほかのパッケージ
のドキュメンテーションが生成される場合でも、ほかのパッケージの
検索は行いません。
たとえば、
.B @see
タグが 
.B java.awt.event.KeyEvent 
クラスにあって、
.B java.awt 
パッケージにある名前を参照する場合、
.B javadoc
は、そのクラスがインポートしない限りそのパッケージを検索しません。 
.LP
.B 名前の表示方法:
.I label 
が省略された場合は、
.I package.class.member 
が表示されます。通常、package.class.member は、現在の
クラスおよびパッケージに
応じて適切に短くされます。「短くされる」とは、
.B javadoc 
が必要最小限の名前を表示するということです。
たとえば、String.toUpperCase() メソッドが同じ
クラスのメンバへの参照と、別のクラスのメンバへの
参照を含んでいる場合、クラス名は後者の場合だけ表示されます。

 
.sp 1n
.TS
lb lb lb
l  lb l.
T{
.nf
参照の
種類
T}	例	表示

T{
.nf
@see タグ
が同じ
クラス
のメンバ
を参照
T}	T{
.nf
@see
String#toLowerCase()
T}	T{
.nf
toLowerCase()
(クラス名を省略)
T}

T{
.nf
@see
タグが
別の
クラスの
メンバ
を参照
T}	T{
.nf
@see
Character#toLowerCase(char)
T}	T{
.nf
Character.toLowerCase(char)
(クラス名を含む)
T}
.TE
.LP
.B @see の例:
右側のコメントは、
.B @see 
タグが
.BR java.applet.Applet:
などの別のパッケージのクラス内にある場合に名前が
表示される方法を示しています。 
.LP
.sp 1n
.TS
li li
lb l.
例	関連項目:
@see java.lang.String	// String
@see java.lang.String The String class	// The String class
@see String	// String
@see String#equals(Object)	// String.equals(Object)
@see String#equals	T{
.nf
// String.equals\e
      (java.lang.Object)
T}
@see java.lang.Object#wait(long)	T{
.nf
// java.lang.Object.\e
      wait(long)
T}
@see Character#MAX_RADIX	// Character.MAX_RADIX
@see <a href="spec.html">Java Spec</a>	// Java Spec
@see "The Java Programming Language"	T{
.nf
// "The Java Programming \e
      Language"
T}
.TE
.RE
.TP
.BI @since  " since-text"
生成されるドキュメントに、指定された 
.IR since-text 
を持つ [導入されたバージョン] 
見出しを追加します。このテキストには、
特別な内部構造はありません。このタグは、
特定の変更または機能が、since-text によって
指定されたソフトウェアのリリース以来、
継続して存在することを意味します。たとえば、次のとおりです。 
.RS 
.LP
.ft 3
.nf
@since JDK1.1
.fi
.ft 1
.RE
.TP
.BI @serial  " field-description"
デフォルトの直列化可能フィールドの doc コメントで使用します。 
.RS 
.LP
省略可能な field-description は、
フィールドの doc コメントを拡張します。
この説明では、フィールドの意味および
取り得る値のリストを指定しなければなりません。
必要な場合には、複数の行にまたがって説明を記述することができます。 
.LP
.B @since
タグは、Serializable クラスの初期バージョン以来
追加されている各直列化フィールド
に対して追加する必要があります。 
.LP
.B \-private 
クラスの直列化された形式を取得するには、
.B \-private 
オプションを使います。したがって、public および private クラスの
両方の直列化された
形式を生成するには、
.B javadoc 
でこの 
.B \-private 
オプションを使います。 
.LP
これらのタグの使用法についての詳細と
使用例は、「Java オブジェクト直列化仕様」
の 1.6 節 「クラスの直列化可能なフィールドおよびデータの文書化」を
参照してください。
また、「Serialization FAQ」も参照してください。ここには、「なぜ 
.B javadoc
標準 doclet は 
.B @serial 
タグと 
.B @serialData 
タグがない場合について頻繁に警告を出すのか」と「
.B javadoc
を 
.B \-private
スイッチで実行していない場合、なぜ 
.B javadoc
は private フィールドの 
.B @serial 
タグがないことについて警告を出すのか」という質問とその回答があります。
.LP
.RE
.TP
.BI @serialField  " field-name  field-type  field-description"
Serializable クラスの serialPersistentFields メンバの ObjectStreamField コンポーネント
をドキュメント化します。各 ObjectStreamField コンポーネントに対して
.B @serialField 
タグを 1 つ使う必要があります。
.TP
.BI @serialData  " data-description"
.I data-description 
は、データのシーケンスと型、特に writeObject メソッドによって書き込ま
れる任意指定のデータ、および Externalizable.writeExternal メソッド
によって書き込まれ
るすべてのデータのシーケンスと型をドキュメント化します。 
.LP
.RS 
.B @serialData
タグは、writeObject、readObject、writeExternal、および readExternal の各メソッドの 
doc コメントで使用できます。 
.RE
.TP
.BI @throws  " class-name  description"
.B @throws
タグと 
.B @exception
タグは同義です。生成されるドキュメン
テーションに、
.I class-name 
および 
.I description 
テキストを持つ [例外] 小見出しを追加します。
.I class-name 
は、該当するメソッドによって
スローされる可能性のある例外の名前です。このクラスが完全
修飾されていない場合、
.B javadoc
は検索順序に従ってクラスを探します。 
.TP
.BI @version  " version-text"
.B \-version 
オプションが使われている場合、生成されるドキュメンテーションに、
指定された 
.I version-text 
を持つ [バージョン] 小見出しを追加します。
このテキストには、特別な
内部構造はありません。1 つの doc コメントに含めることのできる 
.B @version
タグは 1 つ以下です。通常、バージョンは、該当するクラスまたは
メンバを含むソフト
ウェア (JDK など) のバージョンを指します。 
.SS "タグを使用できる場所"
以下では、タグを使用できる場所について説明します。@see、@link、@since、および @deprecated の 4 つのタグは、すべての doc コメントで使用できます。 
.SS "概要ドキュメンテーションタグ"
概要タグは、概要ページのドキュメンテーション
コメント (通常は \f3overview.html\f1 
という名前のソースファイル内にある) で使用できるタグです。
ほかのドキュメンテーション
コメントと同様に、これらのタグは、説明のあとで使う必要があります。 
.LP
注: JDK 1.2 では、概要ドキュメント内の {\f3@link\f1} タグに
バグがあります。テキストは適切に表示されますが、
リンクが設定されません。 
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
概要タグ 
=
@see
{@link}
@since
.TE
.RE
.SS "パッケージドキュメンテーションタグ"
パッケージタグは、パッケージのドキュメンテーション
コメント (\f3package.html\f1 という
名前のソースファイルに存在) で使用できるタグです。 
.LP
.sp 5
.cs R 20
.RS
.nf
パッケージタグ
==============
@see
{@link}
@since
@deprecated
.cs R
.fi
.RE
.SS "クラスおよびインタフェースドキュメンテーションタグ"
次に示すのは、クラスまたはインタフェースのドキュメンテーション
コメントで使用できる
タグです。 
.LP
.sp 5
.cs R 20
.RS
.nf
クラスおよびインタフェースタグ 
==============================
@see
{@link}
@since
@deprecated
@author
@version
.cs R
.fi
.RE
.LP
次は、クラスコメントの例です。
.LP
.RS
.ft 3
.nf
/**
* A class representing a window on the screen.
* For example:
* <pre>
*    Window win = new Window(parent);
*    win.show();
* </pre>
*
* @author  Sami Shaio
* @version 1.12, 05/12/00
* @see     java.awt.BaseWindow
* @see     java.awt.Button
*/
class Window extends BaseWindow {
...
}
.fi
.ft 1
.RE
.SS "フィールドドキュメンテーションタグ"
次に示すのは、フィールドのドキュメンテーションコメントで
使用できるタグです。 
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
フィールドタグ 
=
@see
{@link}
@since
@deprecated
@serial
@serialField
.TE
.RE
.LP
次は、フィールドコメントの例です。
.LP
.RS
.ft 3
.nf
/**
* The X-coordinate of the component.
*
* @see #getLocation()
*/
int x = 1263732;
.fi
.ft 1
.RE
.SS "コンストラクタおよびメソッドドキュメンテーションタグ"
次に示すのは、コンストラクタまたはメソッドのドキュメンテーション
コメントで使用できるタグです。 
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
メソッドおよびコンストラクタタグ 
=
@see
{@link}
@since
@deprecated
@param
@return
@throws (@exception)
@serialData
.TE
.RE
.LP
次はメソッドの doc コメントの例です。
.LP
.RS
.ft 3
.nf
/**
* Returns the character at the specified index. An index
* ranges from <code>0</code> to <code>length() - 1</code>.
*
* @param     index  the index of the desired character.
* @return    the desired character.
* @exception StringIndexOutOfRangeException
*              if the index is not in the range <code>0</code>
*              to <code>length()-1</code>.
* @see       java.lang.Character#charValue()
*/
public char charAt(int index) {
...
}
.fi
.ft 1
.RE
.SS "コマンド行引数ファイル"
.B javadoc
コマンドを短く簡潔にするために、ファイルの各行に 1 つの
ソースファイル名また
はパッケージ名が記述されたファイルを 1 つまたは複数
指定することができます。
.BR javadoc
を実行するとき、ファイルのリストを指定するときは、\f3@\f1 文字で
始まるファイル
名を渡します。
.B javadoc
は、\f3@\f1 文字で始まる引数に遭遇すると、そのファイルに
記述されたファイル
名がコマンド行に書かれていたかのように処理を行います。 
.LP
たとえば、packages というファイル内に、次のようにすべての
ソースファイル名
のリストを記述できます。 
.LP
.RS
.ft 3
.nf
com.my.package1
com.my.package2
com.my.package3
.fi
.ft 1
.RE
.LP
次のコマンドを使って、
.B javadoc 
を実行できます。 
.LP
.RS
.ft 3
.nf
example% javadoc \-d apidocs @packages
.fi
.ft 1
.RE
.SH "オプション"
.B javadoc
ツールは、ドックレットを使って出力を決定します。
.B javadoc
は、
.B \-doclet
オプションでカスタムドックレットが指定されている場合以外は、
デフォルトの標準ドック
レットを使います。
.B javadoc 
には、任意のドックレットとともに使用できるコマンド行
オプションがあります。これらのオプ
ションについては、後述の「javadoc のオプション」で説明します。
標準ドックレットでは、こ
のほかに、いくつかの追加のコマンド行オプションが提供されます。
これらのオプションに
ついては、後述の「標準ドックレットが提供するオプション」で
説明します。どのオプション
名も大文字と小文字を区別しません。ただし、オプションの引数では
大文字と小文字が区
別されることがあります。 
.LP
オプションを以下に示します。 
.LP
.sp 1n
.RS
.TS
lb lb lb.
\-1.1	\-header	\-package
\-author	\-help	\-private
\-bootclasspath	\-helpfile	\-protected
\-bottom	\-J	\-public
\-charset	\-link	\-serialwarn
\-classpath	\-linkoffline	\-sourcepath
\-d	\-locale	\-splitindex
\-docencoding	\-nodeprecated	\-stylesheetfile
\-doclet	\-nodeprecatedlist	\-title
\-docletpath	\-nohelp	\-use
\-doctitle	\-noindex	\-verbose
\-encoding	\-nonavbar	\-version
\-extdirs	\-notree	\-windowtitle
\-footer	\-overview
\-group
.TE
.RE
.SS "Javadoc のオプション"
.TP
.BI \-overview  " path/filename"
.B javadoc 
に対して、
.I path/filename 
で指定された「ソース」ファイルから
概要ドキュメント用のテキスト
を取得し、概要ページ (\f3overview-summary.html\f1) に配置することを
指示します。
.I path/filename 
は、
.BR \-sourcepath
への相対パスです。 
.LP
.RS 
.I filename 
と 
.IR path 
には、それぞれ任意の名前と場所を指定できますが、通常は、
.B overview.html
という名前を付けて、ソースツリー内の最上位の
パッケージディレクトリを含むディレクトリ
に配置します。この場所では、
.B \-sourcepath
がこのファイルを指すので、パッケージを
ドキュメント化する際に path が必要ありません。
たとえば、java.lang パッケージのソースツリーが 
.BR /src/classes/java/lang/
の場合、概要ファイルを
.BR /src/classes/overview.html
に配置できます。「使用例」を参照してください。 
.LP
.IR path/filename 
で指定するファイルについては、
「概要コメントファイル」を参照してください。 
.LP
概要ページが作成されるのは、
.B javadoc 
に 2 つ以上のパッケージ名を渡した場合だけです。
詳細は、「HTML フレーム」
節を参照してください。
.RE
.TP
.B \-public
public なクラスとメンバだけを表示します。 
.TP
.B \-protected
protected および public なクラスとメンバだけを表示します。
これはデフォルトの動作です。 
.TP
.B \-package
パッケージ、および protected と public な
クラスとメンバだけを表示します。 
.TP
.B \-private
すべてのクラスとメンバを表示します。 
.TP
.B \-help
オンラインヘルプを表示します。
.B javadoc 
とドックレットのコマンド行オプションの一覧が表示されます。 
.TP
.BI \-doclet  " class"
ドキュメンテーションの生成に使う
ドックレットを起動するためのクラスファイルを指定します。
ドックレットでは、出力の内容と形式を定義します。
.B \-doclet 
オプションが使われていない場合、
.B javadoc 
は標準ドックレットを使ってデフォルトの HTML 形式を生成します。
このクラスには、
start(Root) メソッドが含まれていなければなりません。
この起動クラスへのパスは、
.B \-docletpath
オプションによって定義されます。 
.TP
.BI \-docletpath  " classpathlist"
.B \-doclet
オプションで指定されているドックレットクラス
ファイルへのパスを指定します。
目的のドックレットが検索パス内にある場合は、
このオプションは不要です。 
.TP
.B \-1.1
.B javadoc
1.1 によって生成されるドキュメンテーションの
外観および機能を持つドキュメンテーション
を生成します。生成されるページの背景は灰色になり、
ヘッダにはイメージが使われ、
表ではなく丸印を使ったリストが使われます。また、
生成先ディレクトリは平坦な構造になり、
継承された API は含まれなくなり、
HTML フレームは使われず、内部クラスはサポート
されません。また、このオプションでは、
インデックスをアルファベットごとに自動的に分類
し、別々のファイルに格納します。このような
外観を持つ出力を得たい場合、このオプション
を使うと、
.B javadoc
1.1 に存在していたいくつかのバグを回避できる利点があります。 
.LP
.RS 
.B \-1.1
オプションとは同時に使用できないオプションがあります。
使用可能な他のオプションを
見つけるには、次のようにコマンド入力します。 
.LP
.sp 1n
.RS
.ft 3
.nf
example% javadoc \-1.1 \-help
.fi
.ft 1
.RE
.LP
このリスト内の 
.B \-footer
オプションの機能は、このページの別の場所で説明する 
.B \-bottom
オプションと同じです。
.B \-title
オプションの機能は、
.BR \-doctitle
オプションと同じです。 
.RE
.TP
.BI \-sourcepath  " sourcepathlist"
.B javadoc 
コマンドにパッケージ名を渡す際に、
ソースファイル (.java) 検索用のパスを指定します。
.B \-sourcepath
オプションは、
.B javadoc
コマンドを使ってパッケージ名を指定するときにだけ使用でき、
.B javadoc
コマンドに渡される 
.B .java
ファイルは検索できないことに注意してください。
.B .java
ファイルを検索するには、
そのディレクトリに移動するか、
各ファイルの前にそのパスを付けます (「1 つ以上
のパッケージのドキュメント化」を参照)。
.B \-sourcepath
が省略された場合は、
.B javadoc 
はクラスパスを使ってソースファイルを検索します (
.B \-classpath 
を参照)。 したがって、
.B \-sourcepath
のデフォルトは
.B \-classpath
の値です。
.B -classpath
を省略してパッケージ名を 
.BR javadoc 
に渡した場合、
.BR javadoc
は、ソースファイルの現在のディレクトリ (およびサブディレクトリ) を
検索します。
.LP
.RS
.I sourcepathlist 
では、ドキュメント化するパッケージ名の
ソースツリーのルートディレクトリを
設定します。たとえば、ソースファイルが次の
場所にある 
.B com.mypackage 
という名前のパッケージをドキュメント化するとします。 
.LP
.RS
.ft 3
.nf
/home/user/src/com/mypackage/*.java
.fi
.ft 1
.RE
.LP
この場合、次のようにしてソースパスを 
.BR /home/user/src
、つまり 
.BR com.mypackage
を含むディレクトリに指定し、それからパッケージ名 
.BR com.mypackage
を指定します。 
.LP
.RS
.ft 3
.nf
example% javadoc \-sourcepath /home/user/src/ com.mypackage
.fi
.ft 1
.RE
.LP 
これは、ソースパスの値とパッケージ名をつなげて、
ドットをスラッシュ (/) に変えると、以下のパッケージのフルパス
になることに注目すると覚えやすいでしょう。
.LP
.RS
.ft 3
.BR /home/user/src/com/mypackage
.RE
.RE
.TP
.BI \-classpath  " classpathlist"
.B javadoc
が参照されるクラスの検索を行うパスを指定します。
参照されるクラス (\f3.class\f1) とは、
ドキュメント化されるクラスとそれらのクラスによって
参照される任意のクラスのことです。
.B javadoc
は、指定されたパス以下のすべてのサブディレクトリで
検索を行います。クラスパスリストに
は、パス間をコロンで区切って複数のパスを
含めることができます。
.IR classpathlist 
の指定
については、クラスパスのドキュメントを参照してください。 
.LP
.RS
.B \-sourcepath
を省略した場合は、
.B javadoc 
は、クラスファイル (下位互換用) とともに、
.B \-classpath
を使ってソースファイルを検索します。このため、
異なるパス内のソースファイルおよびクラスファイルを検索する場合は、
.B \-sourcepath
と
.BR \-classpath
の両方を使います。 
.LP
たとえば、
.BR com.mypackage 
をドキュメント化したい場合に、パッケージのクラスがディレクトリ
.BR /home/user/src/com/mypackage
にあり、このパッケージが 
.BR /home/user/lib
内のライブラリを使う場合は、次のように指定します。 
.LP
.RS
.ft 3
.nf
example% javadoc \-classpath /home/user/lib \-sourcepath \\
               /home/user/src com.mypackage
.fi
.ft 1
.RE
.LP
ほかのツールと同様に、
.BR \-classpath 
を指定しない場合は、CLASSPATH 環境変数が
設定されていれば、
.B javadoc 
はこの環境変数を使います。
どちらも設定されていない場合
は、
.B javadoc 
は現在のディレクトリでクラスを検索します。 
.LP
.B javadoc 
が拡張機能クラスおよびブートストラップクラスと通信する際に、
.B -classpath 
を使ってユーザクラスを検索する方法についての
詳細は、「クラスの検索方法」を
参照してください。 
.RE
.TP
.BI \-bootclasspath  " classpathlist"
ブートクラスが存在するパスを指定します。
ブートクラスとは、Java コアクラスのことです。
.B bootclasspath 
は、
.B javadoc
がソースファイルとクラスファイルを探すときに
使う検索パスの一部です。詳細は、
「Javac と Javadoc がクラスを検索する方法」 を
参照してください。
.I classpathlist 
内の複数の
クラスパスリストは、コロン (:) で区切ります。 
.TP
.BI \-extdirs  " dirlist"
拡張機能クラスが存在するディレクトリを指定します。
拡張機能クラスは、Java 拡張機能
機構を使うすべてのクラスです。拡張機能ディレクトリ (
.B extdirs
) は、
.B javadoc
がソースファイルとクラスファイルを探すときに使う検索パスの一部です。

詳細は、上の 
.B \-classpath
を参照してください。
.I dirlist 
内の複数のディレクトリは、
コロン (:) で区切ります。 
.TP
.B \-verbose
.B javadoc
の実行中に詳細なメッセージを表示します。冗長オプションを
指定しない場合は、ソースファイルのロード時、ドキュメンテーションの
生成時 (ソースファイルごとに 1 つのメッセージ)、およびソート時に
メッセージが表示されます。冗長オプションを指定した場合は、
各 java ソースファイルの解析に要したミリ秒数などの
追加メッセージを表示します。 
.TP
.BI \-locale  " language_country_variant"
.B javadoc 
がドキュメンテーションを生成するときに使うロケールを指定します。
引数には、java.util.Locale のドキュメンテーションで説明されている
ロケールを指定します。
たとえば、en_US (英語、米国)、en_US_WIN (Windows で使われる英語) などを
指定します。 
.LP
.RS 
ロケールを指定すると、
.B javadoc 
は指定されたロケールのリソースファイルを選択して
メッセージ (ナビゲーションバー、リストと表の見出し、
ヘルプファイルの目次、
.BR stylesheet.css 
のコメントなどの文字列) に
使います。また、アルファベット順にソートされるリストのソート順、
および最初の文の末尾を決定する文の区切り文字も、
指定したロケールによって決まります。このオプションは、
ドキュメント化されるクラスのソースファイル内で
指定されている doc コメントテキストの
ロケールを決定するものではありません。 
.RE
.TP
.BI \-encoding  " name"
ソースファイルのエンコーディング名 (EUCJIS/SJIS など) を指定します。
このオプションが指定されていない場合は、プラットフォームの
デフォルトコンバータが使われます。 
.TP
.BI \-J flag
.BR javadoc
を実行する実行システム java に flag を直接渡します。J と flag の間に
空白を入れることはできません。たとえば、生成される
ドキュメンテーションを処理するために、システムで 32M バイトを
確保する必要がある場合は、次のようにします。 
.LP
.RS 
.ft 3
.nf
example% javadoc \-J\-Xmx32m \-J\-Xms32m com.mypackage
.fi
.ft 1
.RE
.SS "標準ドックレットが提供するオプション"
.TP
.BI \-d  " directory"
生成された HTML ファイルを保存するディレクトリを
指定します (d は「生成先 (destination)」の意味)。このオプションを
省略すると、生成されたファイルは現在のディレクトリに保存されます。
値 
.I directory 
には、絶対ディレクトリまたは現在の作業
ディレクトリからの相対ディレクトリを指定できます。たとえば、
次の例は、com.mypackage パッケージのドキュメンテーションを生成し、
結果を 
.B /home/user/doc/ 
ディレクトリに保存します。 
.LP
.RS 
.ft 3
.nf
example% javadoc \-d /home/user/doc com.mypackage
.fi
.ft 1
.RE
.TP
.B \-use
ドキュメント化されるクラスとパッケージごとに 1 つの [使用] ページを
含めます。このページには、ドキュメント化されるクラスまたは
パッケージの API を使っているパッケージ、クラス、メソッド、
コンストラクタ、およびフィールドが記述されます。たとえば、クラス 
C およびクラス C を使うものは、C のサブクラス、C として
宣言されているフィールド、C を返すメソッド、および、型 C の
パラメータを持つメソッドとコンストラクタがページに含ま
れます。 
.LP
.RS 
たとえば、String について、[使用] ページに何が表示されるかを
見てみましょう。
.B java.awt.Font 
クラスの 
.B getName() 
メソッドは、String 型を返します。
このため、
.B getName() 
は String を使うので、[使用] ページの String で
このメソッドを見つけることができます。 
.LP
このページでは API の使用だけがドキュメント化され、実装はドキュメント化されません。
あるメソッドが実装内に String を使っているが、引数として
文字列をとったり、文字列を返したりしない
場合は、String の「使用」とはみなされません。 
.LP
生成された [使用] ページにアクセスするには、目的のクラスまたは
パッケージを表示して、ナビゲーションバーの [使用] リンクを
クリックします。 
.RE
.TP
.B \-version
生成されるドキュメントに 
.B @version
テキストを含めます。このテキストは、デフォルトでは省略されます。 
.TP
.B \-author
生成されるドキュメントに 
.B @author
テキストを含めます。 
.TP
.B \-splitindex
インデックスファイルをアルファベットごとに複数のファイルに分割し、
文字ごとに 1 つのファイルと、アルファベット以外の文字で始まる
インデックスエントリ用のファイルを 1 つ作成します。
.TP
.BI \-windowtitle  " title"
HTML の
.B <title>
タグで使うタイトルを指定します。指定したタイトルは、
ウィンドウタイトルと、該当するページに対して作成されたブラウザの
ブックマーク (よくアクセスする場所) に表示されます。
タイトルには HTML タグを含めないでください。タイトルに HTML タグが
含まれていると、ブラウザによるタグの解釈が不適切になる
可能性があります。
.I title 
の中で引用符を使う場合は、引用符を
エスケープする必要があります。
.B -windowtitle 
が省略されている場合、
.B javadoc 
はこのオプションの代わりに -doctitle の値を使います。 
.TP
.BI \-doctitle  " title"
概要ファイルの最上部近くに配置するタイトルを指定します。
タイトルは中央揃えされ、レベル 1 の見出しとして上部
ナビゲーションバーのすぐ下に置かれます。
.I title 
には、HTML タグと
空白を含めることができますが、これらを含める場合は全体を引用符で囲
まなければなりません。
.I title 
の中で引用符を使う場合は、引用符をエスケープする必要があります。 
.TP
.BI \-title  " title"
このオプションは、現在は存在しません。
.B javadoc 
1.2 のベータ版にだけ存在しました。このオプションは、
ウィンドウタイトルではなくドキュメントタイトルを定義することを
明確にするため、
.BR \-doctitle
に名前が変更されました。 
.TP
.BI \-header  " header"
各出力ファイルの上部に配置するヘッダテキストを指定します。ヘッダは、
上部ナビゲーションバーの右側に配置されます。
.I header 
には、HTML タグと
空白を含めることができますが、これらを含める場合は全体を引用符で
囲まなければなりません。header の中で引用符を使う場合は、引用符を
エスケープする必要があります。 
.TP
.BI \-footer  " footer"
各出力ファイルの下部に配置するフッタテキストを指定します。フッタは、
下部ナビゲーションバーの右側に配置されます。
.I footer 
には、HTML タグと
空白を含めることができますが、これらを含める場合は全体を引用符で
囲まなければなりません。
.I footer 
の中で引用符を使う場合は、引用符をエスケープする必要があります。 
.TP
.BI \-bottom  " text"
各出力ファイルの最下部に配置するテキストを指定します。
このテキストは、下部ナビゲーションバーの下のページの最下部に
配置されます。
.I text 
には、HTML タグと空白を含めることができますが、
これらを含める場合は全体を引用符で囲まなければなりません。
.I text 
の中で引用符を使う場合は、引用符をエスケープする必要があります。 
.TP
.BI \-link  " docURL"
\f3javadoc\f1 により生成された既存の外部参照クラスの
ドキュメンテーションへのリンクを作成します。引数 
.I docURL 
は、リンクを設定する、\f3javadoc\f1 で生成した外部ドキュメントの URLです。
この場所は、相対 URL または絶対 URL で指定できます。 
.LP
.RS 
言い換えると、このオプションを使うと、コードによって
参照されていても、現在の 
.B javadoc
の実行ではドキュメント化されないクラスにリンクできるようになります。
リンクが有効なページを参照するようにするには、それらの HTML ページ
がどこにあるかを調べ、その場所を 
.I docURL 
に指定する必要があります。
このオプションを使うと、たとえば Sun 以外のドキュメンテーション
から 
.BR http://java.sun.com 
の 
.B java.* 
にリンクすることができます。また、一連のパッケージに対して 
.B javadoc
を実行したあと、別の一連のパッケージに対して 
.B javadoc
を実行することで、両方のパッケージの間にクロスリンクを
作成することもできます。さらに、
一連のパッケージに対して 
.B javadoc
を実行したあと、これらのパッケージのサブセットに対してもう一度 
.B javadoc
を実行することで、一連のパッケージ全体のリンクを維持すること
もできます。3 回目の使用は、ドキュメントの更新用の「ハッキング」
としての使用です。つまり、パッケージのセット全体に
.B javadoc
を実行してから、更新されたファイルをオリジナルのセットに
挿入できるように、変更したパッケージの一部のセットだけに 
.B javadoc
を実行します。この方法は時間を節約するために使われますが、
扱いが難しいことがあります。サブセットに対して API の追加または
削除を行なった場合は、インデックス内のリンクが失われたり、
壊れたりします。 
.LP
.B \-link
オプションの使用法は、次のとおりです。 
.LP
.TP 2
\(bu
現在実行中の
.B javadoc 
によって生成されるドキュメンテーション内の API だけを対象に
リンクを作成する場合は、
.B \-link
オプションを省略します。ただし、
.B \-link
オプションがない場合、
.B javadoc 
はドキュメントが存在するかどうか、また存在する場所を
判別できないため、ドキュメントに外部参照のためのリンクを作成しません。 
.LP
.TP 2
\(bu
外部参照クラスを対象に、
.I docURL 
で指定された場所にある
ドキュメンテーションへのリンクも作成する場合は、
.B \-link
オプションを指定します。 
.LP
URL が World Wide Web 上にある場合、
.B javadoc
がパッケージリストにアクセスするには、ドキュメンテーションの
生成時に Web 接続が可能な状態になっていなければなりません。Web 接続
が不可能な場合は、代わりに 
.B \-linkoffline
を使用できます。 
.LP
.B パッケージリスト: 
.B \-link
オプションでは、javadoc によって生成された 
.BR package-list 
という名前のファイルが、このオプションで指定する URL に存在している
必要があります。
.BR package-list
ファイルは、その場所でドキュメント化されているパッケージの
名前のリストを含む単純なテキストファイルです。
.BR javadoc
がどのようにパッケージリストを使用するかについては、
以下で説明します。 
.LP
たとえば、Java プラットフォーム 1.2 API のパッケージリストは以下にあり、
.LP
.RS
http://java.sun.com/products/jdk/1.2/docs/\\
               api/package-list
.RE
.LP
次のようになっています。
.LP
.RS
.ft 3
.nf
java.applet
java.awt
java.awt.color
java.awt.datatransfer
java.awt.dnd
java.awt.event
java.awt.font
など
.fi
.ft 1
.RE
.LP
.B \-link 
オプションを指定せずに 
.B javadoc 
を実行した場合、ドキュメンテーションの生成時に外部参照
クラスに属する名前を
見つけると、
.B javadoc
はその名前をリンクを持たない形で出力します。一方、
.B \-link
オプションが指定されている場合、
.B javadoc
は、指定された docURL の場所にある 
.B package-list
ファイルから、該当する名前のパッケージを探します。パッケージ名が
見つかった場合は、その URL を名前の前に付けます。指定された URL が
相対 URL で、
.B \-d
オプションの生成先ディレクトリが相対パスである場合、
.B javadoc
は URL に生成先ディレクトリの相対パスを付加し、生成先ディレクトリを
起点としてリンクが動作するようにします。 
.LP
すべてのリンクが正しく機能するためには、外部参照の
ドキュメンテーションのすべてが、指定された URL に
存在していなければなりません。
.B javadoc 
は、
.B package-list
が存在するかどうかを調べるだけで、指定された URL に
目的のページが存在するかどうかはチェックしません。 
.LP
.B javadoc 
に与えられた引数がパッケージではなくソースファイルである場合は、
.B package-list
ファイルは作成されますが、ファイルの内容は空になります。 
.LP
たとえば、次のコマンドにより、
.B javadoc 
は、指定された URL で
.B package-list
ファイルを検索し、そのファイル内のパッケージ名を読み込んでから、
これらの外部パッケージ内の API へのリンクを追加する際に、
この指定された URL を使います。 
.LP
.RS
.ft 3
.nf
example% javadoc \-link \\
   http://java.sun.com/products/jdk/1.2/docs/api com.mypackage
.fi
.ft 1
.RE
.LP
.B 複数のリンク: 
複数の 
.B \-link 
オプションを提供して、外部で生成されたドキュメントに任意数のリンクを設定できます。
既知のバグ \(emJavadoc 1.2 には、複数の 
.B -link
コマンドを提供できないというバグがあります。このバグは、
将来のリリースでは修正される予定です。 
.LP
リンクする外部ドキュメントごとに別のリンクオプションを指定します。 
.LP
.RS
.ft 3
.nf
example% javadoc \-link docURL1 \-link docURL2 ... \\
   \-link docURLn com.mypackage
.fi
.ft 1
.RE
.LP
.BR docURL1、
.BR docURL2、... 
.BR docURLn 
は、それぞれ外部ドキュメントの
ルートを指し、各ルートには、
.BR package-list
という名前のファイルが含まれています。 
.LP
まだ生成されていない 2 つ以上のドキュメントを
クロスリンクする場合は、「ブートストラッピング」が必要になることに
注意してください。言い換えると、どのドキュメントの 
.B package-list 
も存在していない場合、最初のドキュメントに対して 
.B javadoc
を実行した時点では、2 番目のドキュメントの
.B package-list
はまだ存在していません。したがって、外部リンクを作成するには、
2 番目のドキュメントを
生成したあと、最初のドキュメントを生成し直す必要があります。 
.LP
この場合、最初に行うドキュメント生成の目的は、
.B package-list
を作成することです。パッケージ名をすべて把握している場合は、
.B package-list
を手動で作成することもできます。次に、2 番目のドキュメントと
その外部リンクを生成します。
.B javadoc
は、必要な外部の
.B package-list
ファイルが存在しない場合は、警告を表示します。 
.LP
.B ドキュメントの更新: 
.B \-link
オプションの 3 回目の使用は、プロジェクトで多数のパッケージを使い、
すでにツリー全体に対して
.B javadoc 
を実行してある場合に、次の実行では、すばやく細かい
変更を行なってから、ソース
ツリーの一部に対してだけ
.B javadoc
を実行し直したい場合に便利です。これは、
変更がドキュメンテーションコメントに対し
てであり、シグニチャーに対してではない場合にだけ正常に
処理されるので、ハッキング
のようなものです。ソースコードに対してシグニチャーを追加、
削除または変更した場合は、インデックス、パッケージツリー、
継承されるメンバのリスト、[使用] ページなどの場所
で壊れたリンクが表示されます。 
.LP
まず、この部分的な新規実行用の実行先ディレクトリを作成し、
.B \-link 
および
.B \-d 
に同じ相対パスを設定します。オリジナルのドキュメントが 
.BR html 
という名前のディレクトリにある場合は、次のようになります。 
.LP
.RS
.ft 3
.nf
example% javadoc \-d update \-linkoffline . html com.mypackage
.fi
.ft 1
.RE
.LP
.B javadoc
の実行が終了したら、update 内に生成されたファイルで、html 内の
元のファイルを上書きします。 
.LP
.B 内容説明: 
一般に、
.B javadoc
を実行すると、シグニチャー、
.B @see
タグ、{\f3@link\f1} タグ、要約、階層、概要、およびインデックスなど、
生成されるページ全体を通じて表示される名前のリンクが潜在的には
生成されています。これらのリンクの
一部は現在の実行で生成されるページに置かれますが、
別のリンクは現在の実行では
生成されないページに潜在的には置かれています。 
.RE
.TP
.BI \-linkoffline  " docURL  packagelistURL"
このオプションは、外部参照クラスの名前を対象として、
ドキュメンテーションへのリンクを作成します。 
.LP
.RS 
.TP 2
\(bu
.I docURL 
は、\f3javadoc\f1 によって生成された、
リンク先の外部ドキュメンテーションの
ルートの場所の URL です。この場所には、相対 URL 
または絶対 URL を指定できます。
.TP 2
\(bu
.I packagelistURL は、リンク先の外部ドキュメンテーションの
.B package-list 
ファイルを含むディレクトリの URL です。このファイルは、
必要に応じて手動で作成する
こともできます。 
.LP
.B javadoc
の実行時に複数の
.B \-linkoffline
オプションを指定できます。(
.B javadoc
1.2.2 より前のバージョンでは、1 つしか指定できませんでした。)
.LP
このオプションは、
.BR \-link 
オプションの変種です。
.B \-linkoffline
オプションは、
.BR javadoc
の実行時に、
.I docURL 
で指定された場所に
.B package-list
ファイルが存在しない場合に使用できます。生成される
ドキュメントのリンク先のパッケー
ジ名と、該当するドキュメントが存在する場所がわかっている場合は、
このオプションを
使うと、該当する場所に 
.B package-list
ファイルがまだ実際には存在していなくても、
外部リンクを持つドキュメンテーションを
生成できます。このオプションを使えば、
.B package-list
のコピーを独自に用意することで、適切な
リンクを持ったドキュメンテーションを生成で
きます。 
.LP
この方法は、パッケージ名はわかっているもののまだ
公開されていない、新しい外部
ドキュメンテーションをリンク先に持つ
ドキュメンテーションを生成する必要がある場合に
便利です。この方法を使えば、2 つの
企業がそれぞれのドキュメンテーションを同時に
リリースできます。また、
.B package-list 
が存在しない外部ドキュメンテーション (
.B javadoc
1.0、1.1、および 1.2 Beta3 までで
作成されたドキュメンテーションなど) にリンクしたドキュ
メンテーションを生成することもできます。 
.LP
このオプションを指定する場合は、javadoc を
実行する時点で、ドキュメンテーションの U
RL にアクセスできるようになっている必要はありません。
したがって、URL が World 
Wide Web 上にある場合は、Web 接続を行わなくても
ドキュメンテーションを生成できます。
.LP
次に示すように、このオプションを使うには、
.B javadoc
によって生成された、外部参照クラス
のドキュメンテーションの場所を示す 
.BR docURL1 
と、このドキュメンテーションの 
.B package-list
ファイルの場所を示す 
.BR packagelistURL1
を指定します。両者が同じ場所にある場合は、
.B \-linkoffline 
ではなく、
.B \-link
を使用できます。
.B \-linkoffline 
は、参照先の生成されたドキュメントごとに指定します。
(わかりやすくするため、2 行で示します)
.LP
.RS
.ft 3
.nf
.ta 18n
example% javadoc	\-linkoffline docURL1 packagelistURL1 \\
	\-linkoffline docURL2 packagelistURL2 \\
.ft 1
	...
.fi
.RE
.LP
たとえば、次のコマンドは、第 1 引数として渡された URL を
使ってリンクを追加し、
第 2 引数で渡された 
.B package-list
ファイルを検索します。 
.LP
.RS
.ft 3
.nf
example% javadoc \-linkoffline \\
      http://java.sun.com/products/jdk/1.2/docs/api \\
            /jdk/1.2/docs/api/
.fi
.ft 1
.RE
.RE
.TP
.BI \-group  " groupheading  packagepattern:packagepattern:..."
概要ページの複数のパッケージを指定のグループに分け、
グループ単位で表を作成
します。各グループは、それぞれ別の
.B \-group
オプションで指定します。これらのグループは、
コマンド行で指定した順序でページに
表示されます。パッケージは、1 つのグループ内では
アルファベット順に並べられます。各 
.B \-group
オプションでは、
.I packagepattern 
式のリストに一致する
パッケージが、見出し 
.IR groupheading 
を持つ 1 つの表にまとめて表示されます。 
.RS 
.TP 2
\(bu
.I groupheading 
には任意のテキストを指定でき、空白を含めることができます。
指定したテキストは、グループの表見出しになります。 
.TP 2
\(bu
.I packagepattern 
には、任意のパッケージ名、または任意のパッケージ名の先頭部分
とそれに続く 1 つのアスタリスク (*)を指定できます。
アスタリスクは、「任意の文字に
一致する」という意味のワイルドカードです。ワイルドカードとして
許容されるのは、アスタリスクだけです。1 つのグループには、
コロン (:) で区切った複数のパターンを含めることができます。 
.LP
注: パターンやパターンリスト内でアスタリスクを
使う場合は、"java.lang*:java.util" 
のように、パターンリストを引用符で囲む必要があります。 
.LP
.B \-group 
オプションが 1 つも指定されていない場合は、すべての
パッケージが、[パッケージ] 
という見出しを持つ 1 つのグループに入れられます。
ドキュメント化されるパッケージの
中に、指定したグループのどのグループにも入らない
パッケージがある場合、このような
パッケージは [その他のパッケージ] という見出しを
持つ独立したグループに入れられます。 
.LP
たとえば、次のようにオプションを指定すると、
ドキュメント化される 4 つのパッケージは、
コアパッケージ、拡張機能パッケージ、
およびその他のパッケージに分かれます。
\f3java.lang*\f1 では、後続のドットがないことに
注意してください。\f3java.lang.*\f1 のようにドットを
入れると、
.B java.lang 
パッケージは含まれないことになります。 
.LP
.RS
.ft 3
.nf
example% javadoc \-group "Core Packages" "java.lang*:java.util" \\
    \-group "Extension Packages" "javax.*" \\
    java.lang java.lang.reflect java.util javax.servlet java.new
.fi
.ft 1
.RE
.LP
この結果、次のようなグループ化が行われます。 
.LP
.RS
.ft 3
.nf
Core Packages
  java.lang
  java.lang.reflect
  java.util
Extension Packages
  javax.servlet
Other Packages
  java.new
.fi
.ft 1
.RE
.RE
.TP
.B \-nodeprecated
推奨されない API をドキュメンテーションに生成することを禁止します。
これは、
.B \-nodeprecatedlist
オプションを指定した場合の動作に加えて、
ドキュメンテーションのほかの部分を通じて、
推奨されない API を生成しないことと同じです。
このオプションは、コードを記述していて、
推奨されないコードを無視したい場合に便利です。 
.TP
.B \-nodeprecatedlist
推奨されない API のリストを含む
ファイル (\f3deprecated-list.html\f1) の生成を禁止
します。また、このページへのリンクを
ナビゲーションバーに生成することを禁止します。
ただし、ドキュメントのほかの部分では、
推奨されない API の生成を続行します。この
オプションは、推奨されない API がソースコードに
含まれておらず、ナビゲーションバーを
すっきりと見せたい場合に便利です。 
.TP
.B \-notree
生成されるドキュメントからクラスおよびインタフェース
階層を省略します。
デフォルトでは、階層が作成されます。 
.TP
.B \-noindex
生成されるドキュメントからインデックスを省略します。
デフォルトでは、
インデックスが作成されます。 
.TP
.B \-nohelp
各出力ページの最上部と最下部の
ナビゲーションバーから [ヘルプ] リンクを
省略します。 
.TP
.B \-nonavbar
生成されるページの最上部と最下部に表示される
ナビゲーションバー、ヘッダ、
およびフッタの生成を禁止します。
このオプションは、bottom オプションには影響しません。
.B \-nonavbar
オプションは、印刷するためだけに
ファイルを PostScript または PDF に変換する
場合など、内容だけが重要でナビゲーションの
必要性がない場合に便利です。 
.TP
.BI \-helpfile  " path/filename"
上部と下部のナビゲーションバーの [ヘルプ] リンクの
リンク先となる代替ヘルプファイル
.I path/filename 
のパスを指定します。このオプションが指定されていない場合、
.B javadoc
は、javadoc にハードコードされているヘルプファイル 
.B help-doc.html
を自動的に作成します。このオプションを使えば、
デフォルトの設定をオーバーライドでき
ます。ファイル名にはどのような
名前も指定でき、\f3help-doc.html\f1 には限定されま
せん。
.B javadoc
は、それに従って、ナビゲーションバーにある
リンクに調整を加えます。
次に例を示します。 
.LP
.RS 
.RS
.ft 3
.nf
example% javadoc \-helpfile /home/doc/myhelp.html java.awt
.fi
.RE
.RE
.ft 1
.TP
.BI \-stylesheetfile  " path/filename"
代替 HTML スタイルシートファイルのパスを指定します。
このオプションが指定されてい
ない場合、
.B javadoc
は、内部的にハードコードされている
スタイルシートファイル 
.BR stylesheet.css 
を自動的に作成します。このオプションを使えば、
デフォルトの設定をオーバーライドできます。
filename にはどんなファイル名でも指定でき、
.BR stylesheet.css 
には限定されません。
次に例を示します。 
.LP
.RS
.RS
.ft 3
.nf
example% javadoc \-stylesheetfile \\
            /home/doc/mystylesheet.css java.awt
.fi
.ft 1
.RE
.RE
.TP
.B \-serialwarn
.B @serial
タグがない場合、コンパイル時に警告を生成します。デフォルトでは、
.B javadoc
1.2.2 (およびそれ以降) は 
.B @serial 
の警告を生成しません。
(これは、以前のバージョンとは逆です。) 
.B @serial 
の警告を生成するには、
このオプションを使用してください。このオプションは、デフォルトの
直列化可能なフィールドと writeExternal メソッドを正しく
ドキュメント化するのに役立ちます。
.TP
.BI \-charset  " name"
このドキュメント用の HTML 文字セットを指定します。
たとえば次の指定は、
.LP
.RS
.RS
.ft 3
% javadoc \-charset "iso-8859-1" mypackage
.ft 1
.RE
.LP
次の行を、生成される各ページの先頭に挿入します。
.RE
.LP
.RS
.ft 3
<META http-equiv="Content-Type" content="text/html; charset=iso-885 9-1">
.ft 1
.LP
この META タグについては、HTML 標準 (4197265 と 4137321) で
説明されています。
.RE
.TP
.BI \-docencoding  " name"
出力される HTML ファイルのエンコーディングを指定します。 
.SH "例"
.B javadoc 
は、パッケージ全体に対して実行することも、
個々のクラスに対して実行することも
できます。各パッケージ名は、それぞれの
パッケージ名に対応するディレクトリ名を
持ちます。次の例では、ソースファイルは 
.BR /home/src/java/awt/*java
にあります。生成先ディレクトリは 
.BR /home/html
です。 
.SS "1 つ以上のパッケージのドキュメント化"
パッケージをドキュメント化するには、その
パッケージのソースファイル (*\f3.java\f1) 
が、パッケージと同じ名前を持つディレクトリ
内に存在していなければなりません。
パッケージ名が、(ドットで区切られた) いくつかの
識別子から構成されている場合は、
各識別子がそれぞれ別のディレクトリを表わします。
したがって、すべての java.awt クラス
は、
.BR java/awt/ 
という名前のディレクトリに存在していなければなりません。
.B javadoc
は、次の 2 つのどちらかの方法で実行できます。
1 つは、(cd によって) ディレクトリを
変更する方法、もう 1 つは 
.B \-sourcepath
オプションを使う方法です。パッケージの
グループを指定する場合は、ワイルドカードは
使用できません。 
.TP 2
\(bu
.B ケース 1 ソースディレクトリへの移動: 
完全修飾パッケージの親ディレクトリに移動します。次に、ドキュメント化
する 1 つ以上のパッケージ名を指定して 
.BR javadoc 
を実行します。 
.LP
.RS 
.ft 3
.nf
example% cd /home/src/
example% javadoc \-d /home/html java.awt java.awt.event
.fi
.ft 1
.RE
.TP 2
\(bu
.B ケース 2 すべてのディレクトリから: 
このケースでは、現在のディレクトリがどのディレクトリでも問題はありません。
完全修飾パッケージの親ディレクトリを 
.B \-sourcepath 
に指定し、ドキュメント化する 1 つ以上のパッケージの名前を指定して 
.B javadoc 
を実行します。 
.RS 
.ft 3
.nf
example% javadoc \-d /home/html \-sourcepath /home/src \\
           java.awt java.awt.event
.fi
.ft 1
.RE
.LP
どちらのケースでも、パッケージ 
.B java.awt 
と 
.B java.awt.event 
の public および protected 
なクラスとインタフェースを対象に、HTML 形式の
ドキュメンテーションが生成され、指定
された生成先ディレクトリ (\f3/home/html\f1) に HTML ファイルが
保存されます。2 つ
以上のパッケージが生成されるので、ドキュメントは、
パッケージのリスト、クラスのリスト、
およびメインページの 3 つのフレームを持つことになります。 
.SS "1 つ以上のクラスのドキュメント化"
.B javadoc 
を実行する 2 番目の方法は、1 つ以上のソースファイル (
.B .java
) を渡すことです。
.B javadoc 
は、次の 2 つのどちらかの方法で実行できます。
1 つは、(cd によって) ディレクトリを
変更する方法、もう 1 つは 
.B .java 
ファイルへのパスを完全指定する方法です。
相対パスは、現在のディレクトリからの相対パスです。
ソースファイルを渡した場合、
.B \-sourcepath 
オプションは無視されます。
アスタリスク (*) の
ようなコマンド行ワイルドカードを使用すると、
クラスのグループを指定できます。 
.TP 2
\(bu
.B ケース 1 ソースディレクトリへの移動: 
.B .java 
ファイルのあるディレクトリに移動します。
次に、ドキュメント化する 1 つ以上の
ソースファイルの名前を指定して 
.BR javadoc 
を実行します。 
.LP
.RS 
.ft 3
.nf
example% cd /home/src/java/awt
example% javadoc \-d /home/html Button.java Canvas.java \\
               Graphics*.java
.fi
.ft 1
.RE
.LP
.RS 2
この例では、クラス Button と Canvas、
および先頭が Graphics で始まるクラスの 
HTML 形式のドキュメンテーションが生成されます。
.BR javadoc
の引数として渡されているのは、
パッケージ名ではなくソースファイルなので、
ドキュメントは、クラスのリストと
メインページの 2 つのフレームを持つことになります。 
.RE
.TP 2
\(bu
.B ケース 2 パッケージのルートディレクトリへの移動: 
これは、同じルート内にある複数のサブパッケージのソースファイルを個々に
ドキュメント化する場合に便利です。パッケージの
ルートディレクトリに移動し、各ソースファイルを
ルートからのパスで指定します。 
.LP
.RS 
.ft 3
.nf
example% cd /home/src/
example% javadoc \-d /home/html java/awt/Button.java \\
                 java/applet/Applet.java
.fi
.ft 1
.RE
.LP
.RS 2
この例では、Button クラスおよび Applet クラス
用の HTML 形式のドキュメンテーション
が生成されます。 
.RE
.TP 2
\(bu
.B ケース 3 すべてのディレクトリから: 
このケースでは、現在のディレクトリがどの
ディレクトリでも問題はありません。
ドキュメント化する 
.B .java 
ファイルへの絶対パスまたは
相対パスを指定して 
.BR javadoc
を実行します。 
.LP
.RS 
.ft 3
.nf
example% javadoc \-d /home/html /home/src/java/awt/Button.java \\
               /home/src/java/awt/Graphics*.java
.fi
.ft 1
.RE
.LP
.RS 2
この例では、クラス 
.B Button 
および先頭が 
.BR Graphics 
で始まるクラスの HTML 形式
のドキュメンテーションが生成されます。 
.RE
.SS "パッケージとクラスのドキュメント化"
パッケージ全体と個々のクラスを同時にドキュメント
化できます。次に示すのは、上に示
した 2 つの例を組み合わせた例です。
.B \-sourcepath
は、パッケージへのパスに対しては使用できますが、
個々のクラスのパスに対しては使用
できません。 
.LP
.RS
.ft 3
.nf
example% javadoc \-d /home/html \-sourcepath /home/src java.awt \\
               /home/src/java/applet/Applet.java
.fi
.ft 1
.RE
.LP
この例では、パッケージ 
.B java.awt 
とクラス 
.B Applet 
の HTML 形式のドキュメンテーションが
生成されます。
.B javadoc
は、Applet のパッケージ名を、
.B Applet.java
ソースファイル内のパッケージの宣言 (宣言がある場合) から決定します。 
.SS  "使用例"
.B javadoc
には、多くの便利なオプションがあり、
その中のいくつかは、ほかのオプションよりもよく
使われます。以下は、makefile 変数を使って Java プラット
フォーム API 上で
.B javadoc
を実行するために使う効果的なコマンドです。ただし、
ドキュメント化されるパッケージの
すべてがリストされているわけではありません。 
.LP
.RS
.ft 3
.nf
.if n .ta 52n
.if t .ta 27
example% javadoc \-sourcepath /jdk/src/share/classes	/* Path for
.if t .ta 29
	source files  */
.if n .ta 28n
.if t .ta 20
\-d /jdk/build/api	/* Destination directory */
\-use	/* Adds "Use" files      */
\-splitIndex	/* Splits index A-Z      */
\-windowtitle $(WINDOWTITLE)	/* Adds a window title   */
\-doctitle $(DOCTITLE)	/* Adds a doc title      */
\-header $(HEADER)	/* Adds running header text       */
\-bottom $(BOTTOM)	/* Adds text at bottom            */
\-group $(GROUPCORE)	/* Core heading for overview page */
\-group $(GROUPEXT)	/* Ext heading for overview page  */
.if n .ta 37
\-overview $ (SCRDIR) /overview.html	/* For overview text     */
\-J\-Xmx180m	/* For 180MB memory      */
java.lang java.lang.reflect	/* Packages to document  */
java.util java.io java.net	java.applet

WINDOWTITLE = 'Java Platform 1.2 Final API Specification'
DOCTITLE = 'Java<sup><font size="-2">TM</font></sup> Platform 1.2 \\
                 Final API Specification'
HEADER = '<b>Java Platform 1.2</b><br><font size="-1">Final</font>'
.if t .ig IG
BOTTOM = '<font size="-1"><a href="http://java.sun.com/cgi-bin/\\
              bugreport.cgi">Submit a bug or feature</a><br><br>Java \\
              is a trademark or registered trademark of Sun \\
              Microsystems, Inc. in the US and other countries.<br>\\
              Copyright 1993-2001 Sun Microsystems, Inc. 901 San \\
              Antonio Road,<br>Palo Alto, California, 94303, U.S.A.\\
              </font>'
.IG
.if n .ig IG
BOTTOM = '<font size="-1"><a href="http://java.sun.com/cgi-bin/bugreport.cgi">\\
              Submit a bug or feature</a><br><br>Java is a trademark or registered \\
              trademark of Sun Microsystems, Inc. in the US and other countries.<br> \\
              Copyright 1993-2001 Sun Microsystems, Inc. 901 San Antonio Road,<br>\\
              Palo Alto, California, 94303, U.S.A.</font>'
.IG
GROUPCORE = '"Core Packages" "java.*:com.sun.java.*:org.omg.*"
GROUPEXT  = '"Extension Packages" "javax.*"'
SRCDIR = '/java/jdk/1.2/src/share/classes'
.fi
.ft 1
.LP
.B \-windowtitle
オプションを省略した場合は、
.B javadoc
は、ウィンドウタイトルにドキュメントタイトルをコピーします。
ドキュメントタイトルに HTML タグが含まれていない場合は、
.B \-windowtitle 
オプションは必要ありません (このタグはそのままのテキストとして
ウィンドウのタイ
トルに表示されます)。
.LP
この例のように 
.B \-footer 
オプションを省略した場合は、
.B javadoc 
は、ヘッダテキストをフッタにコピーします。 
.LP
この例では必要なかったオプションで、重要なオプションには 
.B \-classpath
と 
.BR \-link
があります。
.LP
.SH "環境変数"
.TP 20
.SB CLASSPATH
環境変数は、
.B javadoc
がユーザクラスファイルを探すときに使う、パスを指定します。環境変数は、
.B \-classpath
オプションによってオーバーライドされます。ディレクトリは
コロンで分割します。たとえば、
次のとおりです。 
.RS 20
.sp 1n
.B .:/home/classes:/usr/local/java/classes
.RE
.br
.ne 11
.SH "関連項目"
.LP
.BR javac (1)、
.BR java (1)、
.BR jdb (1)、
.BR javah (1)、
.BR javap (1)
.LP 
次については、
.BR java.sun.com
を参照または検索してください。
.TP 10
.B Javadoc ホームページ @
http://java.sun.com/products/jdk/javadoc/index.html
.TP 10
.B Javadoc に施された機能強化 @
http://java.sun.com/j2se/1.3/ja/docs/ja/tooldocs/javadoc/index.html
(http://java.sun.com/j2se/1.3/docs/tooldocs/javadoc/index.html ：英語版)
.TP 10
.B Javadoc FAQ @
http://java.sun.com/products/jdk/javadoc/faq.html
.TP 10
.B How to Write Doc Comments for Javadoc @ 
http://java.sun.com/products/jdk/javadoc/writingdoccomments.html
.TP 10
.B クラスを検索する方法 @ 
http://java.sun.com/products/j2se/1.3/ja/docs/ja/tooldocs/findingclasses.html#srcfiles
(http://java.sun.com/products/j2se/1.3/docs/tooldocs/findingclasses.html#srcfiles ：英語版)
