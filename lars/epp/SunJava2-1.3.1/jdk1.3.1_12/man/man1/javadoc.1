'\" t
.\"
.\" Copyright 2002 Sun Microsystems, Inc. All rights reserved.
.\" SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
.\"
.TH javadoc 1 "3 Jan 2001"
.hw javadoc
.SH NAME
javadoc \- Java API documentation generator
.SH SYNOPSIS
.B javadoc 
[
.I options
] [
.I packagenames
] [
.I sourcefiles
] [
.I @files
]
.SH PARAMETERS
Parameters can be in any order.  
.TP 15 
.I options
Command-line options, as specified in this
document.
To see a typical use of
.B javadoc
options, see Real World Example.
.TP
.I packagenames
A series of names of packages, separated by spaces,
such as
.BR "java.lang java.lang.reflect java.awt" .
You must separately specify each package you want to document.
.B javadoc 
uses
.B \-sourcepath 
to look for these package names.
.B javadoc 
does not recursively traverse subpackages.
Wildcards such as asterisks (\f3*\f1) are not allowed.
See 
.BR EXAMPLES , 
Documenting One or More Packages.
.TP
.I sourcefiles
A series of source file names, separated by spaces,
each of which can include paths and wildcards such as
asterisk (\f3*\f1). 
The path that
precedes the source file name determines where
.B javadoc
will look for it.
(\f3javadoc\f1 does not use
.B \-sourcepath 
to look for these source file names.)
For example, passing in
.B Button.java 
is identical to
.BR ./Button.java . 
An example source file name with a
full path is 
.BR /home/src/java/awt/Graphics*.java . 
See
.BR EXAMPLES , 
Documenting One or More Classes.
You can
also mix 
.I packagenames 
and
.IR sourcefiles , 
as in
.BR EXAMPLES ,
Documenting Both Packages and Classes.
.TP
.I @files
One or more files that contain
.I packagenames
and
.I sourcefiles 
in any order.
.SH DESCRIPTION
.B javadoc 
parses the declarations and documentation comments in a
set of Java source files and produces a corresponding set of HTML
pages describing (by default) the public and protected classes,
inner classes, interfaces, constructors, methods, and fields.
.LP
You can run
.B javadoc 
on entire packages, individual source files, or both.
In the first case, you pass in as an argument to
.B javadoc 
a series of package names.
In the second case, you pass in a series
of source (\f3.java\f1) file names.
See
.B EXAMPLES
at the end of this document.
.LP
As implemented,
.B javadoc 
requires and relies on the java compiler
to do its job.
.B javadoc 
calls part of
.B javac 
to compile the
declarations, ignoring the member implementation.
It builds a rich
internal representation of the classes, including the class
hierarchy, and "use" relationships, then generates the HTML from
that.
.B javadoc 
also picks up user-supplied documentation from
documentation comments in the source code.
.LP
In fact,
.B javadoc 
will run on 
.B .java 
source files that are pure stub
files with no method bodies.
This means you can write
documentation comments and run
.B javadoc 
in the earliest stages of
design while creating the API, before writing the implementation.
.LP
Relying on the compiler ensures that the HTML output
corresponds
exactly with the actual implementation, which may rely on
implicit, rather than explicit, source code.
For example,
.B javadoc
will document default constructors (section 8.6.7 of Java Language
Specification) that are present in the
.B .class 
files but not in the
source code.
.LP 
When
.B javadoc 
builds its internal structure for the
documentation,
it loads all referenced classes.
Because of this,
.B javadoc 
must be
able to find all referenced classes, whether bootstrap classes,
extensions, or user classes.
For more about this, see How
Classes Are Found.
Generally speaking, classes you create must either
be loaded as an extension or in
the class path of
.BR javadoc .
.SS javadoc Doclets
You can customize the content and format of 
the output of 
.B  javadoc
by using doclets.
.B javadoc 
has a default "built-in" doclet, called
the standard doclet, that generates HTML-formatted API documentation.
You can modify or subclass the standard doclet, or write your
own doclet to generate HTML, XML, MIF, RTF or whatever output
format you prefer.
Information about doclets and their use is at the
following locations:
.LP
.TP 2
\(bu
.B javadoc 
Doclets
.TP 2
\(bu
The
.B \-doclet 
command-line option
.LP
When a custom doclet is not specified with the
.B \-doclet 
command line option,
.B javadoc 
uses the default standard doclet.
The
.B javadoc 
tool has several command line options that are
available regardless of which doclet is being used.
The standard doclet
adds a supplementary set of command line options.
Both sets of
options are described below in the options section.
.SS Terminology
A few terms have specific meanings within the context of
.BR javadoc :
.TP 20
generated document
The document generated by the
.B javadoc 
tool from the doc
comments in Java source code.
The default generated document
is in HTML and is created by the standard doclet.
.TP
name
A name in the Java Language, namely the name of a package,
class, interface, field, constructor, or method.
A name can be
fully-qualified, such as
.BR java.lang.String.equals(java.lang.Object) ,
or partially-qualified, such as
.BR equals(Object) .
.TP
documented classes
The classes and interfaces for which full documentation is
generated during a
.B javadoc 
run. To be documented, the source
files must be available, and either their source filenames or
package names must be passed into the
.B javadoc 
command.
We also refer to these as the classes included in the
.B javadoc
run, or the included classes.
.TP
referenced classes
The classes and interfaces that are explicitly referred to in
the definition (implementation) of
the documented classes and interfaces.
Examples of references include return type,
parameter type, cast type, extended class, implemented
interface, imported classes, classes used in method bodies,
and so forth.
Classes referred to in doc comments (such as
.B @see 
tags) do not qualify as referenced classes.
When
.B javadoc
is run, it loads into memory all of the referenced classes in
the bootclasspath and classpath of
.BR  javadoc . 
(\f3javadoc\f1 prints a
"Class not found" warning for referenced classes not found.)
.B javadoc 
can derive enough information from the 
.B .class
files to determine their existence and the fully qualified
names of their members.
.TP
external referenced classes
The referenced classes with documentation not being
generated during a
.B javadoc 
run.
In other words, these classes
are external to that
.B javadoc 
run.
Links for names in the
documentation to those classes are said to be external
references or external links.
For example, if you run
.B javadoc
on only the 
.B java.awt 
package, then any class in 
.BR java.lang ,
such as Object, is an external referenced class.
External referenced classes can be linked to using the 
.B \-link 
option.
.SS Source Files
.B javadoc 
generates output originating from four different types
of "source" files: Java language source files for
classes (\f3.java\f1), package
comment files, overview comment files, and miscellaneous
unprocessed files.
.SS Class Source Code Files
Each class or interface and its members can have their own documentation
comment, contained in a
.B .java
file.
For more details about these doc commments, see
.B Documentation Comments
below.
.SS Package Comment Files
Each package can have its own documentation comment, contained in its
own "source" file, that
.B javadoc 
will merge into the package
summary page that it generates.
You typically include in this
comment any documentation that applies to the entire package.
.LP
To create a package comment file, you must name it 
.B package.html
and place it in the package directory in the source tree along
with the 
.B .java 
files.
.B javadoc 
automatically looks for this
filename in this location.
Notice that the filename is identical
for all packages.
.LP
The content of the package comment file is one big documentation
comment, written in HTML, like all other comments, with one
exception, namely, the documentation comment should not include the
comment separators /** and */ or leading asterisks.
When writing
the comment, you should make the first sentence a summary about
the package, and not put a title or any other text between 
.B <body>
and the first sentence.
You can include package tags; as with any
documentation comment, all tags except {\f3@link\f1} must appear after
the description.
If you add a 
.B @see 
tag in a package comment
file, it must have a
fully qualified name.
.LP
When
.B javadoc 
runs, it automatically looks for this file; if found,
.B javadoc 
does the following:
.LP
.TP 2
\(bu
Copies all content between
.B <body> 
and 
.B </body> 
tags for
processing.
.TP 2
\(bu
Processes any package tags that are present.
.TP 2
\(bu
Inserts the processed text at the bottom of the package
summary page it generates, as shown in Package Summary.
.TP 2
\(bu
Copies the first sentence of the package comment to the top
of the package summary page.
It also adds the package name
and this first sentence to the list of packages on the
overview page, as shown in Overview Summary.
The end-of-sentence is determined by the same rules used for the
end of the first sentence of class and member descriptions.
.SS Overview Comment File
Each application or set of packages that you are documenting can
have its own overview documentation comment, kept in its own
"source" file, that
.B javadoc 
merges into the overview page that
it generates.
You typically include in this comment any
documentation that applies to the entire application or set of
packages.
.LP
To create an overview comment file, you can name the file anything
you want, typically 
.BR overview.html , 
and place it anywhere, typically
at the top level of the source tree.
Notice that you can have multiple
overview comment files for the same set of source files, in case
you want to run
.B javadoc 
multiple times on different sets of packages.
For example, if the source files for the
.B java.applet
package are contained in 
.B /home/user/src/java/applet 
directory, you
could create an overview comment file at
.BR /home/user/src/overview.html .
.LP
The content of the overview comment file is one big documentation
comment, written in HTML, like the package comment file described
previously.
See that description for details.
To reiterate, when
writing the comment, you should make the first sentence a summary
about the application or set of packages, and not put a title or
any other text between 
.B <body> 
and the first sentence.
You can
include overview tags; as with any documentation comment, all tags
except {\f3@link\f1} must appear after the description.
If you add a
.B @see 
tag, it must have a fully-qualified name.
.LP
When you run
.BR javadoc ,
you specify the overview comment file name with the
.B \-overview 
option.
The file is then processed, similar to
that of a package comment file:
.TP 2
\(bu
Copies all content between 
.B <body> 
and 
.B </body> 
tags for processing.
.TP 2
\(bu
Processes any overview tags that are present.
.TP 2
\(bu
Inserts the processed text at the bottom of the overview page
it generates, as shown in Overview Summary.
.TP 2
\(bu
Copies the first sentence of the overview comment to the top
of the overview summary page.
.SS Miscellaneous Unprocessed Files
You can also include in your source any miscellaneous files that
you want
.B javadoc 
to copy to the destination directory.
These typically include
graphic files (for example, Java source (\f3.java\f1) and
class (\f3.class\f1) files) and self-standing HTML files whose content
would overwhelm the documentation comment of a normal Java source
file.
.LP
To include unprocessed files, put them in a directory called
.BR doc-files ,
which can be a subdirectory of any package directory.
You can have one such subdirectory for each package.
You might include images, example code, source files, 
.B .class 
files, applets, and HTML files.
For example, if you want to include the image of a button
.B button.gif 
in the 
.B java.awt.Button 
class documentation,
you place that file in the 
.B /home/user/src/java/awt/doc-files/
directory.
All links to these unprocessed files must be
hard-coded, because
.B javadoc 
does not look at the files; it
only copies the directory and all its contents to the
destination.
For example, the link in the 
.B Button.java 
doc comment might look like this:
.LP
.ft 3
.nf
/**
* This button looks like this:
* <img src="doc-files/Button.gif">
*/
.fi
.ft 1
.SS Generated Files
By default,
.B javadoc 
uses a standard doclet that generates
HTML-formatted documentation.
This doclet generates the following
kinds of files (where each HTML "page" corresponds to a separate
file).
Notice that
.B javadoc 
generates files with two types of names:
those named after classes/interfaces, and those that are not (such
as \f3package-summary.html\f1).
Files in the latter group contain
hyphens to prevent file name conflicts
with those in the former group.
.SS Basic Content Pages
.TP 2
\(bu
One class or interface page (\f2classname\f3.html\f1) for each class
or interface it is documenting.
.TP 2
\(bu
One package page (\f3package-summary.html\f1) for each package it
is documenting.
.B javadoc 
includes any HTML text provided
in a file named 
.B package.html 
in the package directory of the
source tree.
.TP 2
\(bu
One overview page (\f3overview-summary.html\f1) for the entire set
of packages.
This is the front page of the generated document.
.B javadoc 
includes any HTML text provided in a
file specified with the
.B \-overview 
option.
Notice that
this file is created only if you pass into
.B javadoc 
two or more package names.
For further explanation, see
.B HTML Frames
below.
.SS Cross-Reference Pages
.TP 2
\(bu
One class hierarchy page for the entire set of packages
(\f3overview-tree.html\f1).
To view this, click on "Overview" in
the navigation bar, then click on "Tree".
.TP 2
\(bu
One class hierarchy page for each package (\f3package-tree.html\f1).
To view this, go to a particular package, class or interface
page; click "Tree" to display the hierarchy for that package.
.TP 2
\(bu
One "use" page for each package (\f3package-use.html\f1) and a
separate one for each class and interface
(\f3class-use/classname.html\f1). This page describes what
packages, classes, methods, constructors, and fields use any
part of the given class, interface, or package.
Given a class
or interface A, its "use" page includes subclasses of A,
fields declared as A, methods that return A, and methods and
constructors with parameters of type A.
You can access this
page by first going to the package, class, or interface, then
clicking on the "Use" link in the navigation bar.
.TP 2
\(bu
A deprecated API page (\f3deprecated-list.html\f1) listing all
deprecated names.
(A deprecated name is not recommended for
use, generally due to improvements, and a replacement name is
usually given.
Deprecated APIs might be removed in future implementations.)
.TP 2
\(bu
A serialized form page (\f3serialized-form.html\f1) for information
about serializable and externalizable classes.
Each such
class has a description of its serialization fields and
methods.
This information is of interest to re-implementors,
not to developers using the API.
While there is no link in
the navigation bar, you can get to this information by going
to any serialized class and clicking "Serialized Form" in the
"See also" section of the class description.
.TP 2
\(bu
An index (\f3index-*.html\f1) of all class, interface, constructor,
field and method names, alphabetically arranged.
This is internationalized for Unicode and can be generated as a
single file or as a separate file for each starting character
(such as A-Z for English).
.SS Support Files
.TP 2
\(bu
A help page (\f3help-doc.html\f1) that describes the navigation bar
and the above pages.
You can provide your own custom help
file to override the default using
.BR \-helpfile .
.TP 2
\(bu
One 
.B index.html 
file that creates the HTML frames for display.
This is the file you load to display the front page
with frames.
This file itself contains no text content.
.TP 2
\(bu
Several frame files (\f3*-frame.html\f1) containing lists of
packages, classes and interfaces, used when HTML frames are
being displayed.
.TP 2
\(bu
A package list file (\f3package-list\f1), used by the
.B \-link 
and
.B \-linkoffline 
options.
This is a text file, not HTML, and is
not reachable through any links.
.TP 2
\(bu
A style sheet file (\f3stylesheet.css\f1) that controls a limited
amount of color, font family, font size, font style, and
positioning on the generated pages.
.TP 2
\(bu
A doc-files directory that holds any image, example, source
code, or other files that you want copied to the destination
directory.
These files are not processed by
.B javadoc 
in any
manner, that is, any
.B javadoc 
tags in them will be ignored.
This directory is not generated unless it exists in the
source tree.
.SS HTML Frames
.B javadoc 
generates either two or three HTML frames, as shown in
the figure below.
When you pass source files (*\f3.java\f1) or a single
package name as arguments into the
.B javadoc 
command, it creates
only one frame (C) in the left-hand column, that is,
the list of classes.
When you pass into
.B javadoc 
two or more package names, it creates a
third frame (P) listing all packages, as well as an overview page
(Detail).
This overview page has the file name,
.BR overview-summary.html . 
Thus, this file is created only if you pass
in two or more package names.
You can bypass frames by clicking on
the "No Frames" link or entering at 
.BR overview-summary.html . 
.LP
If you are unfamiliar with HTML frames, you should be aware that
frames can have focus for printing and scrolling.
To give a frame
focus, click on it.
Then, on many browsers the arrow keys and page
keys will scroll that frame,
and the print menu command will print it.
.LP
.ft 3
.nf
    ------------                  ------------
    |C| Detail |                  |P| Detail |
    | |        |                  | |        |
    | |        |                  |-|        |
    | |        |                  |C|        |
    | |        |                  | |        |
    | |        |                  | |        |
    ------------                  ------------
   javadoc *.java           javadoc java.lang java.awt
.fi
.ft 1
.LP
Load one of the following two files as the starting page depending
on whether you want HTML frames or not:
.LP
.TP 2
\(bu
.B index.html 
(for frames)
.TP 2
\(bu
.B overview-summary.html 
(for no frames)
.SS Generated File Structure
The generated class and interface files are organized in the same
directory hierarchy as Java source files and class files.
This structure is one directory per subpackage.
.LP
For example, the document generated for the class
.B java.applet.Applet
would be located at
.BR java/applet/Applet.html . 
The file structure for the
.B java.applet
package follows, given that the destination directory is named
.BR apidocs .
All files that contain the word "frame" appear in the
upper-left or lower-left frames, as noted.
All other HTML files
appear in the right-hand frame.
.LP
NOTE: Directories are shown in bold.
The asterisks (*)
indicate the files and directories that are omitted when
the arguments to
.B javadoc 
are source file names (*\f3.java\f1)
rather than package names.
Also, when arguments are
source file names,
.B package-list 
is created but is empty.
The
.B doc-files
directory is not created in the
destination unless it exists in the source tree.
.LP
.sp 1n
.TS
lb lb.
apidocs	Top directory
  index.html	Initial page that sets up HTML frames
* overview-summary.html	Packages with first sentence summaries
  overview-tree.html	Class hierarchy for all packages
  deprecated-list.html	Deprecated API for all packages
  serialized-form.html	Serialized form for all packages
* overview-frame.html	All packages, used in upper-left frame
  allclasses-frame.html	All package classes, lower-left frame
  help-doc.html	User help\(emhow pages are organized
  index-all.html	Default index created w/o-splitindex 
  index-files	Directory created with -splitindex 
     index-<number>.html	Index files created with -splitindex 
  package-list	Package names\(emresolving external refs
  stylesheet.css	HTML style sheet (fonts, colors, etc.)
  java	Subpackage directory
     applet	Subpackage directory
        Applet.html	Page for Applet class
        AppletContext.html	Page for AppletContext interface
        AppletStub.html	Page for AppletStub interface
        AudioClip.html	Page for AudioClip interface
      * package-summary.html	1st sentence summaries\(empackage classes
      * package-frame.html	Package classes, lower left-hand frame
      * package-tree.html	Class hierarchy for this package
        package-use	Where this package is used
        -files	Directory holding image & example files
        class-use	Directory holding pages API is used
           Applet.html	Page for uses\(emApplet class
           AppletContext.html	Page for uses\(emAppletContext interface
           AppletStub.html	Page for uses\(emAppletStub interface
           AudioClip.html	Page for uses\(emAudioClip interface
.TE
.SS API Signatures
.B javadoc
generates a signature at the start of each class, interface, field,
constructor, and method description.
This description is the declaration for that API item.
For example, the signature for the
.B Boolean
class is:
.LP
.RS
.nf
.ft 3
public final class Boolean
extends Object
implements Serializable
.ft 1
.fi
.RE
.LP
and the signature for the
.B Boolean.valueOf
method is:
.LP
.RS
.B public static Boolean valueOf(String s)
.RE
.LP
.B javadoc
can include the modifiers
.BR public ,
.BR protected ,
.BR private ,
.BR abstract ,
.BR final ,
.BR static ,
.BR transient ,
and
.BR volatile ,
but not
.B synchronized
or
.BR native .
These last two modifiers are considered
implementation detail and not part of the API specification.
.LP
Rather than relying on the keyword
.BR synchronized ,
APIs should document their concurrency semantics in the
comment description, as in, for example, "a single
.B Enumeration
cannot be used by multiple threads concurrently".
The document should not describe how to achieve these semantics.
As another example, while
.B Hashtable
should be thread-safe,
there is no reason to specify that we achieve this by
synchronizing all of its exported methods.
We should reserve the right to synchronize internally
at the bucket level, thus offering higher concurrency.
.SS Documentation Comments
.B Commenting the Source Code
.LP
You can include documentation comments in the source code, ahead
of declarations for any entity (classes, interfaces, methods,
constructors, or fields).
These are also known as
.B javadoc
comments.
A doc comment consists of the characters between the
characters
.B /**
that begin the comment and the characters
.B */
that end it.
The text can continue onto multiple lines.
.LP
.RS
.ft 3
.nf
/**
* This is the typical format of a simple documentation comment.
*/
.fi
.ft 1
.RE
.LP
To save space you can put a comment on one line:
.LP
.RS
.ft 3
.nf
/** This comment takes up only one line. */
.fi
.ft 1
.RE
.LP
.B Placement of Comments
.LP
Documentation comments are recognized only
when placed immediately before class, interface, constructor,
method, or field declarations (see the class example, method
example, and field example).
Documentation comments placed in the
body of a method are ignored.
Only one documentation comment per
declaration statement is recognized by the
.B javadoc 
tool.
.LP
A common mistake is to put an import statement between the class
comment and the class declaration.
Avoid this, as
.B javadoc
will ignore the class comment.
.LP
.RS
.ft 3
.nf
/**
* This is the class comment for the class Whatever.
*/

import com.sun;   // MISTAKE - Important not to put statements here

public class Whatever {
}
.fi
.ft 1
.RE
.LP
.B Comment Tags
.LP
A comment is a description followed by tags.
The description
begins after the starting delimiter
.B /**
and continues until the tag section.
The tag section starts with the first character 
.B @
that begins a line (ignoring leading asterisks and white space).
The description cannot continue after the tag section begins.
Any number of tags can exist, though some types of tags can be
repeated while others cannot.
This 
.B @see 
starts the tag section:
.LP
.RS
.ft 3
.nf
 /**
 * This is a doc comment.
 * @see java.lang.Object
 */
.fi
.ft 1
.RE
.LP
.B Standard and In-line Tags
.LP
A
.I tag
is a special keyword within a doc comment that
.B javadoc
can process.
.B javadoc
has standard tags, which appear as
.BR @tag ,
and in-line tags, which appear within braces, as, for example,
.BR {@tag} .
To be interpreted, a standard tag must appear at
the beginning of a line, ignoring leading asterisks,
white space, and comment separator (\f3/**\f1).
This means that you can use the
.B @
character elsewhere in the text and it will not be
interpreted as the start of a tag.
If you want to start a line with the
.B @
character and not have it be interpreted, use
the HTML entity
.BR &#064; .
Each standard tag has associated text,
which includes any text following the tag up to,
but not including, either the next tag, or the end of the doc comment.
An in-line tag is allowed and interpreted
anywhere that text is allowed.
The following example contains the standard tag
.B @deprecated
and in-line tag
.BR {@link} :
.LP
.RS
.ft 3
.nf
/**
 * @deprecated  As of JDK 1.1, replaced by{@link #setBounds(int,int,int,int)}
 */
.ft 1
.fi
.RE
.LP
.B Comments are written in HTML
.LP
The text must be written in HTML so that comments can
use HTML entities and HTML tags.
You can use whichever version of HTML your browser supports;
the standard doclet is written to generate HTML 3.2-compliant code
elsewhere (outside of the documentation comments) with the
inclusion of cascading style sheets and frames.
(Each generated file is prefaced
with "HTML 4.0" because of the frame sets.)
.LP
For example, entities for the less-than (<) and greater-than (>)
symbols should be written
.B &lt;
and
.BR &gt; .
Likewise, the ampersand
(&) should be written
.BR &amp; .
The bold HTML tag <b> is shown in the
following example:
.LP
.RS
.ft 3
.nf
/**
* This is a <b>doc</b> comment.
* @see java.lang.Object
*/
.fi
.ft 1
.RE
.LP
.B Leading Asterisks
.LP
When
.B javadoc 
parses a doc comment, leading
asterisk (*) characters on each line are discarded; blanks and
tabs preceding the initial asterisk (*) characters are also
discarded.
If you omit the leading asterisk on a line, all
leading white space is removed.
Therefore, you should not omit leading
asterisks if you want leading white space to be kept, such as when
indenting sample code with the 
.B <pre> 
tag.
.LP
.B First Sentence
.LP
The first sentence of each doc comment should be a summary
sentence, containing a concise but complete description of the
declared entity.
This sentence ends at the first period that is
followed by a blank, tab, or line terminator, or at the first tag.
.B javadoc
copies this first sentence to the member summary at the
top of the HTML page.
.LP
.B Declaration with Multiple Fields
.LP
.B java 
allows declaring multiple
fields in a single statement, but this statement can have only
one documentation comment, which is copied for all fields.
Therefore, if you want individual
documentation comments for each field,
you must declare each field in a separate statement.
For example, the
following documentation comment does not make sense when written as a
single declaration and would be better handled as two declarations:
.LP
.RS
.ft 3
.nf
/**
* The horizontal and vertical distances of point (x,y)
*/
public int x, y;      // Avoid this
.fi
.ft 1
.RE
.LP
.B javadoc 
generates the following documentation from the above code:
.LP
.RS
.ft 3
public int x
.fi
.ft 1
The horizontal and vertical distances of point
(x,y).
.ft 3
.nf
public int y
.fi
.ft 1
The horizontal and vertical distances of point
(x,y).
.RE
.LP
.B Use header tags carefully
.LP
When writing documentation comments
for members, it is best not to use HTML heading tags such as
.B <H1>
and 
.BR <H2> , 
because
.B javadoc 
creates an entire structured document
and these structural tags can interfere with the formatting
of the generated document.
However, it is fine to use these headings
in class and package comments to provide your own structure.
.LP
.B Automatic Re-use of Method Comments
.LP
Automatic re-use of method comments is also known as
"inheriting comments".
If a method in a class or interface
has no doc comment or tags,
.B javadoc 
instead uses
the comment and tags from a method it either overrides or
implements, if any.
This occurs in three cases:
.TP 2
\(bu
When a method in a class overrides a method in a superclass
.PD 0
.TP 2
\(bu
When a method in an interface overrides a method in a
superinterface
.TP 2
\(bu
When a method in a class implements a method in an interface
.PD
.LP
In the first two cases, if a method m() overrides another method,
.B javadoc
generates a subheading "Overrides" in the
documentation for m(), with a link to the method it is overriding.
.LP
In the third case, if a method m() in a given class implements a
method in an interface,
.B javadoc
generates a subheading
"Specified by" in the documentation for m(), with a link to the
method it is implementing.
.LP
How does it search?
For a method in class C,
.B javadoc
searches recursively through all
interfaces that class C implements, then
through all superclasses of C.
For a method in interface I, it
searches recursively through all of its superinterfaces.
In each case, it copies the first comment that it finds.
.LP
For the specification on documentation
comments, see Chapter 18, "Documentation Comments," in the
.IR "Java Language Specification" ,
by James Gosling, Bill Joy, and Guy Steele.
.SS javadoc Tags
.B javadoc 
parses special tags when they are embedded within a 
.B javadoc 
comment.
These doc tags enable you to autogenerate a complete,
well-formatted API from your source code.
The tags start with an
"at" sign (\f3@\f1) and are case-sensitive;
that is, they must be typed with
the uppercase and lowercase letters as shown.
A tag must start at
the beginning of a line (after any leading spaces and an optional
asterisk) or it is treated as normal text.
By convention, you should group tags with the same name together.
For example, put all 
.B @see 
tags together.
.LP
For information about tags might be introduced in future releases,
see Proposed Tags.
.LP
The current tags are:
.LP
.sp 1n
.TS
center, box;
cbp-1 | cbp-1
l | l .
Tag	Introduced 
	in JDK
=
@author	1.0
{@docRoot}	1.3
@deprecated	1.0
@exception	1.0
{@link}	1.2
@param	1.0
@return	1.0
@see	1.0
@serial	1.2
@serialData	1.2
@serialField	1.2
@since	1.1
@throws	1.2
@version	1.0
.TE
.LP
.TP
.BI @author  " name-text"
Adds an "Author" entry with the specified name-text to the
generated docs when the
.B \-author
option is used.
A doc comment can contain multiple 
.B @author 
tags.
You can specify one name per 
.B @author 
tag or multiple names per tag.
In the former case,
.B javadoc 
inserts a comma (\f3,\f1) and space between names.
In the latter case, the entire text is copied to the
generated document without being parsed.
Therefore, use
multiple names per line if you want a localized name
separator other than a comma.
.TP
.B {@docRoot}
Represents the relative path to the generated document's
(destination) root directory from any generated page.
It is useful when you want to include a file, such as a
copyright page or company logo, that you want to
reference from all generated pages.
Linking to the copyright page from the bottom of each page is common.
.RS
.LP
This
.B {@docRoot}
tag can be used both on the command line
and in a doc comment:
.TP 4
1.
On the command line, where the header/footer/bottom
are defined:
.sp 1n
.B javadoc \-bottom '<a href="{@docRoot}/copyright.html">Copyright</a>'
.TP
2.
In a doc comment:
.sp 1n
.nf
.ft 3
/**
* See the <a href="{@docRoot}/copyright.html">Copyright</a>.
*/
.ft 1
.fi
.LP
The reason this tag is needed
is because the generated docs
are in hierarchical directories, as deep as the number of
subpackages.
This expression:
.sp 1n
.ti +5n
.B <a href="{@docRoot}/copyright.html">
.sp 1n
would resolve to:
.sp 1n
.ti +5n
\f3<a href=".\|.\|/.\|.\|/copyright.html">\f1   .\|.\|. for java/lang/Object.java
.sp 1n
and
.sp 1n
.ti +5n
\f3<a href=".\|.\|/.\|.\|/.\|.\|/copyright.html">\f1 .\|.\|. for java/lang/ref/Reference.java
.RE
.TP 7
.BI @deprecated " deprecated-text"
Adds a comment indicating that this API should no longer be
used (even though it might continue to work).
.B javadoc 
moves the
deprecated-text ahead of the description, placing it in
italics and preceding it with a bold warning: "\f3Deprecated\f1".
.LP
.RS 
The first sentence of deprecated-text should at least tell
the user when the API was deprecated and what to use as a
replacement.
.B javadoc 
copies just the first sentence to the
summary section and index.
Subsequent sentences can also
explain why it has been deprecated.
You should include a
{\f3@link\f1} tag (for
.B javadoc 
1.2 or later) that points to the
replacement API:
.LP
.TP 2
\(bu
For
.B javadoc 
1.2, use a {\f3@link\f1} tag. This creates the
link in-line, where you want it. For example:
.LP
.RS
.ft 3
.nf
/**
 * @deprecated  As of JDK 1.1, replaced by 
 *    {@link #setBounds(int,int,int,int)}
 */
.fi
.ft 1
.RE
.LP
.TP 2
\(bu
For
.B javadoc 
1.1, the standard format is to create a 
.B @see
tag (which cannot be in-line) for each 
.B @deprecated 
tag.
.LP
For more about deprecation, see the 
.B @deprecated 
tag.
.RE
.TP
.BI @exception  " class-name description"
The 
.B @exception 
tag is a synonym for 
.BR @throws . 
.TP
{\f3@link \f2name label\f1}
Inserts an in-line link that points to the specified name.
This tag accepts exactly the same syntax for name and label
as the 
.B @see 
tag, described below, but generates an in-line
link rather than placing the link in the "See Also" section.
This tag begins and ends with curly braces to separate it
from the rest of the in-line text.
If you need to use "}"
inside the label, use the HTML entity notation
.BR &#125; .
.RS 
.LP
There is no limit to the number of {\f3@link\f1} tags allowed in a
sentence.
You can use this tag in the description part of a
documentation comment or in the text portion of any tag (such
as 
.BR @deprecated , 
.BR @return ,
or 
.BR @param ).
.LP
For example, here is a comment that refers to the
.B getComponentAt(int, int) 
method:
.LP
.ft 3
.nf
Use the {\f3@link #getComponentAt(int, int) getComponentAt\f1} method.
.fi
.ft 1
.LP
From this, the standard doclet would generate the following
HTML (assuming it refers to another class in the same
package):
.LP
.ft 3
.nf
Use the 
<a href="Component.html#getComponentAt(int, int)">\\
               getComponentAt</a>method.
.fi
.ft 1
.LP
which appears on the web page as:
.LP
.ft 3
.nf
Use the getComponentAt method.
.fi
.ft 1
.RE
.TP
.BI @param  " parameter-name description"
Adds a parameter to the "Parameters" section.
The description
can continue on the next line.
.TP
.BI @return  " description"
Adds a "Returns" section with the description text.
This text
should describe the return type and permissible range of values.
.TP
.BI @see  " reference"
Adds a "See Also" heading with a link or text entry that
points to
.IR reference .
A doc comment can contain any number of
.B @see 
tags, which are all grouped under the same heading.
The
.B @see 
tag has three variations; the third form below is the
most common.
.TP
.BI @see " string"     
Note: This form is broken in JDK 1.2 (prints
none of the quoted text) but is fixed in JDK 1.2.2.
Adds a text entry for string. No link is generated.
The string is a book or other reference to information not
available by URL.
.B javadoc 
distinguishes this from the
previous cases by looking for a double-quote (") as the
first character.
For example:
.LP
.RS 
.ft 3
.nf
     @see "The Java Programming Language"
.fi
.ft 1
.LP
This generates text such as:
.LP
.ft 3
.nf
     See Also:
          "The Java Programming Language"
.fi
.ft 1
.RE
.TP
\f3@see <a href="\f2URL#value\f3">\f2label\f3</a>\f1
Adds a link as defined by
.IR URL#value .
The
.I URL#value
is a relative or absolute URL.
.B javadoc 
distinguishes this
from other cases by looking for a less-than symbol (\f3<\f1)
as the first character.
For example:
.LP
.RS 
.ft 3
.nf
     @see <a href="spec.html#section">Java Spec</a>
.fi
.ft 1
.LP
This generates a link such as:
.LP
.ft 3
.nf
    See Also:
          Java Spec
.fi
.ft 1
.RE
.TP
.BI @see  " package.class#member label"
Adds a link, with visible text label, that points to the
documentation for the specified name in the Java Language.
The label is optional; if omitted, the name
appears instead as the visible text, suitably shortened
(see How a Name Is Displayed).
Use the label when you want the
visible text to be abbreviated or different from the name.
.LP
.RS
In JDK 1.2, only the name but not the label
automatically appears in
.B <code>
HTML tags.
Starting with
JDK 1.2.2, the
.B <code>
is always included around the visible
text, whether or not a label is used.
.TP 2
\(bu
.I package.class#member 
is any valid name in the Java
Language that is referenced (package, class,
interface, constructor, method, or field name),
except that you replace the dot ahead of the member
name with a hash character (#).
If this name is in
the documented classes,
.B javadoc 
automatically
creates a link to it.
To create links to external
referenced classes, use the
.B \-link 
option.
Use
either of the other two 
.B @see 
forms for referring to
documentation of a name that does not belong to a
referenced class.
This argument is described
at greater length below under Specifying a Name.
.TP 2
\(bu
.I label
is optional text that is visible as the
link's label.
The label can contain white space.
If a label is omitted, then 
.I package.class.member 
will appear, suitably shortened relative to the current
class and package (see How a Name Is Displayed).
.TP 2
\(bu
A space is the delimiter between
.I package.class#member 
and
.IR label .
A space inside
parentheses does not indicate the start of a label,
so spaces can be used between parameters in a method.
.LP
In the example below, an
.B @see 
tag (in the Character
class) refers to the equals method in the String class.
The tag includes both arguments, that is, the name
"\f3String#equals(Object)\f1" and the label "\f3equals\f1":
.LP
.ft 3
.nf
      /**
      * @see String#equals(Object) equals
      */
.fi
.ft 1
.LP
The standard doclet produces HTML something like this:
.LP
.ft 3
.nf
    <dl>
    <dt><b>See Also:</b>
    <dd><a href="../../java/lang/String#equals\\
                 (java.lang.Object)"><code>equals</code></a>
    </dl>
.fi
.ft 1
.LP
The above looks something like this in a browser, where the
label is the visible link text:
.LP
.ft 3
.nf
     See Also:
          equals
.fi
.ft 1
.LP
.B Specifying a Name:
This 
.I package.class#member 
name can
be either fully qualified, such as
.BR java.lang.String#toUpperCase() ,
or not, such as
.B String#toUpperCase()
or
.BR #toUpperCase() .
If less than fully-qualified,
.B javadoc 
uses the normal Java compiler
search order to find it, further described below in
Search order for 
.BR @see . 
The name can contain whitespace
within parentheses, such as between method arguments.
.LP
The advantage to providing shorter,
"partially-qualified" names is that they require less
typing and make less clutter in the source code.
The following
table shows the different forms of the name, where Class
can be a class or interface, Type can be a class,
interface, array, or primitive, and method can be a
method or constructor.
.LP
.TS
box;
cbp-1 
l .
T{
Typical forms for
.BI @see " package.class#member"
T}
=
Referencing a member of the current class
@see  #field
@see  #method(Type, Type,...)
@see  #method(Type argname, Type argname,...)
Referencing another class in the current or imported
packages
@see  Class#field
@see  Class#method(Type, Type,...)
@see  Class#method(Type argname, Type argname,...)
@see  Class
Referencing another package (fully qualified)
@see  package.Class#field
@see  package.Class#method(Type, Type,...)
@see  package.Class#method(Type argname, Type argname,...)
@see  package.Class
@see  package
.TE
.LP
The following notes apply to the above table:
.LP
.TP 2
\(bu
The first set of forms (with no class or package)
will cause
.B javadoc 
to search only through the
current class's hierarchy.
It finds a member of
the current class or interface, one of its
superclasses or superinterfaces, or one of its
enclosing classes or interfaces (search steps 1-3).
It will not search the rest of the current package
or other packages (search steps 4-5).
.TP 2
\(bu
If any method or constructor is entered as a name
with no parentheses, such as getValue, and if
no field with the same name exists,
.B javadoc 
will correctly create a link to it, but will print a
warning message reminding you to add the
parentheses and arguments.
If this method is overloaded,
.B javadoc 
links to the first method
that its search encounters, which is unspecified.
.TP 2
\(bu
Inner classes must be specified as
.BR outer.inner ,
not only
.BR inner ,
for all forms.
.TP 2
\(bu
As stated, the hash character (\f3#\f1), rather than a
dot (\f3.\f1), separates a member from its class.
This enables
.B javadoc 
to resolve ambiguities, since the
dot also separates classes, inner classes,
packages, and subpackages.
The hash character is
absolutely necessary in the forms above where it is
the first character.
However, in other forms,
.B javadoc 
is generally lenient and allows a dot
if it does not produce an ambiguity, though it does
print a warning.
.LP
.B Search Order for @see:
.B javadoc 
will process an
.B @see 
tag that appears in a source file (\f3.java\f1), package file
(\f3package.html\f1), or overview file (\f3overview.html\f1).
In the latter two files, you must fully qualify the name you
supply with 
.BR @see . 
In a source file, you can specify a
name that is fully qualified or partially qualified.
.LP
When
.B javadoc 
encounters an 
.B @see 
tag in a 
.B .java 
file that
is not fully qualified, it searches for the specified
name in the same order as the Java compiler would
(except
.B javadoc 
will not detect certain namespace
ambiguities, since it assumes the source code is free of
these errors).
This search order is formally defined in
Chapter 6, "Names" of the
.IR "Java Language Specification" ,
modified by the Inner Classes Specification.
.B javadoc
searches for that name through all related and imported
classes and packages.
In particular, it searches in this order:
.LP
.TP 4
1. 
The current class or interface
.PD 0
.TP 4
2. 
Any enclosing classes and interfaces, searching
closest first
.TP 4
3. 
Any superclasses and superinterfaces, searching
closest first
.TP 4
4. 
The current package
.TP 4
5. 
Any imported packages, classes and interfaces,
searching in the order of the import statement
.PD
.LP
.B javadoc 
continues to search recursively through steps
1-3 for each class it encounters until it finds a match.
That is, after it searches through the current class and
its enclosing class E, it searches through E's
superclasses before E's enclosing classes.
In steps 4 and 5,
.B javadoc 
does not search classes or interfaces
within a package in any specified order (that order
depends on the particular compiler).
In step 5,
.B javadoc
will look in
.BR java.lang , since that is automatically
imported by all programs.
.LP
.B javadoc 
will not necessarily look in subclasses, nor will
it look in other packages even if their documentation is
being generated in the same run.
For example, if the
.B @see 
tag is in 
.B java.awt.event.KeyEvent 
class and refers
to a name in the 
.B java.awt 
package,
.B javadoc 
will not look
in that package unless that class imports it.
.LP
.B How a Name is Displayed:
If
.I label
is omitted, then
.I package.class.member 
will appear.
In general, it will be
suitably shortened relative to the current class and
package.
By "shortened", we mean
.B javadoc 
will display
only the minimum name necessary.
For example, if the
String.toUpperCase() method contains references to a
member of the same class and to a member of a different
class, the class name will be displayed only in the
latter case:
.sp 1n
.TS
lb lb lb
l  lb l.
T{
.nf
Type
of
Ref-
erence
T}	Example	Displays As

T{
.nf
@see tag
refers
to
member
of
the
same
class
T}	T{
.nf
@see
String#toLowerCase()
T}	T{
.nf
toLowerCase()
(omits the class name)
T}

T{
.nf
@see
tag
refers
to
member
of a
differ-
ent
class
T}	T{
.nf
@see
Character#toLowerCase(char)
T}	T{
.nf
Character.toLowerCase(char)
(includes the class name)
T}
.TE
.LP
.B Examples of @see:
The comment to the right shows how the name would be
displayed if the 
.B @see 
tag is in a class in another package,
such as
.BR java.applet.Applet :
.LP
.sp 1n
.TS
li li
lb l.
Example	See also:

@see java.lang.String	// String
@see java.lang.String The String class	// The String class
@see String	// String
@see String#equals(Object)	// String.equals(Object)
@see String#equals	T{
.nf
// String.equals\e
      (java.lang.Object)
T}
@see java.lang.Object#wait(long)	T{
.nf
// java.lang.Object.\e
      wait(long)
T}
@see Character#MAX_RADIX	// Character.MAX_RADIX
@see <a href="spec.html">Java Spec</a>	// Java Spec
@see "The Java Programming Language"	T{
.nf
// "The Java Programming \e
      Language"
T}
.TE
.RE
.LP
You can extend
.B @see
to link to classes not being documented 
by using the
.B \-link
option.
Notice that this works only for
classes that are referenced in a
particular way as described at
.BR "How a Class Must Be Referenced" . 
.TP
.BI @since  " since-text"
Adds a "Since" heading with the specified
.I since-text
to the generated documentation.
The text has no special internal structure.
This tag means that this change or feature has
existed since the software release specified by the
.IR since-text .
For example:
.RS 
.LP
.ft 3
.nf
@since JDK1.1
.fi
.ft 1
.RE
.TP
.BI @serial  " field-description"
Used in the doc comment for a default serializable field.
.RS 
.LP
An optional
.I field-description
augments the doc comment for the field.
The combined description must explain the meaning
of the field and list the acceptable values.
If needed, the
description can span multiple lines.
.LP
The 
.B @since 
tag should be added to each serializable field
that has been added since the initial version of a
Serializable class.
.LP
For more information about how to use these tags, along with
an example, see "Documenting Serializable Fields and Data for
a Class," Section 1.6 of the
.IR "Java Object Serialization Specification" .
Also see the "Serialization FAQ," which covers
the questions, "Why does the
.B javadoc 
standard doclet generate
many warnings about missing 
.B @serial 
and/or 
.B @serialData 
tags?" and "Why do I see
.B javadoc 
warnings stating that I am missing
.B @serial 
tags for private fields if I am not running
.B javadoc
with the
.B \-private 
switch?"
.LP
.RE
.TP
.BI @serialField  " field-name  field-type  field-description"
Documents an ObjectStreamField component of a Serializable
class's serialPersistentFields member.
One 
.B @serialField 
tag
should be used for each ObjectStreamField component.
.TP
.BI @serialData  " data-description"
A
.I data-description
documents the sequences and types of data,
specifically the optional data written by the writeObject
method and all data written by the
Externalizable.writeExternal method.
.LP
.RS 
The 
.B @serialData 
tag can be used in the doc comment for the
writeObject, readObject, writeExternal, and readExternal
methods.
.RE
.TP
.BI @throws  " class-name  description"
The 
.B @throws 
and 
.B @exception 
tags are synonyms.
Adds a "Throws"
subheading to the generated documentation, with the
.I class-name
and
.I description
text.
The
.I class-name
is the name
of the exception that can be thrown by the method.
If this
class is not fully specified,
.B javadoc 
uses the search order
to look up this class.
.TP
.BI @version  " version-text"
Adds a "Version" subheading with the specified
.I version-text
to the generated docs when the 
.B \-version 
option is used.
The text has no special internal structure.
A doc comment can
contain at most one 
.B @version 
tag.
Version normally refers to
the version of the software (such as the JDK) that contains
this class or member.
.SS Where Tags Can Be Used
The following sections describe where the tags can be used.
Notice that these four tags can be used in all doc comments: 
.BR @see , 
.BR @link ,
.BR @since , 
.BR @deprecated .
.SS Overview Documentation Tags
Overview tags are tags that can appear in the documentation
comment for the overview page, which resides in the source file
typically named (\f3overview.html\f1).
As in any other documentation
comments, these tags must appear after the description.
.LP
NOTE: The {\f3@link\f1} tag has a bug in overview documents in JDK 1.2.
Text appears properly but has no link.
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
Overview Tags
=
@see
{@link}
@since
.TE
.RE
.SS Package Documentation Tags
Package tags are tags that can appear in the documentation comment
for a package (which resides in the source file 
named \f3package.html\f1).
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
Package Tags
=
@see
{@link}
@since
@deprecated
.TE
.RE
.SS Class and Interface Documentation Tags
The following are tags that can appear in the documentation
comment for a class or interface.
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
Class/Interface Tags
=
@see
{@link}
@since
@deprecated
@author
@version
.TE
.RE
.LP
An example of a class comment:
.LP
.RS
.ft 3
.nf
/**
* A class representing a window on the screen.
* For example:
* <pre>
*    Window win = new Window(parent);
*    win.show();
* </pre>
*
* @author  Sami Shaio
* @version 1.15, 08/03/00
* @see     java.awt.BaseWindow
* @see     java.awt.Button
*/
class Window extends BaseWindow {
...
}
.fi
.ft 1
.RE
.SS Field Documentation Tags
The following are the tags that can appear in the documentation
comment for a field.
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
Field Tags
=
@see
{@link}
@since
@deprecated
@serial
@serialField
.TE
.RE
.LP
An example of a field comment:
.LP
.RS
.ft 3
.nf
/**
* The X-coordinate of the component.
*
* @see #getLocation()
*/
int x = 1263732;
.fi
.ft 1
.RE
.SS Constructor and Method Documentation Tags
The following are the tags that can appear in the documentation
comment for a constructor or method.
.LP
.sp 1n
.RS
.TS
box;
cbp-1
l.
Method/Constructor Tags
=
@see
{@link}
@since
@deprecated
@param
@return
@throws (@exception)
@serialData
.TE
.RE
.LP
An example of a method doc comment:
.LP
.RS
.ft 3
.nf
/**
* Returns the character at the specified index. An index
* ranges from <code>0</code> to <code>length() - 1</code>.
*
* @param     index  the index of the desired character.
* @return    the desired character.
* @exception StringIndexOutOfRangeException
*              if the index is not in the range <code>0</code>
*              to <code>length()-1</code>.
* @see       java.lang.Character#charValue()
*/
public char charAt(int index) {
...
}
.fi
.ft 1
.RE
.SS Command Line Argument File
To shorten or simplify the
.B javadoc 
command, you can specify one or
more files that themselves contain one source filename or
package name per line.
When executing
.BR javadoc ,
pass in the filename
with the '\f3@\f1' leading character to specify it as a file list.
When
.B javadoc 
encounters an argument beginning with the character
'\f3@\f1',
it operates on the names in that file as if they were on the
command line.
.LP
For example, you can list all of the package names in a file named
packages.
This file might look like:
.LP
.RS
.ft 3
.nf
com.my.package1
com.my.package2
com.my.package3
.fi
.ft 1
.RE
.LP
You could then run
.B javadoc 
with:
.LP
.RS
.ft 3
.nf
example% javadoc \-d apidocs @packages
.fi
.ft 1
.RE
.SH OPTIONS
The
.B javadoc 
tool uses doclets to determine its output.
.B javadoc
uses the default standard doclet unless a custom doclet is
specified with the
.B \-doclet 
option.
.B javadoc 
provides a set of
command-line options that can be used with any doclet.
These options are described below under the sub-heading
.B javadoc 
Options.
The standard doclet provides an additional set of command-line
options that are described below, under the sub-heading Options
Provided by the Standard Doclet.
All option names are
case-insensitive, though their arguments can be case-sensitive.
.LP
The options are:
.LP
.sp 1n
.RS
.TS
lb lb lb.
\-1.1	\-header	\-package
\-author	\-help	\-private
\-bootclasspath	\-helpfile	\-protected
\-bottom	\-J	\-public
\-charset	\-link	\-serialwarn
\-classpath	\-linkoffline	\-sourcepath
\-d	\-locale	\-splitindex
\-docencoding	\-nodeprecated	\-stylesheetfile
\-doclet	\-nodeprecatedlist	\-title
\-docletpath	\-nohelp	\-use
\-doctitle	\-noindex	\-verbose
\-encoding	\-nonavbar	\-version
\-extdirs	\-notree	\-windowtitle
\-footer	\-overview
\-group
.TE
.RE
.SS javadoc Options
.TP
.BI \-overview  " path/filename"
Specifies that
.B javadoc 
should retrieve the text for the
overview documentation from the "source" file specified by
.I path/filename
and place it on the Overview page
(\f3overview-summary.html\f1).
The
.I path/filename
is relative to the
.BR \-sourcepath .
.LP
.RS 
While you can use any name you want for
.I filename
and place it
anywhere you want for
.IR path ,
a typical thing to do is to name it 
.B overview.html 
and place it in the source tree at the
directory that contains the topmost package directories.
In this location, no path is needed when documenting packages,
since
.B \-sourcepath 
will point to this file.
For example, if
the source tree for the
.B java.lang
package is
.BR /src/classes/java/lang/ , 
then you could place the overview
file at 
.BR /src/classes/overview.html . 
See Real World Example.
.LP
For information about the file specified by
.IR path/filename ,
see overview comment file.
.LP
Notice that the overview page is created only if you pass into
.B javadoc 
two or more package names.
For further explanation,
see HTML Frames.
.RE
.TP
.B \-public
Shows only public classes and members.
.TP
.B \-protected
Shows only protected and public classes and members.
This is the default.
.TP
.B \-package
Shows only package, protected, and public classes and
members.
.TP
.B \-private
Shows all classes and members.
.TP
.B \-help
Displays the online help, which lists these
.B javadoc 
and doclet command line options.
.TP
.BI \-doclet  " class"
Specifies the class file that starts the doclet used in
generating the documentation.
This doclet defines the content
and formats the output.
If the
.B \-doclet 
option is not used,
.B javadoc 
uses the standard doclet for generating the default
HTML format.
This class must contain the start(Root) method.
The path to this starting class is defined by the
.B \-docletpath
option.
.TP
.BI \-docletpath  " classpathlist"
Specifies the path to the doclet class file that is specified
with the 
.B \-doclet 
option.
This option is not necessary if the
doclet is already in the search path.
.TP
.B \-1.1
Generates the documentation with the appearance and
functionality of documentation generated by
.B javadoc 
1.1.
That is, the pages have a gray background, use images for headers,
have bulleted lists instead of tables, have a flat
destination directory structure, do not contain inherited
API, do not use HTML frames, and do not support inner
classes.
This option also automatically splits the index into
a separate file for each letter of the alphabet.
If you want
this appearance, this option has the advantage over
.B javadoc
1.1 of having some bugs fixed.
.LP
.RS 
Not all options work with the
.B \-1.1 
option.
To find out which
other options are available, execute:
.LP
.sp 1n
.RS
.ft 3
.nf
example% javadoc \-1.1 \-help
.fi
.ft 1
.RE
.LP
The
.B \-footer 
option shown in this list is functionally the
same as the
.B \-bottom 
option described elsewhere on this page.
The
.B \-title 
option is functionally the same as
.BR \-doctitle .
.RE
.TP
.BI \-sourcepath  " sourcepathlist"
Specifies the search paths for finding source files (\f3.java\f1)
when passing package names into the
.B javadoc 
command.
Notice that you can use the
.B \-sourcepath 
option only when passing
package names into the
.B javadoc 
command; it does not locate
.B .java 
files passed into the
.B javadoc 
command.
(To locate 
.B .java
files, cd to that directory or include the path ahead of each
file, as shown at Documenting One or More Classes.)  If
.B \-sourcepath 
is omitted,
.B javadoc 
uses the class path to find
the source files (see
.BR \-classpath ).
Therefore, the default
.B \-sourcepath 
is the value of class path.
If 
.B \-classpath 
is omitted and you are passing package names into
.BR javadoc ,
it looks in the current directory (and subdirectories) for the
source files.
.LP
.RS
Set
.I sourcepathlist
to the root directory of the source tree
for the package you are documenting.
For example, suppose you
want to document a package called
.B com.mypackage
whose source
files are located at:
.LP
.RS
.ft 3
.nf
/home/user/src/com/mypackage/*.java
.fi
.ft 1
.RE
.LP
In this case, you would specify the source path to
.BR /home/user/src , 
the directory that contains
.BR com/mypackage ,
and then supply the package name 
.BR com.mypackage :
.LP
.RS
.ft 3
.nf
example% javadoc \-sourcepath /home/user/src/ com.mypackage
.fi
.ft 1
.RE
.LP 
This is easy to remember by noticing that if you concatenate
the value of the source path and the package name together and
change the dot to a slash "/", you end up with the full path
to the package: 
.LP
.RS
.ft 3
/home/user/src/com/mypackage
.RE
.RE
.TP
.BI \-classpath  " classpathlist"
Specifies the paths where
.B javadoc 
looks for referenced
classes (\f3.class\f1); these are the documented classes plus any
classes referenced by those classes. 
.B javadoc 
searches in
all subdirectories of the specified paths.
The class path list
can contain multiple paths by separating them with a colon.
Follow the instructions in class path documentation for
specifying
.IR classpathlist .
.LP
.RS
If 
.B \-sourcepath 
is omitted, 
.B javadoc 
uses 
.B \-classpath 
to find
the source files as well as class files (for backward
compatibility).
Therefore, if you want to search for source
and class files in separate paths, use both
.B \-sourcepath 
and
.BR \-classpath .
.LP
For example, if you want to document
.BR com.mypackage ,
whose source files reside in the directory 
.BR /home/user/src/com/mypackage ,
and if this package relies on a library in 
.BR /home/user/lib , 
you would specify:
.LP
.RS
.ft 3
.nf
example% javadoc \-classpath /home/user/lib \-sourcepath \\
               /home/user/src com.mypackage
.fi
.ft 1
.RE
.LP
As with other tools, if you do not specify
.BR \-classpath ,
.B javadoc
uses the CLASSPATH environment variable, if it is set.
If both are not set,
.B javadoc
searches for classes from
the current directory.
.LP
For an in-depth description of how
.B javadoc
uses
.B \-classpath 
to find user classes as it relates to extension classes and
bootstrap classes, see How Classes Are Found.
.RE
.TP
.BI \-bootclasspath  " classpathlist"
Specifies the paths where the boot classes reside.
These are
nominally the Java platform classes.
The
.B bootclasspath
is part of
the search path
.B javadoc 
will use to look up source and class
files.
See How Classes Are Found for more details.
Separate directories in
.I dirlist
with colons (:).
.TP
.BI \-extdirs  " dirlist"
Specifies the directories where extension classes reside.
These are any classes that use the Java Extension mechanism.
The
.B extdirs
is part of the search path
.B javadoc 
uses to
look up source and class files.
See
.B \-classpath 
(above) for
more details.
Separate directories in
.I dirlist
with colons (:).
.TP
.B \-verbose
Provides more detailed messages while
.B javadoc 
is running.
Without the verbose option, messages appear for loading the
source files, generating the documentation (one message per
source file), and sorting.
The verbose option causes the
printing of additional messages specifying the number of
milliseconds to parse each java source file.
.TP
.BI \-locale  " language_country_variant"
Specifies the locale that
.B javadoc 
uses when generating
documentation.
The argument is the name of the locale, as
described in java.util.Locale documentation, such as en_US
(English, United States) or en_US_WIN (Windows variant).
.LP
.RS 
Specifying a locale causes
.B javadoc 
to choose the resource
files of that locale for messages (strings in the navigation
bar, headings for lists and tables, help file contents,
comments in
.BR stylesheet.css ,
and so forth).
It also specifies
the sorting order for lists sorted alphabetically, and the
sentence separator to determine the end of the first sentence.
It does not determine the locale of the doc comment
text specified in the source files of the documented classes.
.RE
.TP
.BI \-encoding  " name"
Specifies the source file encoding name, such as EUCJIS/SJIS.
If this option is not specified, the platform default
converter is used.
.TP
.BI \-J flag
Passes flag directly to the runtime system java that runs
.BR javadoc . 
Notice there must be no space between the J and the
flag.
For example, if you need to ensure that the system sets
aside 32 megabytes of memory in which to process the
generated documentation, then you would use this flag as
follows:
.LP
.RS 
.ft 3
.nf
example% javadoc \-J\-Xmx32m \-J\-Xms32m com.mypackage
.fi
.ft 1
.RE
.SS Options Provided by the Standard Doclet
.TP
.BI \-d  " directory"
Specifies the destination directory where
.B javadoc 
saves the generated HTML files.
(The "d" means "destination.")  Omitting
this option causes the files to be saved to the current directory.
The value
.I directory
can be absolute or relative to
the current working directory.
For example, the following
generates the documentation for the
.B com.mypackage
package and
saves the results in the 
.B /home/user/doc/ 
directory:
.LP
.RS 
.ft 3
.nf
example% javadoc \-d /home/user/doc com.mypackage
.fi
.ft 1
.RE
.TP
.B \-use
Includes one "Use" page for each documented class and
package.
The page describes what packages, classes, methods,
constructors, and fields use any API of the given class or package.
Given class C, things that use class C would include
subclasses of C, fields declared as C, methods that return C,
and methods and constructors with parameters of type C.
.LP
.RS 
For example, look at what might appear on the "Use"
page for String.
The
.B getName()
method in the
.B java.awt.Font
class returns type String.
Therefore,
.B getName()
uses String,
and you will find that method on the "Use" page for String.
.LP
Notice that this page documents only uses of the API, not the
implementation.
If a method uses String in its implementation
but does not take a string as an argument or return a string,
that is not considered a "use" of String.
.LP
You can access the generated "Use" page by first going to the
class or package, then clicking on the "Use" link in the
navigation bar.
.RE
.TP
.B \-version
Includes the 
.B @version 
text in the generated docs.
This text is omitted by default.
.TP
.B \-author
Includes the 
.B @author 
text in the generated docs.
.TP
.B \-splitindex
Splits the index file into multiple files, alphabetically,
one file per letter, plus a file for any index entries that
start with non-alphabetical characters.
.TP
.BI \-windowtitle  " title"
Specifies the title to be placed in the HTML 
.B <title> 
tag.
This appears in the window title and in any browser bookmarks
(favorite places) that someone creates for this page.
This title should not contain any HTML tags, as the browser cannot
properly interpret them.
Any internal quotation marks
within
.I title
might have to be escaped.
If 
.B \-windowtitle 
is omitted,
.B javadoc 
uses the value of
.B \-doctitle
for this option.
.TP
.BI \-doctitle  " title"
Specifies the title to be placed near the top of the overview
summary file.
The title is placed as a centered,
level-one heading directly beneath the upper navigation bar.
.I title
can contain HTML tags and white space, though if it
does, it must be enclosed in quotes.
Any internal quotation
marks within
.I title
might have to be escaped.
.TP
.BI \-title  " title"
This option no longer exists.
It existed only in Beta versions of
.B javadoc 
1.2.
It has been renamed to
.BR \-doctitle .
This option was renamed to make it clear that it defines
the document title rather than the window title.
.TP
.BI \-header  " header"
Specifies the header text to be placed at the top of each
output file.
The header is placed to the right of the
upper navigation bar.
.I header
can contain HTML tags and white
space, though if it does, it must be enclosed in quotes.
Any internal quotation marks within 
.I header
might have to be escaped.
.TP
.BI \-footer  " footer"
Specifies the footer text to be placed at the bottom of each
output file.
The footer is placed to the right of the
lower navigation bar.
.I footer
can contain HTML tags and white
space, though if it does, it must be enclosed in quotes.
Any internal quotation marks within
.I footer
might have to be escaped.
.TP
.BI \-bottom  " text"
Specifies the text to be placed at the bottom of each output file.
The text is placed at the bottom of the page,
below the lower navigation bar.
.I text
can contain HTML
tags and white space, though if it does, it must be enclosed
in quotes.
Any internal quotation marks within
.I text
might have
to be escaped.
.TP
.BI \-link  " docURL"
Creates links to already existing
\f3javadoc\f1-generated
documentation of external referenced classes.
The argument
.I docURL
is the URL for the 
\f3javadoc\f1-generated
external documentation you want to link to.
This location can be a
relative or absolute URL.
.LP
.RS 
In other words, this option enables you to link to classes
referenced by your code but not documented in the
current
.B javadoc 
run.
For these links to go to valid pages,
you must know where those HTML pages are located and specify
that location with
.IR docURL .
This allows, for instance, third
party documentation to link to 
.B java.* 
documentation on
.BR http://java.sun.com .
Another use is for cross-links
between sets of packages: Execute
.B javadoc 
on one set of
packages, then run
.B javadoc 
again on another set of packages,
creating links both ways between both sets.
A third use is as
a "hack" to update docs: Execute
.B javadoc 
on a full set of
packages, then run
.B javadoc 
again on only the smaller set of
changed packages, so that the updated files can be inserted
back into the original set.
(This is done to save time, but
can be tricky; if you add or remove API from the subset,
there will be missing or broken links in the index.)
.LP
Use the 
.B \-link 
option as follows:
.LP
.TP 2
\(bu
Omit the 
.B \-link 
option for
.B javadoc 
to create links only
to API within the documentation it is generating in the
current run.  (Without the 
.B \-link 
option,
.B javadoc 
does not
create links to documentation for external references,
because it does not know if, or where, that
documentation exists.)
.LP
.TP 2
\(bu
Include the 
.B \-link 
option for
.B javadoc 
to also create
links to documentation at location
.I docURL
for external referenced classes.
.LP
Notice that if the URL is on the World Wide Web,
.B javadoc 
must have a web connection in order to access the
.B package-list
when generating the documentation.
If you do not have access, use 
.B \-linkoffline 
instead.
.LP
.B How a Class Must be Referenced
.LP
For a link to an external referenced class to actually appear,
the class must be referenced in a particular way.
It is not sufficient for it to be referenced
in the body of a method.
It must be referenced in either an
import statement or in a declaration.
Here are examples of how the class
.B java.lang.SecurityManager
can be referenced: 
.TP 2
\(bu
In an explicit import statement:
.sp 1n
.ti +3
.B import java.lang.SecurityManager;
.sp 1n
A wildcard import statement does not work (such as
.BR import java.lang.* ). 
.LP
.TP 2
\(bu
In the return type or parameter type of a method:
.sp 1n
.ti +3
.B void foo(SecurityManager sm) {} 
.LP
.TP 2
\(bu
In an implements, extends or throws statement:
.sp 1n
.ti +3
.B public abstract class MyClass extends SecurityManager {} 
.LP
An important corollary is that when you use the
.B \-link
option, there will probably be many links that do not
appear due to this constraint.
(The text would appear without a hypertext link.)  The
only way to find the
missing links would be by visual inspection.
The most innocuous way to properly reference a class and
thereby add the link would be to import that class, as shown above. 
.LP
.B Package List
.LP
The 
.B \-link 
option requires that a file named
.BR package-list , 
which is generated by 
.BR javadoc , 
exist at the URL
you specify with 
.BR \-link . 
The 
.B package-list 
file is a simple
text file that lists the names of packages documented at that
location.
How
.B javadoc
uses the package list is described below.
.LP
For example, the package list for the Java Platform 1.2 API
is located at
.LP
.RS
http://java.sun.com/products/jdk/1.2/docs/\\
               api/package-list
.RE
.LP
It starts out as follows:
.LP
.RS
.ft 3
.nf
java.applet
java.awt
java.awt.color
java.awt.datatransfer
java.awt.dnd
java.awt.event
java.awt.font
etc.
.fi
.ft 1
.RE
.LP
When
.B javadoc 
is run without the 
.B \-link 
option as it generates
documentation, when it encounters a name that belongs to an
external referenced class, it prints the name with no link.
However, when the 
.B \-link
option is used,
.B javadoc 
searches the
.B package-list 
file at the specified docURL location for that
package name.
If it finds the package name, it prefixes the
name with that URL.
(If the URL is relative and the 
.B \-d
destination directory option is relative,
.B javadoc
prepends the relative path of the destination directory to the URL so
that links work from the destination directory.)
.LP
In order for there to be no broken links, all of the
documentation for the external references must exist at the
specified URLs.
.B javadoc 
does not check that these pages exist, only that the 
.B package-list 
exists. 
.LP
The 
.B package-list 
file is created but is empty if the argument to
.B javadoc 
is source files rather than packages.
.LP
For example, the following command causes
.B javadoc
to look for a 
.B package-list 
file at the given URL, reads in
the package names in that file, and then uses the given URL
when adding links to API in those external packages:
.LP
.RS
.ft 3
.nf
example% javadoc \-link \\
   http://java.sun.com/products/jdk/1.2/docs/api com.mypackage
.fi
.ft 1
.RE
.LP
.B Multiple Links
.LP
You can supply multiple-link options to
link to any number of external generated documents.
Known Bug: Javadoc 1.2 has a known bug that prevents you from
supplying more than one 
.B \-link 
command.
This should be fixed in a future release.
.LP
Specify a different link option for each external document to
link to:
.LP
.RS
.ft 3
.nf
example% javadoc \-link docURL1 \-link docURL2 ... \\
   \-link docURLn com.mypackage
.fi
.ft 1
.RE
.LP
where
.BR docURL1 ,
.BR docURL2 ",  ..."
.B docURLn
point respectively to
the roots of external documents, each of which contains a
file named 
.BR package-list .
.LP
.B Cross-links
.LP
Notice that "bootstrapping" might be required when
cross-linking two or more documents that have not been previously
generated.
In other words, if 
.B package-list 
does not
exist for either document, when you run
.B javadoc 
on the first
document, the 
.B package-list 
does not yet exist for the second
document.
Therefore, to create the external links, you must
rree-generate the first document after generating the second
document.
.LP
In this case, the purpose of first generating a document is
to create its 
.B package-list 
(or you can create it by hand
if you are certain of the package names).
Then generate the
second document with its external links.
.B javadoc 
prints a
warning if a needed external 
.B package-list 
file does not exist.
.LP
.B Updating Docs
.LP
The third use for the 
.B \-link 
option is useful if
your project has dozens or hundreds of packages; if you have
already run
.B javadoc 
on the entire tree; and now, in a
separate run, you want to quickly make some small changes and
re-run
.B javadoc 
on just a small portion of the source tree.
This is somewhat of a hack in that it works properly only if
your changes are only to doc comments and not to signatures.
If you were to add, remove, or change any signatures from the
source code, then broken links could show up in the index,
package tree, inherited member lists, use page, or other
places.
.LP
First, you create a new destination directory for this new
small run and set 
.B \-link 
and 
.B \-d 
to that same relative path.
If the original docs are in a directory named
.BR html :
.LP
.RS
.ft 3
.nf
example% javadoc \-d update \-linkoffline . html com.mypackage
.fi
.ft 1
.RE
.LP
When
.B javadoc 
is done, copy these generated files in
.B update
over the original files in
.BR html .
.LP
.B Background information:
In general, when
.B javadoc 
runs, it has
the potential to generate links for names that appear
throughout its generated pages, in signatures,
.B @see 
tags,
{\f3@link\f1} tags, summaries, hierarchies, the overview, and the
index.
Some of these links will go to pages generated in the
current run, while other links will potentially go to pages
not generated in the current run.
.RE
.TP
.BI \-linkoffline  " docURL  packagelistLoc"
This option is a variation of the
.B \-link
option.
Both options create links to documentation
for external referenced classes,
where the classes must be referenced
as described above in
.BR "How a Class Must Be Referenced" . 
.LP
.RS
You must use the
.B \-linkoffline
option instead of
.B \-link
if, at the time you run
.BR javadoc ,
the external document's
.B package-list
file does not exist at the
.I docURL
location (is "offline") but exists at a different location
.I packageListLoc
(typically local).
This can happen when the shell
in which you are running
.B javadoc
does not have web
access to the
.IR docURL .
Thus, if
.I docURL
is accessible only on the World Wide Web,
.B \-linkoffline
removes the constraint that
.B javadoc
must have a web connection when generating the documentation.
Examples are given below. 
.LP
You can specify multiple
.B \-linkoffline
options in a given
.B javadoc
run.
(Prior to 1.2.2, it could be specified only once.) 
.LP
The arguments are: 
.TP 2
\(bu
.IR docURL :
The URL for the root location of the external
.BR javadoc -generated
documentation to which you want
to link.
This location can be an absolute or relative URL.
If it is relative, make it relative to the
destination directory (specified with
.BR \-d ). 
.TP 2
\(bu
.IR packagelistLoc :
The location to the directory containing the
.B package-list
file for the external documentation.
This can be a URL
.RB ( http:
or
.BR file: )
or file path, and can be absolute or relative.
If relative, make it relative to the current
directory from where
.B javadoc
was run.
Do not include the
.B package-list
filename. 
.LP
For example, if you want to link to the
.B java.lang package
at
.BR "http://java.sun.com/products/jdk/1.3/docs/api" ,
but your shell does not have web access, then you
could access the
.B package-list
file using
.BR "http://java.sun.com/products/jdk/1.3/docs/api/package-list" ,
save it to a local directory, and point
to this local copy with
.IR packagelistLoc .
.LP
If a
.B package-list file
does not yet exist,
but you know what package names your document will link to,
you can create your own copy of this file
by hand and specify its path with
.IR packagelistLoc .
This is useful when
you need to generate documentation that
links to new external documentation whose
package names you know, but which is not yet published.
This is also a way of creating a
.B package-list
file for linking to
documentation generated with
.B javadoc
1.0 or 1.1,
earlier versions where
.B package-list
files were not generated. 
.LP
Two companies can share their unpublished
.B package-list
files, enabling them to release their cross-linked
documentation simultaneously. 
.LP
As shown below, to use this option, specify
.IR docURL1 ,
the location of the
.BR javadoc -generated
documentation for external referenced classes, and
.IR packagelistLoc1 ,
the location of its
.B package-list
file.
Include
.B \-linkoffline
once for each generated document you
want to refer to (each option is shown on a
separate line for clarity): 
.LP
.RS
.ft 3
.nf
.ta 18n
example% javadoc	\-linkoffline docURL1 packagelistURL1 \\
	\-linkoffline docURL2 packagelistURL2 \\
.ft 1
	...
.fi
.RE
.LP
For example, the following command adds links pointing
to a document (whose root is specified by the first
argument), for packages listed in the
.B /jdk/package-list
file (as specified by the second argument).
It generates documentation for the
.B com.mypackage
package.
.LP
.RS
.ft 3
.nf
% javadoc \-linkoffline \\
       http://java.sun.com/products/jdk/1.3/docs/api \\
           /jdk com.mypackage
.fi
.ft 1
.RE
.LP
.RE
.TP
.BI \-group  " groupheading  packagepattern:packagepattern:..."
Separates packages on the overview page into whatever groups
you specify, one group per table.
You specify each group with
a different 
.B \-group 
option.
The groups appear on the page in
the order specified on the command line; packages are
alphabetized within a group.
For a given
.B \-group 
option, the
packages matching the list of
.I packagepattern
expressions appear in a table with the heading
.IR groupheading .
.RS 
.TP 2
\(bu
.I groupheading
can be any text, and can include white space.
This text is placed in the table heading for the group.
.TP 2
\(bu
.I packagepattern
can be any package name, or can be the
start of any package name followed by an asterisk (*).
The asterisk is a wildcard meaning "match any
characters".
This is the only wildcard allowed.
Multiple patterns can be included in a group by separating them
with colons (:).
.LP
NOTE: If using an asterisk in a pattern or pattern
list, the pattern list must be inside quotes, such
as "java.lang*:java.util".
.LP
If you do not supply any
.B \-group 
option, all packages are
placed in one group with the heading "Packages".
If the all
groups do not include all documented packages, any leftover
packages appear in a separate group with the heading "Other
Packages".
.LP
For example, the following option separates the four
documented packages into core, extension, and other packages.
Notice the trailing "dot" does not appear in "\f3java.lang*\f1";
including the dot, such as "\f3java.lang.*\f1", would omit the
.B java.lang
package:
.LP
.RS
.ft 3
.nf
example% javadoc \-group "Core Packages" "java.lang*:java.util" \\
    \-group "Extension Packages" "javax.*" \\
    java.lang java.lang.reflect java.util javax.servlet java.new
.fi
.ft 1
.RE
.LP
This results in the groupings:
.LP
.RS
.ft 3
.nf
Core Packages
  java.lang
  java.lang.reflect
  java.util
Extension Packages
  javax.servlet
Other Packages
  java.new
.fi
.ft 1
.RE
.RE
.TP
.B \-nodeprecated
Prevents the generation of any deprecated API at all in the
documentation.
This does what 
.B \-nodeprecatedlist 
does, plus it
does not generate any deprecated API throughout the rest of
the documentation.
This is useful when writing code and you
do not want to be distracted by the deprecated code.
.TP
.B \-nodeprecatedlist
Prevents the generation of the file containing the list of
deprecated APIs (\f3deprecated-list.html\f1) and the link in the
navigation bar to that page.
(However,
.B javadoc 
continues to
generate the deprecated API throughout the rest of the
document.)  This is useful if your source code contains no
deprecated API, and you want to make the navigation bar cleaner.
.TP
.B \-nosince
Omits from the generated docs
the "Since" sections associated with the
.B @since
tags. 
.TP
.B \-notree
Omits the class/interface hierarchy from the generated docs.
The hierarchy is produced by default.
.TP
.B \-noindex
Omits the index from the generated docs.
The index is
produced by default.
.TP
.B \-nohelp
Omits the HELP link in the navigation bars at the top and
bottom of each page of output.
.TP
.B \-nonavbar
Prevents the generation of the navigation bar, header and
footer, otherwise found at the top and bottom of the
generated pages.
Has no effect on the "bottom" option.
The
.B \-nonavbar 
option is useful when you are interested only in
the content and have no need for navigation, such as
converting the files to PostScript or PDF for print only.
.TP
.BI \-helpfile  " path/filename"
Specifies the path of an alternate help file
.I path/filename
that the HELP link in the top and bottom navigation bars link
to. Without this option,
.B javadoc 
automatically creates a help file 
.B help-doc.html 
that is hard-coded in
.BR javadoc . 
This option
enables you to override this default.
The file name can be any
name and is not restricted to \f3help-doc.html\f1;
.B javadoc 
will adjust the links in the navigation bar accordingly.
For example:
.LP
.RS 
.RS 
.ft 3
.nf
example% javadoc \-helpfile /home/doc/myhelp.html java.awt
.fi
.ft 1
.RE
.RE
.TP
.BI \-stylesheetfile  " path/filename"
Specifies the path of an alternate HTML stylesheet file.
Without this option,
.B javadoc 
automatically creates a
stylesheet file,
.BR stylesheet.css ,
that is hard-coded in
.BR javadoc .
This option enables you to override this default.
The file name can be any name and is not restricted to
.BR stylesheet.css .
For example:
.LP
.RS
.RS
.ft 3
.nf
example% javadoc \-stylesheetfile \\
            /home/doc/mystylesheet.css java.awt
.fi
.ft 1
.RE
.RE
.TP
.B \-serialwarn
Generates compile-time warnings for missing
.B @serial
tags.
By default,
.B javadoc
1.2.2 (and later versions) generates no serial warnings.
(This is a reversal from earlier versions.)  Use this option to
display the serial warnings, which helps
to properly document default serializable fields and
writeExternal methods.
.TP
.BI \-charset  " name"
Specifies the HTML character set for this document.
For example:
.LP
.RS
.RS
.ft 3
% javadoc \-charset "iso-8859-1" mypackage
.ft 1
.RE
.LP
would insert the following line in the head of every
generated page:
.RE
.LP
.RS
.ft 3
<META http-equiv="Content-Type" content="text/html; charset=iso-885 9-1">
.ft 1
.LP
This META tag is described in the HTML standard
(4197265 and 4137321).
.RE
.TP
.BI \-docencoding  " name"
Specifies the encoding of the generated HTML files.
.SH EXAMPLES
You can run
.B javadoc 
on entire packages or individual classes.
Each package name has a corresponding directory name.
In the following
examples, the source files are located at
.BR /home/src/java/awt/*java . 
The destination directory is 
.BR /home/html .
.SS Documenting One or More Packages
To document a package, the source files (*\f3.java\f1) for that package
must be located in a directory having the same name as the package.
If a package name is made up of several identifiers
(separated by dots), each identifier represents a different
directory.
Thus, all java.awt classes must reside in a directory named 
.BR java/awt/ . 
You can run
.B javadoc 
either of the following two
ways: by changing directories (with cd) or by using
.B \-sourcepath
option.
You cannot use wildcards to specify groups of packages.
.TP 2
\(bu
.B "Case 1 Changing to the package directory:"
Change to the
parent directory of the fully qualified package.
Then run
.BR javadoc , 
supplying names of one or more packages you want to document:
.LP
.RS 
.ft 3
.nf
example% cd /home/src/
example% javadoc \-d /home/html java.awt java.awt.event
.fi
.ft 1
.RE
.TP 2
\(bu
.B "Case 2 From any directory:"
In this case, it does not matter
what the current directory is.
Run
.B javadoc 
supplying
.B \-sourcepath 
with the parent directory of the fully qualified
package, and supply names of one or more packages you want to
document:
.LP
.RS 
.ft 3
.nf
example% javadoc \-d /home/html \-sourcepath /home/src \\
           java.awt java.awt.event
.fi
.ft 1
.RE
.LP
Both cases generate HTML-formatted documentation for the public
and protected classes and interfaces in packages
.B java.awt
and
.B java.awt.event
and save the HTML files in the specified
destination directory (\f3/home/html\f1).
Because two or more packages
are being generated, the document has three frames: for the list
of packages, the list of classes, and the main page.
.SS Documenting One or More Classes
The second way to run
.B javadoc
is by passing in one or more source
files (\f3.java\f1).
You can run
.B javadoc 
either of the following two
ways: by changing directories (with cd) or by
fully specifying
the path to the 
.B .java 
files.
Relative paths are relative to the
current directory.
The 
.B \-sourcepath 
option is ignored when
passing in source files.
You can use command line wildcards, such as asterisk (*),
to specify groups of classes.
.TP 2
\(bu
.B "Case 1 Changing to the source directory:"
Change to the
directory holding the
.B .java 
files.
Then run
.BR javadoc ,
supplying names of one or more source files you want to document.
.LP
.RS 
.ft 3
.nf
example% cd /home/src/java/awt
example% javadoc \-d /home/html Button.java Canvas.java \\
               Graphics*.java
.fi
.ft 1
.RE
.LP
.RS 2
This example generates HTML-formatted documentation for the
classes Button, Canvas, and classes beginning with Graphics.
Because source files rather than package names were passed in
as arguments to
.BR javadoc , 
the document has two frames, for
the list of classes and the main page.
.RE
.TP 2
\(bu
.B Case 2 Changing to the package root directory:
This is
useful for documenting individual source files from different
subpackages off the same root.
Change to the package root
directory, and supply the source files with paths from the root.
.LP
.RS 
.ft 3
.nf
example% cd /home/src/
example% javadoc \-d /home/html java/awt/Button.java \\
                 java/applet/Applet.java
.fi
.ft 1
.RE
.LP
.RS 2
This example generates HTML-formatted documentation for the
classes Button and Applet.
.RE
.TP 2
\(bu
.B Case 3 From any directory:
In this case, it does not matter
what the current directory is.
Run
.BR javadoc , 
supplying the
absolute path (or path relative to the current directory) to the
.B .java 
files you want to document:
.LP
.RS 
.ft 3
.nf
example% javadoc \-d /home/html /home/src/java/awt/Button.java \\
               /home/src/java/awt/Graphics*.java
.fi
.ft 1
.RE
.LP
.RS 2
This example generates HTML-formatted documentation for the class
.B Button
and classes beginning with
.BR Graphics .
.RE
.SS Documenting Both Packages and Classes
You can document entire packages and individual classes at the
same time.
Here is an example that mixes the two previous examples.
You can use 
.B \-sourcepath 
for the path to the packages but not for
the path to the individual classes:
.LP
.RS
.ft 3
.nf
example% javadoc \-d /home/html \-sourcepath /home/src java.awt \\
               /home/src/java/applet/Applet.java
.fi
.ft 1
.RE
.LP
This example generates HTML-formatted documentation for the
package
.B java.awt and
.B class Applet.
(\f3javadoc\f1 determines the package
name for
.B Applet
from the package declaration, if any, in the
.B Applet.java 
source file.)
.SS  Real World Example
.B javadoc 
has many useful options, some of which are more commonly
used than others.
Here is an example of a command used to run
.B javadoc
on the Java platform API,
using 180MB of memory to generate the documentation
for the approximately 1500 public and protected classes
in the Java 2 Platform, Standard Edition, v1.2.
.LP
The same example is shown twice, first as executed on the
.IR "command line" ,
then as executed from a
.IR makefile .
It uses absolute paths in the option arguments, which enables
the same
.B javadoc
command to be run from any directory.
.LP
.B Command Line Example
.LP
This command line example is over 900 characters,
which is too long for some shells, such as DOS.
You can write
a shell script instead to execute this command. 
.LP
.RS
.ft 3
.nf
.if t .ta 36
.if n .ta 32
% javadoc \-sourcepath /java/jdk/src/share/classes	\\
.in +2
.if t .ta 34
.if n .ta 30
\-overview /java/jdk/src/share/classes/overview.html	\\
\-d /java/jdk/build/api	\\
\-use	\\
\-splitIndex	\\
\-windowtitle 'Java 2 Platform v1.2 API Specification'	\\
\-doctitle 'Java<sup><font size="-2">TM</font>	\\
   </sup> 2 Platform v1.2 API Specification'	\\
\-header '<b>Java 2 Platform </b><br><font size="-1">v1.2</font>	\\
.in
.if t .ta 34
.if n .ta 30
.ti +2
\-bottom '<font size="-1">	\\
.if t .ta 36
.if n .ta 32
  <a href="http://java.sun.com/cgi-bin/bugreport.cgi">	\\
  Submit a bug or feature</a><br><br>Java is a trademark or	\\
  registered trademark of Sun Microsystems, Inc. in the US	\\
  and other countries.<br>Copyright 1993-2001	\\
  Sun Microsystems, Inc., 901 San Antonio Road,<br>	\\
  Palo Alto, California, 94303, U.S.A.	\\
  All Rights Reserved.</font>'	\\
.in +2
.if t .ta 34
.if n .ta 30
\-group "Core Packages" "java.*:com.sun.java.*:org.omg.*"	\\
\-group "Extension Packages" "javax.*"	\\
\-J\-Xmx180m	\\
@filelist
.in
.fi
.LP
where
.B filelist
is the name of a file containing the packages to process,
such as
.BR "java.applet java.lang" .
None of the options should contain any
newline characters between the single quotes.
(For example, if you copy and paste this example,
delete the newline characters from the
.B \-bottom
option.)  See the other notes listed below. 
.RE
.LP
.B Makefile Example
.LP
This is an example of a GNU makefile.
For an example of a Windows makefile, see
.BR "Creating a makefile for Windows" . 
.LP
.RS
.ft 3
.nf
.if t .ta 22
.if n .ta 30
example% javadoc \-sourcepath $(SRCDIR)	\\  /* Sets path for source files  */
.if t .ta 20
.if n .ta 28
.in +2
\-overview $ (SCRDIR) /overview.html	\\  /* Sets file for overview text     */
\-d /java/jdk/build/api	\\  /* Sets destination directory */
\-use	\\  /* Adds "Use" files      */
\-splitIndex	\\  /* Splits index A-Z      */
\-windowtitle $(WINDOWTITLE)	\\  /* Adds a window title   */
\-doctitle $(DOCTITLE)	\\  /* Adds a doc title      */
\-header $(HEADER)	\\  /* Adds running header text       */
\-bottom $(BOTTOM)	\\  /* Adds text at bottom            */
\-group $(GROUPCORE)	\\  /* Core heading for overview page */
\-group $(GROUPEXT)	\\  /* Ext heading for overview page  */
.if n .ta 37
\-J\-Xmx180m	\\  /* Sets memory to 180MB */
java.lang java.lang.reflect	\\  /* Sets packages to document  */
java.util java.io java.net
java.applet
.in

WINDOWTITLE = 'Java 2 Platform v1.2 API Specification'
DOCTITLE = 'Java<sup><font size="-2">TM</font></sup> 2 Platform 1.2 \\
                 API Specification'
HEADER = '<b>Java 2 Platform</b><br><font size="-1">v1.2</font>'
.if t .ig IG
BOTTOM = '<font size="-1"><a href="http://java.sun.com/cgi-bin/ \\
              bugreport.cgi">Submit a bug or feature</a><br><br>Java \\
              is a trademark or registered trademark of Sun \\
              Microsystems, Inc. in the US and other countries.<br> \\
              Copyright 1993-2001 Sun Microsystems, Inc. 901 San \\
              Antonio Road,<br>Palo Alto, California, 94303, U.S.A. \\
              </font>'
.IG
.if n .ig IG
BOTTOM = '<font size="-1"><a href="http://java.sun.com/cgi-bin/bugreport.cgi"> \\
              Submit a bug or feature</a><br><br>Java is a trademark or registered \\
              trademark of Sun Microsystems, Inc. in the US and other countries.<br> \\
              Copyright 1993-2001 Sun Microsystems, Inc. 901 San Antonio Road,<br> \\
              Palo Alto, California, 94303, U.S.A.</font>'
.IG
GROUPCORE = '"Core Packages" "java.*:com.sun.java.*:org.omg.*"
GROUPEXT  = '"Extension Packages" "javax.*"'
SRCDIR = '/java/jdk/1.2/src/share/classes'
.fi
.ft 1
.LP
Single quotes are used to surround makefile argument.
.LP
.B NOTE:
.LP
.TP 2
\(bu
If you omit the
.B \-windowtitle
option,
.B javadoc
copies the doc title to the window title.
The
.B \-windowtitle
text is basically the same as the
.B \-doctitle
but without HTML tags, to prevent those tags from appearing as raw
text in the window title. 
.TP
\(bu
If you omit the
.B \-footer
option, as done here,
.B javadoc
copies the header text to the footer.
.TP
\(bu
Other important options you might want to
use but not needed in this example are
.B \-classpath
and
.BR \-link . 
.SH "ENVIRONMENT VARIABLES"
.TP 20
.SB CLASSPATH
Environment variable that provides the path that
.B javadoc
uses to find user class files.
This environment variable is
overridden by the
.B \-classpath 
option.
Separate your directories
with a colon, as for example:
.RS 20
.sp 1n
.B .:/home/classes:/usr/local/java/classes
.RE
.SH TROUBLESHOOTING
There is currently no documentation for
.B javadoc
error messages.
Troubleshooting tips can be found on the
.BR "Javadoc FAQ" . 
.SH SEE ALSO
.LP
.BR javac (1), 
.BR java (1), 
.BR jdb (1), 
.BR javah (1),
.BR javap (1),
.LP 
See (or search
.BR java.sun.com )
for the following:
.TP 10
.B The Javadoc Home Page @
http://java.sun.com/products/jdk/javadoc/index.html
.TP 10
.B Javadoc Enhancements @
http://java.sun.com/j2se/1.3/docs/tooldocs/javadoc/index.html
.TP 10
.B Javadoc FAQ @
http://java.sun.com/products/jdk/javadoc/faq.html
.TP 10
.B How to Write Doc Comments for Javadoc @ 
http://java.sun.com/products/jdk/javadoc/writingdoccomments.html
.TP 10
.B How Classes Are Found @ 
http://java.sun.com/j2se/1.3/docs/tooldocs/findingclasses.html#srcfiles
