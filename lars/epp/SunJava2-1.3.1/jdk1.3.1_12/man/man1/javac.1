'\" t
.\"
.\" Copyright 2002 Sun Microsystems, Inc. All rights reserved.
.\" SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
.\"
.TH javac 1 "13 June 2000"
.SH NAME
javac \- Java compiler
.SH SYNOPSIS
.B javac 
[ 
.BI \-bootclasspath " bootclasspath"
]
.if n .ti +5n
[
.BI \-classpath " classpath"
]
[
.BI \-d " directory"
]
.ti +5n
[
.B \-deprecation
] [
.B \-encoding
] [
.BI \-extdirs " directories"
]
.ti +5n
[
.B \-g
| 
.B \-g:none
|
.BI \-g: keyword-list
] [
.BI \-J option
]
.if n .ti +5n
[
.B \-nowarn
] [
.B \-O
]
.if t .ti +5n
[
.BI \-sourcepath " sourcepath"
]
.if n .ti +5n
[
.BI \-target " version"
] [
.B \-verbose
] [
.B \-X
] [
.B \-Xdepend
]
.ti +5n
[
.B \-Xstdout
] [
.B \-Xverbosepath
]
.if n .ti +5n
[ 
.I sourcefiles 
] [ 
.I @files 
]
.SH PARAMETERS
Options may be in any order.
For a discussion of
parameters which apply to a specific option, see
.B OPTIONS
below.
.TP 15
.I sourcefiles
One or more source files to be compiled (such as
\f3MyClass.java\f1).
.TP 15
\f3@\f1\f2files\f1
One or more files that list source files.
.SH DESCRIPTION
.IX "Java compiler" "" "Java compiler \(em \fLjavac\fP"
.IX "javac" "" "\fLjavac\fP \(em Java compiler"
The
.B javac 
tool reads class and interface definitions, written in
the Java programming language, and compiles them into bytecode
class files.
.LP
There are two ways to pass source code file names to 
.BR javac :
.TP 2
\(bu
For a small number of source files, simply list the file
names on the command line.
.TP 2
\(bu
For a large number of source files, list the the file names
in a file, separated by blanks or line breaks. Then use the
list file name on the 
.B javac 
command line, preceded by an @
character.
.LP
Source code file names must have 
.B .java 
suffixes, class file names
must have
.B .class
suffixes, and both source and class files must
have root names that identify the class.
For example, a class
called
.B MyClass
would be written in a source file called
.B MyClass.java 
and compiled into a bytecode class file called
.BR MyClass.class .
.LP
Inner class definitions produce additional class files.
These class files have names combining the inner and outer class names,
such as 
.BR MyClass$MyInnerClass.class .
.LP
You should arrange source files in a directory tree that reflects
their package tree.
For example, if you keep all your source files in 
.BR /workspace , 
the source code for 
.B com.mysoft.mypack.MyClass
should be in 
.BR /workspace/com/mysoft/mypack/MyClass.java .
.LP
By default, the compiler puts each class file in the same
directory as its source file.
You can specify a separate
destination directory with
.B \-d 
(see 
.BR  OPTIONS , 
below).
.SS Searching for Types
.IX "javac" "Searching for Types" "\fLjavac\fP \(em Java compiler"
When compiling a source file, the compiler often needs information
about a type it does not yet recognize.
The compiler needs type
information for every class or interface used, extended, or
implemented in the source file.
This includes classes and
interfaces not explicitly mentioned in the source file but which
provide information through inheritance.
.LP
For example, when you subclass 
.BR java.applet.Applet , 
you are also
using Applet's ancestor classes: 
.BR java.awt.Panel ,
.BR java.awt.Container , 
.BR java.awt.Component , 
and 
.BR java.awt.Object .
.LP
When the compiler needs type information, it looks for a source
file or class file which defines the type.
The compiler searches
first in the bootstrap and extension classes, then in the user
class path.
The user class path is defined by setting the
.SB CLASSPATH 
environment variable or by using the
.B \-classpath 
command line option.
(For details, see 
.BR "Setting the Class Path" .)
If you use the 
.B \-sourcepath 
option, the compiler
searches the indicated path for source files; otherwise the
compiler searches the user class path both for class files and
source files.
You can specify different bootstrap or extension
classes with the 
.B \-bootclasspath 
and 
.B \-extdirs 
options; see
.B Cross-Compilation Options
below.
.LP
A successful type search may produce a class file, a source file,
or both.
Here is how 
.B javac 
handles each situation:
.TP 2
\(bu
Search produces a class file but no source file: 
.B javac 
uses the class file.
.TP 2
\(bu
Search produces a source file but no class file: 
.B javac
compiles the source file and uses the resulting class file.
.TP 2
\(bu
Search produces both a source file and a class file:
.B javac
determines whether the class file is out of date.
If the class file is out of date, 
.B javac 
recompiles the source file
and uses the updated class file.
Otherwise, 
.B javac 
just uses the class file.
.RS 2
.LP
By default, 
.B javac 
considers a class file out of date only if
it is older than the source file.
(The 
.B \-Xdepend 
option specifies a slower but more reliable procedure.)
.RE
.LP
Note that 
.B javac 
can silently compile source files not mentioned on
the command line.
Use the 
.B \-verbose 
option to trace automatic compilation.
.SS File List
.IX "javac" "File List" "\fLjavac\fP \(em Java compiler"
To shorten or simplify the 
.B javac 
command, you may specify one or
more files that themselves contain one filename per line.
On the
command line, use the '@' character with the filename to specify
it as a file list.
When 
.B javac 
encounters an argument beginning
with the character `@', it operates on the filenames in that file
as if they had been on the command line.
.LP
For example, you can list all of the source file names in a file
named sourcefiles.
This file might look like:
.LP
.ft 3
.nf
    MyClass1.java
    MyClass2.java
    MyClass3.java
.fi
.ft 1
.LP
You could then run the compiler with:
.LP
.ft 3
.nf
   example% javac @sourcefiles
.fi
.ft 1
.SH OPTIONS
The compiler has a set of standard options that are supported on
the current development environment and will be supported in
future releases.
An additional set of non-standard options are
specific to the current virtual machine implementation and are
subject to change in the future.
Non-standard options begin with
.BR \-X .
.SS Standard Options
.IX "javac" "Standard Options" "\fLjavac\fP \(em Java compiler"
.TP
.BI \-classpath " classpath"
Sets the user class path, overriding the user class path in
the 
.SB CLASSPATH 
environment variable.
If neither 
.SB CLASSPATH 
or
.B \-classpath 
is specified, the user class path consists of the
current directory.
See
.B Setting the Class Path
for more details.
.RS
.LP
If the 
.B \-sourcepath 
option is not specified, the user class
path is searched for source files as well as class files.
.RE
.TP
.BI \-d " directory"
Sets the destination directory for class files.
If a class is part of a package, 
.B javac 
puts the class file in a
subdirectory reflecting the package name, creating
directories as needed.
For example, if you specify 
.B \-d /home/myclasses 
and the class is called
.BR com.mypackage.MyClass , 
then the class file is called
.BR /home/myclasses/com/mypackage/MyClass.class .
.RS
.LP
If 
.B \-d 
is not specified, 
.B javac 
puts the class file in the same
directory as the source file.
.LP
Note that the directory specified by 
.B \-d 
is not automatically
added to your user class path.
.RE
.TP
.B \-deprecation
Shows a description of each use or override of a deprecated
member or class.
Without 
.BR \-deprecation , 
.B javac 
shows the names
of source files that use or override deprecated members or
classes.
.TP
.B \-encoding
Sets the source file encoding name, such as EUCJIS/SJIS.
If
.B \-encoding 
is not specified, the platform default converter is
used.
.TP
.B \-g
Generates all debugging information, including local variables.
By default, only line number and source file
information is generated.
.TP
.B \-g:none
Does not generate any debugging information.
.TP
.BI \-g: keyword-list
Generates only some kinds of debugging information, specified
by a comma separated list of keywords. Valid keywords are:
.RS
.TP 10
.B source
Source file debugging information
.TP
.B lines
Line number debugging information
.TP
.B vars
Local variable debugging information
.RE
.TP 7
.B \-nowarn
Disables warning messages.
.TP
.B \-O
Note: The
.B \-O
option does nothing in the current implementation of
.BR javac .
Optimizes code for execution time.
Using the 
.B \-O 
option may
slow down compilation, produce larger class files, and make
the program difficult to debug.
.RS
.LP
Prior to JDK 1.2, the 
.B \-g 
and 
.B \-O 
options of 
.B javac 
could not be
used togther.
As of JDK 1.2, you can combine 
.B \-g 
and 
.BR \-O , 
but
you may get suprising results, such as missing variables or
relocated or missing code. 
.B \-O 
no longer automatically turns on 
.B \-depend 
or turns off 
.BR \-g . 
Also, 
.B \-O 
no longer enables
inlining across classes.
.RE
.TP
.BI \-sourcepath " sourcepath"
Specifies the source code path to search for class or interface
definitions.
As with the user class path, source path entries
are separated by colons
.RB ( : )
and can be directories,
.SM JAR
archives, or
.SM ZIP
archives.
If packages are used, the local
path name within the directory or archive must reflect the
package name.
.RS
.LP
Note that classes found through the classpath are subject to
automatic recompilation if their sources are found.
.RE
.TP
.B \-verbose
Verbose output.
This includes information about each class
loaded and each source file compiled.
.SS Cross-Compilation Options
.IX "javac" "Cross-Compilation Options" "\fLjavac\fP \(em Java compiler"
By default, classes are compiled against the bootstrap and
extension classes of the JDK that 
.B javac 
shipped with. But 
.B javac
also supports cross-compiling, where classes are compiled against
a bootstrap and extension classes of a different Java platform
implementation.
It is important to use
.B \-bootclasspath 
and 
.B \-extdirs
when cross-compiling; see
.B Cross-Compilation Example
below.
.TP
.BI \-bootclasspath " bootclasspath"
Cross-compiles against the specified set of boot classes.
As with the user class path, boot class path entries are
separated by colons
.RB ( : )
and can be directories,
.SM JAR
archives, or
.SM ZIP
archives.
.TP
.BI \-extdirs " directories"
Cross-compiles against the specified extension directories.
Directories are a colon-separated list of directories.
Each
.SM JAR
archive in the specified directories is searched for class files.
.TP
.BI \-target " version"
Generates class files that will work on
.SM VM\s0s
with the specified version.
The default is to generate class files to be
compatible with both 1.1 and 1.2
.SM VM\s0s.
The versions supported by
.B javac 
in JDK1.2 are:
.RS
.TP
1.1
Ensures that generated class files will be compatible
with 1.1 and 1.2
.SM VM\s0s.
This is the default.
.TP
1.2
Generates class files that will run on 1.2
.SM VM\s0s,
but will not run on 1.1
.SM VM\s0s.
.TP
1.3
Generates class files that run on 1.3 and later
.SM VM\s0s,
but will not run on 1.1
.SM VM\s0s.
.RE
.SS Non-Standard Options
.IX "javac" "Non-Standard Options" "\fLjavac\fP \(em Java compiler"
.TP
.BI \-J option
Passes option to the java launcher called by
.BR javac . 
For
example, 
.B \-J\-Xms48m 
sets the startup memory to 48 megabytes.
Although it does not begin with 
.BR \-X , 
it is not a `standard option' of 
.BR javac . 
It is a common convention for 
.B \-J 
to pass options to the underlying
.SM VM
executing applications written in Java.
.RS
.LP
Note that 
\s-1\f3CLASSPATH\s0\f1, 
.BR \-classpath , 
.BR \-bootclasspath , 
and 
.B \-extdirs
do not specify the classes used to run 
.BR javac . 
Fiddling with
the implementation of the compiler in this way is usually
pointless and always risky. If you do need to do this, use the 
.B \-J 
option to pass through options to the underlying java launcher.
.RE
.TP
.B \-X
Displays information about non-standard options and exit.
.TP
.B \-Xdepend
Recursively searches all reachable classes for more recent
source files to recompile.
This option will more reliably
discover classes that need to be recompiled, but can slow
down the compilation process drastically.
.TP
.B \-Xstdout
Sends compiler messages to
.BR System.out .
By default, compiler
messages go to
.BR System.err .
.TP
.B \-Xverbosepath
Describes how paths and standard extensions were searched to
find source and class files.
.SH EXAMPLES
.SS Compiling a Simple Program
.IX "javac" "Compiling a Simple Program" "\fLjavac\fP \(em Java compiler"
One source file, 
.BR Hello.java , 
defines a class called
.BR greetings.Hello . 
The greetings directory is the package directory
both for the source file and the class file and is off the current
directory.
This allows us to use the default user class path. It
also makes it unnecessary to specify a separate destination
directory with 
.BR \-d .
.LP
.ft 3
.nf
   example% ls
      greetings/
   example% ls greetings
      Hello.java
   example% cat greetings/Hello.java
      package greetings;
   
      public class Hello {
           public static void main(String[] args) {
              for (int i=0; i < args.length; i++) {
                  System.out.println("Hello " + args[i]);
              }
           }
      }
   example% javac greetings/Hello.java
   example% ls greetings
      Hello.class   Hello.java
   example% java greetings.Hello World Universe Everyone
      Hello World
      Hello Universe
      Hello Everyone
.fi
.ft 1
.SS Compiling Multiple Source Files
.IX "javac" "Compiling Multiple Source Files" "\fLjavac\fP \(em Java compiler"
This example compiles all the source files in the package
greetings.
.LP
.ft 3
.nf
   example% ls
      greetings/
   example% ls greetings
      Aloha.java     GutenTag.java     Hello.java      Hi.java
   example% javac greetings/*.java
   example% ls greetings
      Aloha.class    GutenTag.class    Hello.class     Hi.class
      Aloha.java     GutenTag.java     Hello.java      Hi.java
.fi
.ft 1
.SS Specifying a User Class Path
.IX "javac" "Specifying a User Class Path" "\fLjavac\fP \(em Java compiler"
Having changed one of the source files in the previous example, we
recompile it:
.LP
.ft 3
.nf
   example% pwd
      /examples
   example% javac greetings/Hi.java
.fi
.ft 1
.LP
Since
.B greetings.Hi
refers to other classes in the greetings
package, the compiler needs to find these other classes.
The example above works, because our default user class path happens
to be the directory containing the package directory.
But suppose
we want to recompile this file and not worry about which directory
we're in?
Then we need to add 
.B /examples 
to the user class path.
We can do this by setting \s-1\f3CLASSPATH\s0\f1, but here we'll use the
.B \-classpath 
option.
.LP
.ft 3
.nf
   example% javac \-classpath \\examples /examples/greetings/Hi.java
.fi
.ft 1
.LP
If we change
.B greetings.Hi
again, to use a banner utility, that
utility also needs to be accessible through the user class path.
.LP
.ft 3
.nf
   example% javac \-classpath /examples:/lib/Banners.jar \\
                     /examples/greetings/Hi.java
.fi
.ft 1
.LP
To execute a class in greetings, we need access both to greetings
and to the classes it uses.
.LP
.ft 3
.nf
   example% java \-classpath /examples:/lib/Banners.jar greetings.Hi
.fi
.ft 1
.SS Separating Source Files and Class Files
.IX "javac" "Separating Source Files and Class Files" "\fLjavac\fP \(em Java compiler"
It often makes sense to keep source files and class files in
separate directories, especially on large projects.
We use 
.B \-d 
to indicate the separate class file destination.
Since the source files are not in the user class path, we use 
.B \-sourcepath 
to help the compiler find them.
.LP
.ft 3
.nf
   example% ls
      classes/  lib/      src/
   example% ls src
      farewells/
   example% ls src/farewells
      Base.java      GoodBye.java
   example% ls lib
      Banners.jar
   example% ls classes
   example% javac \-sourcepath src \-classpath classes:lib/Banners.jar \\
      src/farewells/GoodBye.java \-d classes
   example% ls classes
      farewells/
   example% ls classes/farewells
      Base.class      GoodBye.class
.fi
.ft 1
.LP
Note that the compiler compiled src/farewells/Base.java, even
though we didn't specify it on the command line.
To trace automatic compiles, use the 
.B \-verbose 
option.
.SS Cross-Compilation Example
.IX "javac" "Cross-Compilation Example" "\fLjavac\fP \(em Java compiler"
Here we use the JDK 1.2 
.B javac 
to compile code that will run on a 1.1
.SM VM\s0.
.LP
.ft 3
.nf
   example% javac \-target 1.1 \-bootclasspath jdk1.1.7/lib/classes.zip \\
        \-extdirs "" OldCode.java
.fi
.ft 1
.LP
The 
.B \-target 1.1 
option ensures that the generated class files will
be compatible with 1.1
.SM VM\s0s.
In JDK1.2,
.B javac 
compiles for 1.1 by
default, so this option is not strictly required.
However, it is
good form because other compilers may have other defaults.
.LP
The JDK 1.2 
.B javac 
would also by default compile against its own
1.2 bootstrap classes, so we need to tell 
.B javac 
to compile against
JDK 1.1 bootstrap classes instead.
We do this with 
.B \-bootclasspath
and 
.BR \-extdirs . 
Failing to do this might allow compilation against a
1.2
.SM API
that would not be present on a 1.1
.SM VM
and fail at runtime.
.br
.ne 11
.SH SEE ALSO
.BR jar (1),
.BR java (1),
.BR javadoc (1),
.BR javah (1),
.BR javap (1),
.BR jdb (1)
.LP
See or search the Java web site for the following:
.TP 10
.B The Java Extensions Mechanism @
http://java.sun.com/j2se/1.3/docs/guide/extensions/index.html

