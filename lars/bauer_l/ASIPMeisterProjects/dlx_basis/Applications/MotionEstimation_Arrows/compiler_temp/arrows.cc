#define COSY

#ifndef COSY
#define GCC_FLOAT
#endif


#ifdef GCC_FLOAT
  #include <stdio.h>
  #include <math.h>
  typedef float tpoint;
  #define PI 3.1415926536
  // RAD -> DEG
  #define RAD_DEG_FACTOR (180/PI)
  #define FIX_POINT_FACTOR (1)
  #define t_print printf
#else
  #include "intToStr.h"
  #include "lib_lcd.h"
  typedef int tpoint;
  #define RAD_DEG_FACTOR (1)
  #define FIX_POINT_FACTOR (1<<16)
#endif

struct Point {
  tpoint x, y;
};

const int ARROW_LENGTH = 5;
const int ARROW_ANGLE = 45;


#ifndef GCC_FLOAT
int sinusLUT[] = { 0,       1144,    2287,    3430,    4572,    5712,    6850,    7987,    9121,    10252,
                   11380,   12505,   13626,   14742,   15855,   16962,   18064,   19161,   20252,   21336,
                   22415,   23486,   24550,   25607,   26656,   27697,   28729,   29753,   30767,   31772,
                   32768,   33754,   34729,   35693,   36647,   37590,   38521,   39441,   40348,   41243,
                   42126,   42995,   43852,   44695,   45525,   46341,   47143,   47930,   48703,   49461,
                   50203,   50931,   51643,   52339,   53020,   53684,   54332,   54963,   55578,   56175,
                   56756,   57319,   57865,   58393,   58903,   59396,   59870,   60326,   60764,   61183,
                   61584,   61966,   62328,   62672,   62997,   63303,   63589,   63856,   64104,   64332,
                   64540,   64729,   64898,   65048,   65177,   65287,   65376,   65446,   65496,   65526,
                   65536,   65526,   65496,   65446,   65376,   65287,   65177,   65048,   64898,   64729,
                   64540,   64332,   64104,   63856,   63589,   63303,   62997,   62672,   62328,   61966,
                   61584,   61183,   60764,   60326,   59870,   59396,   58903,   58393,   57865,   57319,
                   56756,   56175,   55578,   54963,   54332,   53684,   53020,   52339,   51643,   50931,
                   50203,   49461,   48703,   47930,   47143,   46341,   45525,   44695,   43852,   42995,
                   42126,   41243,   40348,   39441,   38521,   37590,   36647,   35693,   34729,   33754,
                   32768,   31772,   30767,   29753,   28729,   27697,   26656,   25607,   24550,   23486,
                   22415,   21336,   20252,   19161,   18064,   16962,   15855,   14742,   13626,   12505,
                   11380,   10252,   9121,    7987,    6850,    5712,    4572,    3430,    2287,    1144,
                   0,       -1143,   -2286,   -3429,   -4571,   -5711,   -6849,   -7986,   -9120,   -10251,
                   -11379,  -12504,  -13625,  -14741,  -15854,  -16961,  -18063,  -19160,  -20251,  -21335,
                   -22414,  -23485,  -24549,  -25606,  -26655,  -27696,  -28728,  -29752,  -30766,  -31771,
                   -32767,  -33753,  -34728,  -35692,  -36646,  -37589,  -38520,  -39440,  -40347,  -41242,
                   -42125,  -42994,  -43851,  -44694,  -45524,  -46340,  -47142,  -47929,  -48702,  -49460,
                   -50202,  -50930,  -51642,  -52338,  -53019,  -53683,  -54331,  -54962,  -55577,  -56174,
                   -56755,  -57318,  -57864,  -58392,  -58902,  -59395,  -59869,  -60325,  -60763,  -61182,
                   -61583,  -61965,  -62327,  -62671,  -62996,  -63302,  -63588,  -63855,  -64103,  -64331,
                   -64539,  -64728,  -64897,  -65047,  -65176,  -65286,  -65375,  -65445,  -65495,  -65525,
                   -65535,  -65525,  -65495,  -65445,  -65375,  -65286,  -65176,  -65047,  -64897  -64728,
                   -64539,  -64331,  -64103,  -63855,  -63588,  -63302,  -62996,  -62671,  -62327,  -61965,
                   -61583,  -61182,  -60763,  -60325,  -59869,  -59395,  -58902,  -58392,  -57864,  -57318,
                   -56755,  -56174,  -55577,  -54962,  -54331,  -53683,  -53019,  -52338,  -51642,  -50930,
                   -50202,  -49460,  -48702,  -47929,  -47142,  -46340,  -45524,  -44694,  -43851,  -42994,
                   -42125,  -41242,  -40347,  -39440,  -38520,  -37589,  -36646,  -35692,  -34728,  -33753,
                   -32767,  -31771,  -30766,  -29752,  -28728,  -27696,  -26655,  -25606,  -24549,  -23485,
                   -22414,  -21335,  -20251,  -19160,  -18063,  -16961,  -15854,  -14741,  -13625,  -12504,
                   -11379,  -10251,  -9120,   -7986,   -6849,   -5711,   -4571,   -3429,   -2286,   -1143,
};

int cosinusLUT[] = { 65536,  65526,  65496,  65446,  65376,  65287,  65177,  65048,  64898,  64729,
                     64540,  64332,  64104,  63856,  63589,  63303,  62997,  62672,  62328,  61966,
                     61584,  61183,  60764,  60326,  59870,  59396,  58903,  58393,  57865,  57319,
                     56756,  56175,  55578,  54963,  54332,  53684,  53020,  52339,  51643,  50931,
                     50203,  49461,  48703,  47930,  47143,  46341,  45525,  44695,  43852,  42995,
                     42126,  41243,  40348,  39441,  38521,  37590,  36647,  35693,  34729,  33754,
                     32768,  31772,  30767,  29753,  28729,  27697,  26656,  25607,  24550,  23486,
                     22415,  21336,  20252,  19161,  18064,  16962,  15855,  14742,  13626,  12505,
                     11380,  10252,  9121,   7987,   6850,   5712,   4572,   3430,   2287,   1144,
                     0,      -1143,  -2286,  -3429,  -4571,  -5711,  -6849,  -7986,  -9120,  -10251,
                     -11379, -12504, -13625, -14741, -15854, -16961, -18063, -19160, -20251, -21335,
                     -22414, -23485, -24549, -25606, -26655, -27696, -28728, -29752, -30766, -31771,
                     -32767, -33753, -34728, -35692, -36646, -37589, -38520, -39440, -40347, -41242,
                     -42125, -42994, -43851, -44694, -45524, -46340, -47142, -47929, -48702, -49460,
                     -50202, -50930, -51642, -52338, -53019, -53683, -54331, -54962, -55577, -56174,
                     -56755, -57318, -57864, -58392, -58902, -59395, -59869, -60325, -60763, -61182,
                     -61583, -61965, -62327, -62671, -62996, -63302, -63588, -63855, -64103, -64331,
                     -64539, -64728, -64897, -65047, -65176, -65286, -65375, -65445, -65495, -65525,
                     -65535, -65525, -65495, -65445, -65375, -65286, -65176, -65047, -64897, -64728,
                     -64539, -64331, -64103, -63855, -63588, -63302, -62996, -62671, -62327, -61965,
                     -61583, -61182, -60763, -60325, -59869, -59395, -58902, -58392, -57864, -57318,
                     -56755, -56174, -55577, -54962, -54331, -53683, -53019, -52338, -51642, -50930,
                     -50202, -49460, -48702, -47929, -47142, -46340, -45524, -44694, -43851, -42994,
                     -42125, -41242, -40347, -39440, -38520, -37589, -36646, -35692, -34728, -33753,
                     -32767, -31771, -30766, -29752, -28728, -27696, -26655, -25606, -24549, -23485,
                     -22414, -21335, -20251, -19160, -18063, -16961, -15854, -14741, -13625, -12504,
                     -11379, -10251, -9120,  -7986,  -6849,  -5711,  -4571,  -3429,  -2286,  -1143,
                     0,      1144,   2287,   3430,   4572,   5712,   6850,   7987,   9121,   10252,
                     11380,  12505,  13626,  14742,  15855,  16962,  18064,  19161,  20252,  21336,
                     22415,  23486,  24550,  25607,  26656,  27697,  28729,  29753,  30767,  31772,
                     32768,  33754,  34729,  35693,  36647,  37590,  38521,  39441,  40348,  41243,
                     42126,  42995,  43852,  44695,  45525,  46341,  47143,  47930,  48703,  49461,
                     50203,  50931,  51643,  52339,  53020,  53684,  54332,  54963,  55578,  56175,
                     56756,  57319,  57865,  58393,  58903,  59396,  59870,  60326,  60764,  61183,
                     61584,  61966,  62328,  62672,  62997,  63303,  63589,  63856,  64104,  64332,
                     64540,  64729,  64898,  65048,  65177,  65287,  65376,  65446,  65496,  65526
};

int arcustangensLUT[] = { 0,         2949120,   4157273,   4690087,   4978361,   5157032,   5278117,   5365426,   5431295,   5482729,
                          5523991,   5557818,   5586050,   5609966,   5630485,   5648281,   5663861,   5677616,   5689847,   5700794,
                          5710649,   5719568,   5727678,   5735085,   5741875,   5748123,   5753891,   5759232,   5764192,   5768811,
                          5773122,   5777155,   5780936,   5784489,   5787833,   5790985,   5793963,   5796780,   5799449,   5801981,
                          5804386,   5806674,   5808854,   5810932,   5812915,   5814811,   5816624,   5818360,   5820023,   5821619,
                          5823151,   5824623,   5826039,   5827401,   5828712,   5829976,   5831195,   5832371,   5833506,   5834603,
                          5835664,   5836689,   5837682,   5838643,   5839574,   5840476,   5841351,   5842200,   5843024,   5843824,
                          5844602,   5845357,   5846091,   5846806,   5847501,   5848177,   5848836,   5849477,   5850102,   5850712,
                          5851306,   5851885,   5852450,   5853002,   5853540,   5854066,   5854580,   5855082,   5855572,   5856051,
                          5856520,   5856979,   5857427,   5857866,   5858295,   5858716,   5859127,   5859531,   5859926,   5860313,
                          5860692,   5861064,   5861428,   5861785,   5862136,   5862480,   5862817,   5863148,   5863473,   5863792,
                          5864105,   5864413,   5864715,   5865011,   5865303,   5865589,   5865871,   5866147,   5866419,   5866687,
                          5866950,   5867208,   5867463,   5867713,   5867959,   5868201,   5868440,   5868674,   5868905,   5869133,
                          5869356,   5869577,   5869794,   5870008,   5870219,   5870426,   5870631,   5870832,   5871031,   5871227,
                          5871419,   5871610,   5871797,   5871982,   5872164,   5872344,   5872522,   5872697,   5872869,   5873039,
                          5873207,   5873373,   5873537,   5873698,   5873858,   5874015,   5874170,   5874324,   5874475,   5874624,
                          5874772,   5874918,   5875062,   5875204,   5875344,   5875483,   5875620,   5875756,   5875889,   5876022,
                          5876152,   5876282,   5876409,   5876535,   5876660,   5876783,   5876905,   5877026,   5877145,   5877263,
                          5877379,   5877495,   5877609,   5877721,   5877833,   5877943,   5878052,   5878160,   5878267,   5878373,
                          5878477,   5878581,   5878683,   5878785,   5878885,   5878984,   5879082,   5879180,   5879276,   5879371,
                          5879465,   5879559,   5879651,   5879743,   5879834,   5879923,   5880012,   5880100,   5880188,   5880274,
                          5880359,   5880444,   5880528,   5880611,   5880694,   5880775,   5880856,   5880936,   5881016,   5881094,
                          5881172,   5881249,   5881326,   5881402,   5881477,   5881552,   5881625,   5881699,   5881771,   5881843,
                          5881914,   5881985,   5882055,   5882124,   5882193,   5882262,   5882329,   5882396,   5882463,   5882529,
                          5882595,   5882659,   5882724,   5882788,   5882851,   5882914,   5882976,   5883038,   5883099,   5883160,
                          5883220,   5883280,   5883340,   5883398,   5883457,   5883515,   5883572,   5883629,   5883686,   5883742,
                          5883798,   5883853,   5883908,   5883963,   5884017,   5884070,   5884124,   5884177,   5884229,   5884281,
                          5884333,   5884384,   5884435,   5884486,   5884536,   5884586,   5884635,   5884684,   5884733,   5884782,
                          5884830,   5884877,   5884925,   5884972,   5885018,   5885065,   5885111,   5885157,   5885202,   5885247,
                          5885292,   5885336,   5885381,   5885425,   5885468,   5885511,   5885554,   5885597,   5885640,   5885682,
                          5885724,   5885765,   5885806,   5885848,   5885888,   5885929,   5885969,   5886009,   5886049,   5886088,
                          5886127,   5886166,   5886205,   5886243,   5886282,   5886320,   5886357,   5886395,   5886432,   5886469,
                          5886506,   5886542,   5886579,   5886615,   5886651,   5886686,   5886722,   5886757,   5886792,   5886827,
                          5886861,   5886896,   5886930,   5886964,   5886998,   5887031,   5887065,   5887098,   5887131,   5887164,
                          5887196,   5887228,   5887261,   5887293,   5887325,   5887356,   5887388,   5887419,   5887450,   5887481,
                          5887512,   5887542,   5887573,   5887603,   5887633,   5887663,   5887692,   5887722,   5887751,   5887781
};


// returns (in DEG) sin(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int sin(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return sinusLUT[alpha];
}

// returns (in DEG) sin(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int cos(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return cosinusLUT[alpha];
}

// returns (in DEG) atan(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int atan(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return arcustangensLUT[alpha];
}

/*
#include <stdio.h>
#include <math.h>
#define PI 3.1415926536
int main() {
  int i;
  for (i=0; i<360; i++) {
    printf("%i,\t", (int)((1<<16)*atan(i*PI/180)+0.5));
    if ((i+1)%10==0) printf("\n");
  }
  printf("\n");
  return 0;
}
*/
#endif


#ifdef GCC_FLOAT
int intToStr(int i, char* string) {
  sprintf(string, "%i", i);
  return 0;
}
#endif

int printInt(int a) {
  char tempString[20];
  intToStr(a, tempString);
  t_print(tempString);
  return 0;
}


int computeArrow(const struct Point* const from, const struct Point* const to, struct Point* leftWing, struct Point* rightWing) {
  tpoint deltaX, deltaY;
  tpoint angleOriginal, angleLeftWing, angleRightWing;

  deltaX = to->x - from->x;
  deltaY = to->y - from->y;
  t_print("delta X: ");
  printInt(deltaX);
  t_print("; deltaY: ");
  printInt(deltaY);
  t_print("; deltaX/deltaY: ");
  printInt(deltaX/deltaY);
  t_print("; atan(dx/dy): ");
#ifdef GCC_FLOAT
  printf("%f", atan(deltaX/deltaY));
#else
  printInt(atan(deltaX/deltaY));
#endif
  t_print(".\r\n");

  if (deltaX != 0) angleOriginal = atan(deltaY/deltaX) * RAD_DEG_FACTOR;
  else {
    if (deltaY > 0) angleOriginal = 90  * FIX_POINT_FACTOR;
    else angleOriginal = 270 * FIX_POINT_FACTOR;
  }
  t_print("angleOriginal: ");
  printInt(angleOriginal);
  t_print(" means: ");
  printInt(angleOriginal/FIX_POINT_FACTOR);
  t_print(".\r\n");

  angleLeftWing = angleOriginal + (180 - ARROW_ANGLE) * FIX_POINT_FACTOR;
  angleRightWing = angleOriginal + (180 + ARROW_ANGLE) * FIX_POINT_FACTOR;
  angleLeftWing /= FIX_POINT_FACTOR;
  angleRightWing /= FIX_POINT_FACTOR;
  /*
  printf("deltaX: %i, deltaY: %i, angleOriginal: %f, angleLeftWing: %f, angleRightWing: %f\n", (int)deltaX, (int)deltaY, angleOriginal, angleLeftWing, angleRightWing);
  printf("%f %f\n", angleLeftWing/RAD_DEG_FACTOR, cos(angleLeftWing/RAD_DEG_FACTOR));
  printf("AL*cos(left): %f, AL*sin(left): %f\n", ARROW_LENGTH * cos(angleLeftWing/RAD_DEG_FACTOR), ARROW_LENGTH * sin(angleLeftWing/RAD_DEG_FACTOR));
  */

  leftWing->x = ( (to->x * FIX_POINT_FACTOR) + ARROW_LENGTH * cos(angleLeftWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  leftWing->y = ( (to->y * FIX_POINT_FACTOR) + ARROW_LENGTH * sin(angleLeftWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  rightWing->x = ( (to->x * FIX_POINT_FACTOR) + ARROW_LENGTH * cos(angleRightWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  rightWing->y = ( (to->y * FIX_POINT_FACTOR) + ARROW_LENGTH * sin(angleRightWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  return 0;
}

int clearScreen() {
#ifdef GCC_FLOAT
  printf("\n----------------------------\n");
#else
  t_print("\r\n----------------------------\r\n");
  d_clear();
#endif
  return 0;
}

int drawLine(struct Point* const from, struct Point* const to) {
#ifdef GCC_FLOAT
  printf("(%i, %i)  -->  (%i, %i)\n", (int)from->x, (int)from->y, (int)to->x, (int)to->y);
#else
  t_print("(");
  printInt(from->x);
  t_print(", ");
  printInt(from->y);
  t_print(")  -->  (");
  printInt(to->x);
  t_print(", ");
  printInt(to->y);
  t_print(")\r\n");

  g_drawline(from->x, from->y, to->x, to->y);
#endif
  return 0;
}

#ifdef GCC_FLOAT
int wait(int delay) {
  return 0;
}
#else
extern int wait(int delay);
#endif

int main() {
  struct Point start, end, leftWing, rightWing;
#ifndef GCC_FLOAT
  t_print("Arrows:\r\n");
#endif
  start.x = 10;
  start.y = 10;
  end.y = 30;
  for (end.x=30; end.x<=30; end.x++) {
    computeArrow(&start, &end, &leftWing, &rightWing);
    clearScreen();
    drawLine(&start, &end);
    drawLine(&end, &leftWing);
    drawLine(&end, &rightWing);
    //wait(1000);
  }
  return 0;
}
