
#ifndef COSY
#define GCC_FLOAT
#endif

#ifdef GCC_FLOAT
  #include <stdio.h>
  #include <math.h>
  typedef float tpoint;
  #define PI 3.1415926536
  // RAD -> DEG
  #define RAD_DEG_FACTOR (180/PI)
  #define FIX_POINT_FACTOR (1)
#else
  #include "lib_lcd.h"
  #include "intToStr.h"
  typedef int tpoint;
  #define RAD_DEG_FACTOR (1)
  #define FIX_POINT_FACTOR (1<<16)
#endif

struct Point {
  tpoint x, y;
};

const int ARROW_LENGTH = 5;
const int ARROW_ANGLE = 45;


#ifndef GCC_FLOAT
int sinusLUT[] = { 0,       1144,    2287,    3430,    4572,    5712,    6850,    7987,    9121,    10252,
                   11380,   12505,   13626,   14742,   15855,   16962,   18064,   19161,   20252,   21336,
                   22415,   23486,   24550,   25607,   26656,   27697,   28729,   29753,   30767,   31772,
                   32768,   33754,   34729,   35693,   36647,   37590,   38521,   39441,   40348,   41243,
                   42126,   42995,   43852,   44695,   45525,   46341,   47143,   47930,   48703,   49461,
                   50203,   50931,   51643,   52339,   53020,   53684,   54332,   54963,   55578,   56175,
                   56756,   57319,   57865,   58393,   58903,   59396,   59870,   60326,   60764,   61183,
                   61584,   61966,   62328,   62672,   62997,   63303,   63589,   63856,   64104,   64332,
                   64540,   64729,   64898,   65048,   65177,   65287,   65376,   65446,   65496,   65526,
                   65536,   65526,   65496,   65446,   65376,   65287,   65177,   65048,   64898,   64729,
                   64540,   64332,   64104,   63856,   63589,   63303,   62997,   62672,   62328,   61966,
                   61584,   61183,   60764,   60326,   59870,   59396,   58903,   58393,   57865,   57319,
                   56756,   56175,   55578,   54963,   54332,   53684,   53020,   52339,   51643,   50931,
                   50203,   49461,   48703,   47930,   47143,   46341,   45525,   44695,   43852,   42995,
                   42126,   41243,   40348,   39441,   38521,   37590,   36647,   35693,   34729,   33754,
                   32768,   31772,   30767,   29753,   28729,   27697,   26656,   25607,   24550,   23486,
                   22415,   21336,   20252,   19161,   18064,   16962,   15855,   14742,   13626,   12505,
                   11380,   10252,   9121,    7987,    6850,    5712,    4572,    3430,    2287,    1144,
                   0,       -1143,   -2286,   -3429,   -4571,   -5711,   -6849,   -7986,   -9120,   -10251,
                   -11379,  -12504,  -13625,  -14741,  -15854,  -16961,  -18063,  -19160,  -20251,  -21335,
                   -22414,  -23485,  -24549,  -25606,  -26655,  -27696,  -28728,  -29752,  -30766,  -31771,
                   -32767,  -33753,  -34728,  -35692,  -36646,  -37589,  -38520,  -39440,  -40347,  -41242,
                   -42125,  -42994,  -43851,  -44694,  -45524,  -46340,  -47142,  -47929,  -48702,  -49460,
                   -50202,  -50930,  -51642,  -52338,  -53019,  -53683,  -54331,  -54962,  -55577,  -56174,
                   -56755,  -57318,  -57864,  -58392,  -58902,  -59395,  -59869,  -60325,  -60763,  -61182,
                   -61583,  -61965,  -62327,  -62671,  -62996,  -63302,  -63588,  -63855,  -64103,  -64331,
                   -64539,  -64728,  -64897,  -65047,  -65176,  -65286,  -65375,  -65445,  -65495,  -65525,
                   -65535,  -65525,  -65495,  -65445,  -65375,  -65286,  -65176,  -65047,  -64897  -64728,
                   -64539,  -64331,  -64103,  -63855,  -63588,  -63302,  -62996,  -62671,  -62327,  -61965,
                   -61583,  -61182,  -60763,  -60325,  -59869,  -59395,  -58902,  -58392,  -57864,  -57318,
                   -56755,  -56174,  -55577,  -54962,  -54331,  -53683,  -53019,  -52338,  -51642,  -50930,
                   -50202,  -49460,  -48702,  -47929,  -47142,  -46340,  -45524,  -44694,  -43851,  -42994,
                   -42125,  -41242,  -40347,  -39440,  -38520,  -37589,  -36646,  -35692,  -34728,  -33753,
                   -32767,  -31771,  -30766,  -29752,  -28728,  -27696,  -26655,  -25606,  -24549,  -23485,
                   -22414,  -21335,  -20251,  -19160,  -18063,  -16961,  -15854,  -14741,  -13625,  -12504,
                   -11379,  -10251,  -9120,   -7986,   -6849,   -5711,   -4571,   -3429,   -2286,   -1143,
};

int cosinusLUT[] = { 65536,  65526,  65496,  65446,  65376,  65287,  65177,  65048,  64898,  64729,
                     64540,  64332,  64104,  63856,  63589,  63303,  62997,  62672,  62328,  61966,
                     61584,  61183,  60764,  60326,  59870,  59396,  58903,  58393,  57865,  57319,
                     56756,  56175,  55578,  54963,  54332,  53684,  53020,  52339,  51643,  50931,
                     50203,  49461,  48703,  47930,  47143,  46341,  45525,  44695,  43852,  42995,
                     42126,  41243,  40348,  39441,  38521,  37590,  36647,  35693,  34729,  33754,
                     32768,  31772,  30767,  29753,  28729,  27697,  26656,  25607,  24550,  23486,
                     22415,  21336,  20252,  19161,  18064,  16962,  15855,  14742,  13626,  12505,
                     11380,  10252,  9121,   7987,   6850,   5712,   4572,   3430,   2287,   1144,
                     0,      -1143,  -2286,  -3429,  -4571,  -5711,  -6849,  -7986,  -9120,  -10251,
                     -11379, -12504, -13625, -14741, -15854, -16961, -18063, -19160, -20251, -21335,
                     -22414, -23485, -24549, -25606, -26655, -27696, -28728, -29752, -30766, -31771,
                     -32767, -33753, -34728, -35692, -36646, -37589, -38520, -39440, -40347, -41242,
                     -42125, -42994, -43851, -44694, -45524, -46340, -47142, -47929, -48702, -49460,
                     -50202, -50930, -51642, -52338, -53019, -53683, -54331, -54962, -55577, -56174,
                     -56755, -57318, -57864, -58392, -58902, -59395, -59869, -60325, -60763, -61182,
                     -61583, -61965, -62327, -62671, -62996, -63302, -63588, -63855, -64103, -64331,
                     -64539, -64728, -64897, -65047, -65176, -65286, -65375, -65445, -65495, -65525,
                     -65535, -65525, -65495, -65445, -65375, -65286, -65176, -65047, -64897, -64728,
                     -64539, -64331, -64103, -63855, -63588, -63302, -62996, -62671, -62327, -61965,
                     -61583, -61182, -60763, -60325, -59869, -59395, -58902, -58392, -57864, -57318,
                     -56755, -56174, -55577, -54962, -54331, -53683, -53019, -52338, -51642, -50930,
                     -50202, -49460, -48702, -47929, -47142, -46340, -45524, -44694, -43851, -42994,
                     -42125, -41242, -40347, -39440, -38520, -37589, -36646, -35692, -34728, -33753,
                     -32767, -31771, -30766, -29752, -28728, -27696, -26655, -25606, -24549, -23485,
                     -22414, -21335, -20251, -19160, -18063, -16961, -15854, -14741, -13625, -12504,
                     -11379, -10251, -9120,  -7986,  -6849,  -5711,  -4571,  -3429,  -2286,  -1143,
                     0,      1144,   2287,   3430,   4572,   5712,   6850,   7987,   9121,   10252,
                     11380,  12505,  13626,  14742,  15855,  16962,  18064,  19161,  20252,  21336,
                     22415,  23486,  24550,  25607,  26656,  27697,  28729,  29753,  30767,  31772,
                     32768,  33754,  34729,  35693,  36647,  37590,  38521,  39441,  40348,  41243,
                     42126,  42995,  43852,  44695,  45525,  46341,  47143,  47930,  48703,  49461,
                     50203,  50931,  51643,  52339,  53020,  53684,  54332,  54963,  55578,  56175,
                     56756,  57319,  57865,  58393,  58903,  59396,  59870,  60326,  60764,  61183,
                     61584,  61966,  62328,  62672,  62997,  63303,  63589,  63856,  64104,  64332,
                     64540,  64729,  64898,  65048,  65177,  65287,  65376,  65446,  65496,  65526
};

int arcustangensLUT[] = { 0,      1144,   2287,   3428,   4568,   5705,   6838,   7967,   9092,   10211,
                          11324,  12431,  13530,  14622,  15706,  16781,  17846,  18903,  19949,  20985,
                          22010,  23024,  24026,  25017,  25996,  26963,  27918,  28860,  29790,  30707,
                          31611,  32502,  33381,  34246,  35099,  35938,  36765,  37578,  38379,  39167,
                          39942,  40705,  41455,  42193,  42919,  43632,  44334,  45023,  45701,  46367,
                          47022,  47666,  48299,  48921,  49532,  50132,  50722,  51302,  51872,  52432,
                          52983,  53523,  54055,  54577,  55090,  55595,  56091,  56578,  57057,  57528,
                          57991,  58446,  58893,  59333,  59765,  60190,  60608,  61019,  61424,  61821,
                          62212,  62597,  62975,  63347,  63713,  64074,  64428,  64777,  65120,  65458,
                          65791,  66118,  66440,  66757,  67069,  67377,  67680,  67978,  68271,  68561,
                          68845,  69126,  69402,  69675,  69943,  70207,  70468,  70725,  70978,  71227,
                          71473,  71715,  71954,  72190,  72422,  72651,  72877,  73100,  73320,  73536,
                          73750,  73961,  74169,  74375,  74577,  74777,  74974,  75169,  75361,  75551,
                          75738,  75923,  76105,  76286,  76464,  76639,  76813,  76984,  77153,  77321,
                          77486,  77649,  77810,  77969,  78126,  78282,  78435,  78587,  78737,  78885,
                          79032,  79176,  79320,  79461,  79601,  79739,  79876,  80011,  80145,  80277,
                          80408,  80537,  80665,  80791,  80916,  81040,  81163,  81284,  81404,  81522,
                          81639,  81755,  81870,  81984,  82096,  82208,  82318,  82427,  82535,  82642,
                          82748,  82852,  82956,  83059,  83160,  83261,  83360,  83459,  83557,  83653,
                          83749,  83844,  83938,  84031,  84123,  84215,  84305,  84395,  84484,  84572,
                          84659,  84745,  84831,  84915,  84999,  85083,  85165,  85247,  85328,  85408,
                          85488,  85567,  85645,  85723,  85799,  85876,  85951,  86026,  86100,  86174,
                          86247,  86319,  86391,  86462,  86532,  86602,  86672,  86741,  86809,  86876,
                          86944,  87010,  87076,  87142,  87207,  87271,  87335,  87398,  87461,  87524,
                          87586,  87647,  87708,  87768,  87828,  87888,  87947,  88006,  88064,  88122,
                          88179,  88236,  88292,  88348,  88404,  88459,  88514,  88568,  88622,  88676,
                          88729,  88782,  88834,  88886,  88938,  88989,  89040,  89090,  89141,  89190,
                          89240,  89289,  89338,  89386,  89434,  89482,  89529,  89576,  89623,  89670,
                          89716,  89762,  89807,  89852,  89897,  89942,  89986,  90030,  90074,  90117,
                          90160,  90203,  90246,  90288,  90330,  90372,  90413,  90454,  90495,  90536,
                          90576,  90616,  90656,  90696,  90735,  90774,  90813,  90852,  90890,  90928,
                          90966,  91004,  91041,  91078,  91115,  91152,  91189,  91225,  91261,  91297,
                          91333,  91368,  91403,  91438,  91473,  91508,  91542,  91576,  91610,  91644,
                          91677,  91711,  91744,  91777,  91810,  91842,  91875,  91907,  91939,  91971,
                          92003,  92034,  92065,  92097,  92127,  92158,  92189,  92219,  92250,  92280,
                          92310,  92339,  92369,  92398,  92428,  92457,  92486,  92515,  92543,  92572
};

// returns (in DEG) sin(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int sin(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return sinusLUT[alpha];
}

// returns (in DEG) sin(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int cos(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return cosinusLUT[alpha];
}

// returns (in DEG) atan(alpha)<<16. The shift is done as a kind of fix-point arithmetic.
int atan(int alpha) {
  while (alpha<0) alpha+=360;
  while (alpha>360) alpha-=360;
  return arcustangensLUT[alpha];
}

/*
#include <stdio.h>
#include <math.h>
#define PI 3.1415926536
int main() {
  int i;
  for (i=0; i<360; i++) {
    printf("%i,\t", (int)((1<<16)*atan(i*PI/180)+0.5));
    if ((i+1)%10==0) printf("\n");
  }
  printf("\n");
  return 0;
}
*/
#endif



#ifdef COSY
int printInt(int a) {
  char tempString[20];
  intToStr(a, tempString);
  t_print(tempString);
  return 0;
}
#endif


int computeArrow(const struct Point* const from, const struct Point* const to, struct Point* leftWing, struct Point* rightWing) {
  tpoint deltaX, deltaY;
  tpoint angleOriginal, angleLeftWing, angleRightWing;

  deltaX = to->x - from->x;
  deltaY = to->y - from->y;
  if (deltaX != 0) angleOriginal = atan(deltaY/deltaX) * RAD_DEG_FACTOR;
  else {
    if (deltaY > 0) angleOriginal = 90  * FIX_POINT_FACTOR;
    else angleOriginal = 270 * FIX_POINT_FACTOR;
  }
  angleLeftWing = angleOriginal + (180 - ARROW_ANGLE) * FIX_POINT_FACTOR;
  angleRightWing = angleOriginal + (180 + ARROW_ANGLE) * FIX_POINT_FACTOR;
  angleLeftWing /= FIX_POINT_FACTOR;
  angleRightWing /= FIX_POINT_FACTOR;
  /*
  printf("deltaX: %i, deltaY: %i, angleOriginal: %f, angleLeftWing: %f, angleRightWing: %f\n", (int)deltaX, (int)deltaY, angleOriginal, angleLeftWing, angleRightWing);
  printf("%f %f\n", angleLeftWing/RAD_DEG_FACTOR, cos(angleLeftWing/RAD_DEG_FACTOR));
  printf("AL*cos(left): %f, AL*sin(left): %f\n", ARROW_LENGTH * cos(angleLeftWing/RAD_DEG_FACTOR), ARROW_LENGTH * sin(angleLeftWing/RAD_DEG_FACTOR));
  */
  
  leftWing->x = ( (to->x * FIX_POINT_FACTOR) + ARROW_LENGTH * cos(angleLeftWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  leftWing->y = ( (to->y * FIX_POINT_FACTOR) + ARROW_LENGTH * sin(angleLeftWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  rightWing->x = ( (to->x * FIX_POINT_FACTOR) + ARROW_LENGTH * cos(angleRightWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  rightWing->y = ( (to->y * FIX_POINT_FACTOR) + ARROW_LENGTH * sin(angleRightWing/RAD_DEG_FACTOR)) / FIX_POINT_FACTOR;
  return 0;
}

int clearScreen() {
#ifdef GCC_FLOAT
  printf("\n----------------------------\n");
#else
  t_print("\r\n----------------------------\r\n");
  d_clear();
#endif
  return 0;
}

int drawLine(struct Point* const from, struct Point* const to) {
#ifdef GCC_FLOAT
  printf("(%i, %i)  -->  (%i, %i)\n", (int)from->x, (int)from->y, (int)to->x, (int)to->y);
#else
  t_print("(");
  printInt(from->x);
  t_print(", ");
  printInt(from->y);
  t_print(")  -->  (");
  printInt(to->x);
  t_print(", ");
  printInt(to->y);
  t_print(")\r\n");

  g_drawline(from->x, from->y, to->x, to->y);
#endif
  return 0;
}

#ifdef GCC_FLOAT
int wait(int delay) {
  return 0;
}
#else
extern int wait(int delay);
#endif

int main() {
  struct Point start, end, leftWing, rightWing;
#ifndef GCC_FLOAT
  t_print("Arrows:\r\n");
#endif
  start.x = 10;
  start.y = 10;
  end.y = 30;
  for (end.x=30; end.x<=30; end.x++) {
    computeArrow(&start, &end, &leftWing, &rightWing);
    clearScreen();
    drawLine(&start, &end);
    drawLine(&end, &leftWing);
    drawLine(&end, &rightWing);
    //wait(1000);
  }
  return 0;
}
