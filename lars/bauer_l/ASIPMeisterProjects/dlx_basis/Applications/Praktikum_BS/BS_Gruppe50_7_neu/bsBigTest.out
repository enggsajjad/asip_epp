****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	00000000		nop
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	20010031		addi	%r1, %r0, $49
29	0016	00000000		nop
30	0017	00000000		nop
31	0018	00000000		nop
32	0019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
33	001a	0c00000c		jal	_bubbleSort
34	001b	00000000		nop
35	001c	23bd0008		addi	%r29, %r29, $8
36			
37	001d	00000000		nop
38	001e	00000000		nop
39	001f	00000000		nop
40	0020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
41	0021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
42	0022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
43	0023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
44			
45				; HALT
46	0024	0c000068		jal	_exit
47	0025	00000000		nop
48			
49			
50			_bubbleSort:
51			
52			
53	0026	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
54	0027	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
55	0028	00000000		nop
56	0029	00000000		nop
57	002a	00000000		nop
58	002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer
59	002c	afbf0004		sw	4(%r29), %r31		; Save the return address
60			
61				; Save Registers
62	002d	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
63	002e	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
64	002f	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
65	0030	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
66	0031	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
67	0032	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
68	0033	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
69	0034	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
70	0035	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
71	0036	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
72	0037	00000000		nop
73			
74				; Load Parameters
75	0038	8fc20000		lw	%r2, 0(%r30)
76	0039	8fc30004		lw	%r3, 4(%r30)
77			
78				; Initialize start address of 'array'
79	003a	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
80	003b	00000000		nop
81	003c	00000000		nop
82	003d	00000000		nop
83	003e	254a0000		addui	%r10, %r10, $(_array&0xffff)
84			
85			
86				;;;;;;;;;;;;;;;;;;;;;;;;
87				;; Add your code here ;;
88				;;;;;;;;;;;;;;;;;;;;;;;;
89			
90	003f	40770002		slli %r23, %r3, $2		; r23 = endindex * 4
91	0040	40530002		slli %r19, %r2, $2		; r19 = startindex * 4	
92			
93	0041	20160001		addi %r22,%r0,$1			; r22 = 1
94	0042	0000a820		add %r21,%r0,%r0			; r21 = 0
95	0043	01573020		add %r6, %r10, %r23		; r6 = *array + (endindex*4) 
96	0044	00000000		nop
97	0045	00000000		nop
98	0046	00000000		nop
99	0047	20c60004		addi %r6,%r6,$4
100			
101			_OuterLoop:
102			
103	0048	01532820		add %r5, %r10, %r19		; r5 = *array + (startindex *4)
104	0049	fab60034		bgeu %r21,%r22, _EndLoop
105	004a	00000000		nop
106	004b	28c60004		subi %r6, %r6, $4
107	004c	8ca80000		lw %r8, 0(%r5)
108	004d	8ca90004		lw %r9, 4(%r5)		
109	004e	08000004		j _InnerLoop
110	004f	20150001		addi %r21,%r0,$1			; r21 = 1
111			
112			_dontchange:
113			
114	0050	01204020		add %r8, %r9, %r0
115	0051	00000000		nop
116			
117			_InnerLoop:
118			
119	0052	f8a6fff6		bgeu %r5, %r6, _OuterLoop
120	0053	20a50004		addi %r5, %r5, $4
121				
122	0054	f928fffc		bgeu %r9, %r8, _dontchange	; if r9 >= r8 goto _dontchange
123	0055	8ca90008		lw %r9, 8(%r5)
124			
125	0056	0000a820		add %r21,%r0,%r0			; r21 = 0
126	0057	aca9fffc		sw -4(%r5), %r9			; tauschen
127	0058	aca80000		sw 0(%r5), %r8			
128				
129	0059	f8a6ffef		bgeu %r5, %r6, _OuterLoop
130	005a	20a50004		addi %r5, %r5, $4
131				
132	005b	f928fff5		bgeu %r9, %r8, _dontchange
133	005c	8ca90008		lw %r9, 8(%r5)
134			
135	005d	0000a820		add %r21,%r0,%r0			; r21 = 0
136	005e	aca9fffc		sw -4(%r5), %r9			; tauschen
137	005f	aca80000		sw 0(%r5), %r8			
138			
139	0060	f8a6ffe8		bgeu %r5, %r6, _OuterLoop
140	0061	20a50004		addi %r5, %r5, $4
141				
142	0062	f928ffee		bgeu %r9, %r8, _dontchange
143	0063	8ca90008		lw %r9, 8(%r5)
144			
145	0064	0000a820		add %r21,%r0,%r0			; r21 = 0
146	0065	aca9fffc		sw -4(%r5), %r9			; tauschen
147	0066	aca80000		sw 0(%r5), %r8			
148			
149	0067	f8a6ffe1		bgeu %r5, %r6, _OuterLoop
150	0068	20a50004		addi %r5, %r5, $4
151				
152	0069	f928ffe7		bgeu %r9, %r8, _dontchange
153	006a	8ca90008		lw %r9, 8(%r5)
154			
155	006b	0000a820		add %r21,%r0,%r0			; r21 = 0
156	006c	aca9fffc		sw -4(%r5), %r9			; tauschen
157	006d	aca80000		sw 0(%r5), %r8			
158			
159	006e	f8a6ffda		bgeu %r5, %r6, _OuterLoop
160	006f	20a50004		addi %r5, %r5, $4
161				
162	0070	f928ffe0		bgeu %r9, %r8, _dontchange
163	0071	8ca90008		lw %r9, 8(%r5)
164			
165	0072	0000a820		add %r21,%r0,%r0			; r21 = 0
166	0073	aca9fffc		sw -4(%r5), %r9			; tauschen
167	0074	aca80000		sw 0(%r5), %r8			
168			
169	0075	f8a6ffd3		bgeu %r5, %r6, _OuterLoop
170	0076	20a50004		addi %r5, %r5, $4
171				
172	0077	f928ffd9		bgeu %r9, %r8, _dontchange
173	0078	8ca90008		lw %r9, 8(%r5)
174			
175	0079	0000a820		add %r21,%r0,%r0			; r21 = 0
176	007a	aca9fffc		sw -4(%r5), %r9			; tauschen
177			
178	007b	0bffffd7		j _InnerLoop
179	007c	aca80000		sw 0(%r5), %r8			
180			
181			
182			_EndLoop:
183			
184			
185	007d	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
186	007e	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
187			
188				; Restore the saved registers
189	007f	8fa10008		lw	%r1, 8(%r29)
190	0080	8fa2000c		lw	%r2, 12(%r29)
191	0081	8fa30010		lw	%r3, 16(%r29)
192	0082	8fa40014		lw	%r4, 20(%r29)
193	0083	8fa50018		lw	%r5, 24(%r29)
194	0084	8fa6001c		lw	%r6, 28(%r29)
195	0085	8fa70020		lw	%r7, 32(%r29)
196	0086	8fa80024		lw	%r8, 36(%r29)
197	0087	8fa90028		lw	%r9, 40(%r29)
198	0088	8faa0030		lw	%r10,48(%r29)
199			
200	0089	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
201			
202				; Return
203	008a	03e00008		jr	%r31
204	008b	00000000		nop
205			
206			
207	008c	00000000	_exit:	nop
208	008d	00000000		nop
209				
210			
211				.section	.data
212			_array:
213			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_EndLoop	.text	007d	Label	7d	182 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_dontchange	.text	0050	Label	50	112 
_array	.data	0000	Label	0	212 
_InnerLoop	.text	0052	Label	52	117 
_exit	.text	008c	Label	8c	207 
_OuterLoop	.text	0048	Label	48	101 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	8e 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		0 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
