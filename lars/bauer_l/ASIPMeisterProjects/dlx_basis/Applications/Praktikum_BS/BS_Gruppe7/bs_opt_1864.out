****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	20010013		addi	%r1, %r0, $19
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	00000000		nop
29	0016	00000000		nop
30	0017	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
31	0018	0c00000c		jal	_bubbleSort
32	0019	00000000		nop
33	001a	23bd0008		addi	%r29, %r29, $8
34			
35	001b	00000000		nop
36	001c	00000000		nop
37	001d	00000000		nop
38	001e	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
39	001f	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
40	0020	8fa10008		lw	%r1,  8(%r29)		; Restore r1
41	0021	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
42			
43				; HALT
44	0022	0c000067		jal	_exit
45	0023	00000000		nop
46			
47			
48			_bubbleSort:
49			
50			
51	0024	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
52	0025	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
53	0026	00000000		nop
54	0027	00000000		nop
55	0028	00000000		nop
56	0029	afbe0000		sw	0(%r29), %r30		; Save the frame pointer
57	002a	afbf0004		sw	4(%r29), %r31		; Save the return address
58			
59				; Save Registers
60	002b	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
61	002c	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
62	002d	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
63	002e	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
64	002f	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
65	0030	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
66	0031	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
67	0032	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
68	0033	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
69	0034	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
70	0035	00000000		nop
71			
72				; Load Parameters
73	0036	8fc20000		lw	%r2, 0(%r30)
74	0037	8fc30004		lw	%r3, 4(%r30)
75			
76				; Initialize start address of 'array'
77	0038	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
78	0039	00000000		nop
79	003a	00000000		nop
80	003b	00000000		nop
81	003c	254a0000		addui	%r10, %r10, $(_array&0xffff)
82			
83			
84				;;;;;;;;;;;;;;;;;;;;;;;;
85				;; Add your code here ;;
86				;;;;;;;;;;;;;;;;;;;;;;;;
87			
88	003d	40770002		slli %r23, %r3, $2		; r23 = endindex * 4
89	003e	40530002		slli %r19, %r2, $2		; r19 = startindex * 4	
90			
91	003f	20160001		addi %r22,%r0,$1			; r22 = 1
92	0040	0000a820		add %r21,%r0,%r0			; r21 = 0
93	0041	01573020		add %r6, %r10, %r23		; r6 = *array + (endindex*4) 
94	0042	00000000		nop
95	0043	00000000		nop
96	0044	00000000		nop
97	0045	20c60004		addi %r6,%r6,$4
98			
99			_OuterLoop:
100			
101	0046	01532820		add %r5, %r10, %r19		; r5 = *array + (startindex *4)
102	0047	fab60033		bgeu %r21,%r22, _EndLoop
103	0048	00000000		nop
104	0049	28c60004		subi %r6, %r6, $4
105	004a	8ca80000		lw %r8, 0(%r5)
106	004b	8ca90004		lw %r9, 4(%r5)		
107	004c	08000003		j _InnerLoop
108	004d	20150001		addi %r21,%r0,$1			; r21 = 1
109			
110			_dontchange:
111			
112	004e	01204020		add %r8, %r9, %r0
113				
114			_InnerLoop:
115			
116				; Version ohne Loop unrolling ist bs_opt_2038.s
117			
118	004f	f8a6fff7		bgeu %r5, %r6, _OuterLoop
119	0050	20a50004		addi %r5, %r5, $4
120				
121	0051	f928fffd		bgeu %r9, %r8, _dontchange	; if r9 >= r8 goto _dontchange
122	0052	8ca90008		lw %r9, 8(%r5)
123			
124	0053	0000a820		add %r21,%r0,%r0			; r21 = 0
125	0054	aca9fffc		sw -4(%r5), %r9			; tauschen
126	0055	aca80000		sw 0(%r5), %r8			
127				
128	0056	f8a6fff0		bgeu %r5, %r6, _OuterLoop
129	0057	20a50004		addi %r5, %r5, $4
130				
131	0058	f928fff6		bgeu %r9, %r8, _dontchange
132	0059	8ca90008		lw %r9, 8(%r5)
133			
134	005a	0000a820		add %r21,%r0,%r0			; r21 = 0
135	005b	aca9fffc		sw -4(%r5), %r9			; tauschen
136	005c	aca80000		sw 0(%r5), %r8			
137			
138	005d	f8a6ffe9		bgeu %r5, %r6, _OuterLoop
139	005e	20a50004		addi %r5, %r5, $4
140				
141	005f	f928ffef		bgeu %r9, %r8, _dontchange
142	0060	8ca90008		lw %r9, 8(%r5)
143			
144	0061	0000a820		add %r21,%r0,%r0			; r21 = 0
145	0062	aca9fffc		sw -4(%r5), %r9			; tauschen
146	0063	aca80000		sw 0(%r5), %r8			
147			
148	0064	f8a6ffe2		bgeu %r5, %r6, _OuterLoop
149	0065	20a50004		addi %r5, %r5, $4
150				
151	0066	f928ffe8		bgeu %r9, %r8, _dontchange
152	0067	8ca90008		lw %r9, 8(%r5)
153			
154	0068	0000a820		add %r21,%r0,%r0			; r21 = 0
155	0069	aca9fffc		sw -4(%r5), %r9			; tauschen
156	006a	aca80000		sw 0(%r5), %r8			
157			
158	006b	f8a6ffdb		bgeu %r5, %r6, _OuterLoop
159	006c	20a50004		addi %r5, %r5, $4
160				
161	006d	f928ffe1		bgeu %r9, %r8, _dontchange
162	006e	8ca90008		lw %r9, 8(%r5)
163			
164	006f	0000a820		add %r21,%r0,%r0			; r21 = 0
165	0070	aca9fffc		sw -4(%r5), %r9			; tauschen
166	0071	aca80000		sw 0(%r5), %r8			
167			
168	0072	f8a6ffd4		bgeu %r5, %r6, _OuterLoop
169	0073	20a50004		addi %r5, %r5, $4
170				
171	0074	f928ffda		bgeu %r9, %r8, _dontchange
172	0075	8ca90008		lw %r9, 8(%r5)
173			
174	0076	0000a820		add %r21,%r0,%r0			; r21 = 0
175	0077	aca9fffc		sw -4(%r5), %r9			; tauschen
176			
177	0078	0bffffd7		j _InnerLoop
178	0079	aca80000		sw 0(%r5), %r8			
179			
180			
181			_EndLoop:
182			
183			
184	007a	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
185	007b	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
186			
187				; Restore the saved registers
188	007c	8fa10008		lw	%r1, 8(%r29)
189	007d	8fa2000c		lw	%r2, 12(%r29)
190	007e	8fa30010		lw	%r3, 16(%r29)
191	007f	8fa40014		lw	%r4, 20(%r29)
192	0080	8fa50018		lw	%r5, 24(%r29)
193	0081	8fa6001c		lw	%r6, 28(%r29)
194	0082	8fa70020		lw	%r7, 32(%r29)
195	0083	8fa80024		lw	%r8, 36(%r29)
196	0084	8fa90028		lw	%r9, 40(%r29)
197	0085	8faa0030		lw	%r10,48(%r29)
198			
199	0086	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
200			
201				; Return
202	0087	03e00008		jr	%r31
203	0088	00000000		nop
204			
205			
206	0089	00000000	_exit:	nop
207	008a	00000000		nop
208			
209			
210				.section	.data
211			_array:
212	0000	0000002d		.data.32	45
213	0004	0000004b		.data.32	75
214	0008	00000156		.data.32	342
215	000c	00000036		.data.32	54
216	0010	00000007		.data.32	7
217	0014	00000056		.data.32	86
218	0018	0000005c		.data.32	92
219	001c	000000eb		.data.32	235
220	0020	00000004		.data.32	4
221	0024	0000002a		.data.32	42
222	0028	00000063		.data.32	99
223	002c	0000004e		.data.32	78
224	0030	0000003f		.data.32	63
225	0034	00000160		.data.32	352
226	0038	00000015		.data.32	21
227	003c	0000027a		.data.32	634
228	0040	00000006		.data.32	6
229	0044	0000004d		.data.32	77
230	0048	0000015a		.data.32	346
231	004c	00000017		.data.32	23
232			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_EndLoop	.text	007a	Label	7a	181 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0024	Label	24	48 
_dontchange	.text	004e	Label	4e	110 
_array	.data	0000	Label	0	211 
_InnerLoop	.text	004f	Label	4f	114 
_exit	.text	0089	Label	89	206 
_OuterLoop	.text	0046	Label	46	99 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	8b 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
