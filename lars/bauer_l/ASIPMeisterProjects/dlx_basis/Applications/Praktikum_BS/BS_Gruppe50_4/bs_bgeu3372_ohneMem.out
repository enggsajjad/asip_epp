****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	00000000		nop
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	20010013		addi	%r1, %r0, $19
29	0016	00000000		nop
30	0017	00000000		nop
31	0018	00000000		nop
32	0019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
33	001a	0c00000c		jal	_bubbleSort
34	001b	00000000		nop
35	001c	23bd0008		addi	%r29, %r29, $8
36			
37	001d	00000000		nop
38	001e	00000000		nop
39	001f	00000000		nop
40	0020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
41	0021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
42	0022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
43	0023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
44			
45				; HALT
46	0024	0c00004a		jal	_exit
47	0025	00000000		nop
48			
49			
50			_bubbleSort:
51	0026	00000000		nop
52	0027	001df020		add	%r30, %r0, %r29		; Establish new frame pointer 
53	0028	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
54	0029	00000000		nop
55	002a	00000000		nop
56	002b	00000000		nop
57	002c	afbe0000		sw	0(%r29), %r30		; Save the frame pointer 
58	002d	afbf0004		sw	4(%r29), %r31		; Save the return address 
59			
60				; Save Registers 
61	002e	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
62	002f	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
63	0030	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
64	0031	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
65	0032	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
66	0033	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
67	0034	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
68	0035	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
69	0036	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
70	0037	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
71	0038	00000000		nop
72			
73				; Load Parameters
74	0039	8fc20000		lw	%r2, 0(%r30)
75	003a	8fc30004		lw	%r3, 4(%r30)
76			
77				; Initialize start address of 'array'
78	003b	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
79	003c	00000000		nop
80	003d	00000000		nop
81	003e	00000000		nop
82	003f	254a0000		addui	%r10, %r10, $(_array&0xffff)
83			
84			
85				;;;;;;;;;;;;;;;;;;;;;;;;
86				;; Add your code here ;;
87				;;;;;;;;;;;;;;;;;;;;;;;;
88				
89	0040	40630002		slli %r3, %r3, $2
90	0041	00022020		add %r4, %r0, %r2
91	0042	00000000		nop
92	0043	01423820		add %r7, %r10, %r2
93	0044	00000000		nop
94	0045	00000000		nop
95	0046	01433020		add %r6, %r10, %r3
96	0047	00000000		nop
97	0048	00000000		nop
98	0049	00072820		add %r5, %r0, %r7
99	004a	20c60004		addi %r6, %r6, $4
100	004b	00000000		nop
101	004c	00000000		nop
102	004d	8ce90004		lw %r9, 4(%r7) 
103	004e	f8830011	startOuter: bgeu %r4, %r3, endOuter
104	004f	28c60004		subi %r6, %r6, $4
105	0050	8ce90004		lw %r9, 4(%r7) 
106	0051	8ce80000		lw  %r8, 0(%r7)
107	0052	00000000		nop
108			startInner:
109	0053	f8a60009		bgeu %r5, %r6, endInner
110	0054	20a50004		addi %r5, %r5, $4
111	0055	f9280004		bgeu %r9, %r8, endIf
112	0056	00084820		add %r9, %r0, %r8
113	0057	aca90000		sw  0(%r5), %r9
114	0058	aca80000		sw  0(%r5), %r8
115			endIf: 
116	0059	00094020		add %r8, %r0, %r9
117	005a	0bfffff9		j startInner
118	005b	8ca90004		lw %r9, 4(%r5) 
119	005c	20840001	endInner: addi %r4, %r4, $1
120	005d	0bfffff1		j startOuter
121	005e	00072820		add %r5, %r0, %r7
122			endOuter:
123			
124			
125			
126			
127	005f	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
128	0060	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
129			
130				; Restore the saved registers
131	0061	8fa10008		lw	%r1, 8(%r29)
132	0062	8fa2000c		lw	%r2, 12(%r29)
133	0063	8fa30010		lw	%r3, 16(%r29)
134	0064	8fa40014		lw	%r4, 20(%r29)
135	0065	8fa50018		lw	%r5, 24(%r29)
136	0066	8fa6001c		lw	%r6, 28(%r29)
137	0067	8fa70020		lw	%r7, 32(%r29)
138	0068	8fa80024		lw	%r8, 36(%r29)
139	0069	8fa90028		lw	%r9, 40(%r29)
140	006a	8faa0030		lw	%r10,48(%r29)
141			
142	006b	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
143			
144				; Return
145	006c	03e00008		jr	%r31
146	006d	00000000		nop
147			
148			
149	006e	00000000	_exit:	nop
150	006f	00000000		nop
151			
152			
153				.section	.data
154			_array:
155	0000	0000002d		.data.32	45


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
endInner	.text	005c	Label	5c	119 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_array	.data	0000	Label	0	154 
_exit	.text	006e	Label	6e	149 
startInner	.text	0053	Label	53	108 
endIf	.text	0059	Label	59	115 
endOuter	.text	005f	Label	5f	122 
startOuter	.text	004e	Label	4e	103 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	70 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		4 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
