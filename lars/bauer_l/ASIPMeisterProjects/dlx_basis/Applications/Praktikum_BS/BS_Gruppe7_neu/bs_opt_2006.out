****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	20010013		addi	%r1, %r0, $19
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	00000000		nop
29	0016	00000000		nop
30	0017	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
31	0018	0c00000c		jal	_bubbleSort
32	0019	00000000		nop
33	001a	23bd0008		addi	%r29, %r29, $8
34			
35	001b	00000000		nop
36	001c	00000000		nop
37	001d	00000000		nop
38	001e	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
39	001f	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
40	0020	8fa10008		lw	%r1,  8(%r29)		; Restore r1
41	0021	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
42			
43				; HALT
44	0022	0c000068		jal	_exit
45	0023	00000000		nop
46			
47			
48			_bubbleSort:
49			
50			
51	0024	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
52	0025	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
53	0026	00000000		nop
54	0027	00000000		nop
55	0028	00000000		nop
56	0029	afbe0000		sw	0(%r29), %r30		; Save the frame pointer
57	002a	afbf0004		sw	4(%r29), %r31		; Save the return address
58			
59				; Save Registers
60	002b	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
61	002c	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
62	002d	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
63	002e	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
64	002f	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
65	0030	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
66	0031	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
67	0032	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
68	0033	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
69	0034	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
70	0035	00000000		nop
71			
72				; Load Parameters
73	0036	8fc20000		lw	%r2, 0(%r30)
74	0037	8fc30004		lw	%r3, 4(%r30)
75			
76				; Initialize start address of 'array'
77	0038	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
78	0039	00000000		nop
79	003a	00000000		nop
80	003b	00000000		nop
81	003c	254a0000		addui	%r10, %r10, $(_array&0xffff)
82			
83			
84				;;;;;;;;;;;;;;;;;;;;;;;;
85				;; Add your code here ;;
86				;;;;;;;;;;;;;;;;;;;;;;;;
87			
88	003d	40770002		slli %r23, %r3, $2		; r23 = endindex * 4
89	003e	40530002		slli %r19, %r2, $2		; r19 = startindex * 4	
90			
91	003f	20160001		addi %r22,%r0,$1			; r22 = 1
92	0040	0000a820		add %r21,%r0,%r0			; r21 = 0
93	0041	01573020		add %r6, %r10, %r23		; r6 = *array + (endindex*4) 
94	0042	00000000		nop
95	0043	00000000		nop
96	0044	00000000		nop
97	0045	20c60004		addi %r6,%r6,$4
98			
99			_OuterLoop:
100			
101	0046	01532820		add %r5, %r10, %r19		; r5 = *array + (startindex *4)
102	0047	fab60034		bgeu %r21,%r22, _EndLoop
103	0048	00000000		nop
104	0049	28c60004		subi %r6, %r6, $4
105	004a	8ca80000		lw %r8, 0(%r5)
106	004b	8ca90004		lw %r9, 4(%r5)		
107	004c	08000004		j _InnerLoop
108	004d	20150001		addi %r21,%r0,$1			; r21 = 1
109			
110			_dontchange:
111			
112	004e	01204020		add %r8, %r9, %r0
113	004f	00000000		nop
114			
115			_InnerLoop:
116			
117	0050	f8a6fff6		bgeu %r5, %r6, _OuterLoop
118	0051	20a50004		addi %r5, %r5, $4
119				
120	0052	f928fffc		bgeu %r9, %r8, _dontchange	; if r9 >= r8 goto _dontchange
121	0053	8ca90008		lw %r9, 8(%r5)
122			
123	0054	0000a820		add %r21,%r0,%r0			; r21 = 0
124	0055	aca9fffc		sw -4(%r5), %r9			; tauschen
125	0056	aca80000		sw 0(%r5), %r8			
126				
127	0057	f8a6ffef		bgeu %r5, %r6, _OuterLoop
128	0058	20a50004		addi %r5, %r5, $4
129				
130	0059	f928fff5		bgeu %r9, %r8, _dontchange
131	005a	8ca90008		lw %r9, 8(%r5)
132			
133	005b	0000a820		add %r21,%r0,%r0			; r21 = 0
134	005c	aca9fffc		sw -4(%r5), %r9			; tauschen
135	005d	aca80000		sw 0(%r5), %r8			
136			
137	005e	f8a6ffe8		bgeu %r5, %r6, _OuterLoop
138	005f	20a50004		addi %r5, %r5, $4
139				
140	0060	f928ffee		bgeu %r9, %r8, _dontchange
141	0061	8ca90008		lw %r9, 8(%r5)
142			
143	0062	0000a820		add %r21,%r0,%r0			; r21 = 0
144	0063	aca9fffc		sw -4(%r5), %r9			; tauschen
145	0064	aca80000		sw 0(%r5), %r8			
146			
147	0065	f8a6ffe1		bgeu %r5, %r6, _OuterLoop
148	0066	20a50004		addi %r5, %r5, $4
149				
150	0067	f928ffe7		bgeu %r9, %r8, _dontchange
151	0068	8ca90008		lw %r9, 8(%r5)
152			
153	0069	0000a820		add %r21,%r0,%r0			; r21 = 0
154	006a	aca9fffc		sw -4(%r5), %r9			; tauschen
155	006b	aca80000		sw 0(%r5), %r8			
156			
157	006c	f8a6ffda		bgeu %r5, %r6, _OuterLoop
158	006d	20a50004		addi %r5, %r5, $4
159				
160	006e	f928ffe0		bgeu %r9, %r8, _dontchange
161	006f	8ca90008		lw %r9, 8(%r5)
162			
163	0070	0000a820		add %r21,%r0,%r0			; r21 = 0
164	0071	aca9fffc		sw -4(%r5), %r9			; tauschen
165	0072	aca80000		sw 0(%r5), %r8			
166			
167	0073	f8a6ffd3		bgeu %r5, %r6, _OuterLoop
168	0074	20a50004		addi %r5, %r5, $4
169				
170	0075	f928ffd9		bgeu %r9, %r8, _dontchange
171	0076	8ca90008		lw %r9, 8(%r5)
172			
173	0077	0000a820		add %r21,%r0,%r0			; r21 = 0
174	0078	aca9fffc		sw -4(%r5), %r9			; tauschen
175			
176	0079	0bffffd7		j _InnerLoop
177	007a	aca80000		sw 0(%r5), %r8			
178			
179			
180			_EndLoop:
181			
182			
183	007b	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
184	007c	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
185			
186				; Restore the saved registers
187	007d	8fa10008		lw	%r1, 8(%r29)
188	007e	8fa2000c		lw	%r2, 12(%r29)
189	007f	8fa30010		lw	%r3, 16(%r29)
190	0080	8fa40014		lw	%r4, 20(%r29)
191	0081	8fa50018		lw	%r5, 24(%r29)
192	0082	8fa6001c		lw	%r6, 28(%r29)
193	0083	8fa70020		lw	%r7, 32(%r29)
194	0084	8fa80024		lw	%r8, 36(%r29)
195	0085	8fa90028		lw	%r9, 40(%r29)
196	0086	8faa0030		lw	%r10,48(%r29)
197			
198	0087	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
199			
200				; Return
201	0088	03e00008		jr	%r31
202	0089	00000000		nop
203			
204			
205	008a	00000000	_exit:	nop
206	008b	00000000		nop
207			;	trap #0
208			
209				.section	.data
210			_array:
211	0000	0000002d		.data.32	45
212	0004	0000004b		.data.32	75
213	0008	00000156		.data.32	342
214	000c	00000036		.data.32	54
215	0010	00000007		.data.32	7
216	0014	00000056		.data.32	86
217	0018	0000005c		.data.32	92
218	001c	000000eb		.data.32	235
219	0020	00000004		.data.32	4
220	0024	0000002a		.data.32	42
221	0028	00000063		.data.32	99
222	002c	0000004e		.data.32	78
223	0030	0000003f		.data.32	63
224	0034	00000160		.data.32	352
225	0038	00000015		.data.32	21
226	003c	0000027a		.data.32	634
227	0040	00000006		.data.32	6
228	0044	0000004d		.data.32	77
229	0048	0000015a		.data.32	346
230	004c	00000017		.data.32	23
231			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_EndLoop	.text	007b	Label	7b	180 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0024	Label	24	48 
_dontchange	.text	004e	Label	4e	110 
_array	.data	0000	Label	0	210 
_InnerLoop	.text	0050	Label	50	115 
_exit	.text	008a	Label	8a	205 
_OuterLoop	.text	0046	Label	46	99 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	8c 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
