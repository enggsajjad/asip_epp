****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	00000000		nop
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	20010013		addi	%r1, %r0, $19
29	0016	00000000		nop
30	0017	00000000		nop
31	0018	00000000		nop
32	0019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
33	001a	0c00000c		jal	_bubbleSort
34	001b	00000000		nop
35	001c	23bd0008		addi	%r29, %r29, $8
36			
37	001d	00000000		nop
38	001e	00000000		nop
39	001f	00000000		nop
40	0020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
41	0021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
42	0022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
43	0023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
44			
45				; HALT
46	0024	0c000043		jal	_exit
47	0025	00000000		nop
48			
49			
50			_bubbleSort:
51			
52			
53	0026	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
54	0027	001df020		add	%r30, %r0, %r29		; Establish new frame pointer r29'OLD
55			
56	0028	00000000		nop
57	0029	00000000		nop
58			
59	002a	afbf0004		sw	4(%r29), %r31		; Save the return address 
60	002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer
61				
62				; Save Registers 
63	002c	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
64	002d	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
65	002e	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
66	002f	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
67	0030	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
68	0031	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
69	0032	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
70	0033	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
71	0034	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
72	0035	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
73			
74				; Initialize start address of 'array'
75	0036	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
76			
77				; Load Parameters
78	0037	8fc30004		lw	%r3, 4(%r30)
79	0038	8fc20000		lw	%r2, 0(%r30)
80			
81	0039	00000000		nop
82			
83	003a	254a0000		addui	%r10, %r10, $(_array&0xffff)
84			
85				; ADD YOUR CODE HERE
86				;; Code starts here
87				
88				; innerLoopEnd = array+endIndex
89	003b	40630002		slli	%r3, %r3, $2
90	003c	00000000		nop
91	003d	00000000		nop
92			
93	003e	00402020		add	%r4, %r2, %r0
94	003f	01433020		add	%r6, %r10, %r3
95				; i = startIndex;
96			
97	0040	00000000		nop
98	0041	00000000		nop
99			_while:	;   j = array+startIndex;
100	0042	01422820		add	%r5, %r10, %r2
101				; while (i < endIndex) {
102	0043	f8830015		bgeu	%r4,%r3,_whileend
103			
104			
105				;   value_j = *j;
106			
107	0044	00000000		nop
108				;   next_j = j;
109	0045	01423820		add	%r7,%r10,%r2
110	0046	8ca80000		lw	%r8, 0(%r5)	
111			
112			
113			_whileinner:	
114				;   while (j < innerLoopEnd) {
115	0047	f8a6000e		bgeu	%r5, %r6, _whileinnerend
116	0048	8ce90004		lw	%r9, 4(%r7)	; r7'OLD
117				;    next_j++
118			
119	0049	20e70004		addi	%r7, %r7, $4
120			
121	004a	00000000		nop
122			
123				;       tmp = value_j;
124	004b	01000820		add	%r1, %r8, %r0
125				
126				;     if (value_next_j < value_j) {
127	004c	f9280005		bgeu	%r9, %r8, _endif
128				;       value_j = value_next_j;
129	004d	01204020		add	%r8,%r9,%r0
130				;       *j = value_next_j;
131	004e	aca90000		sw	0(%r5), %r9
132				;       *next_j = value_j;
133	004f	ace80000		sw	0(%r7), %r8 	; r8'OLD
134			
135				;       value_next_j = tmp;
136	0050	00204820		add	%r9, %r1, %r0
137				;     }
138			_endif:	
139				;     j = next_j;
140	0051	00e02820		add	%r5,%r7,%r0
141				;     value_j = value_next_j;
142	0052	00000000		nop
143			
144				;   }
145	0053	0bfffff4		j	_whileinner
146	0054	01204020		add	%r8,%r9,%r0
147			
148			_whileinnerend:
149				;   innerLoopEnd--;
150	0055	28c60004		subi	%r6,%r6,$4
151				;   i++;
152			
153				; }
154	0056	0bffffec		j	_while
155	0057	20840004		addi	%r4,%r4,$4
156			
157			_whileend:
158			
159				;;;
160				;;; Code ends here!
161				;;;
162				
163	0058	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
164	0059	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
165			
166				; Restore the saved registers
167	005a	8fa10008		lw	%r1, 8(%r29)
168	005b	8fa2000c		lw	%r2, 12(%r29)
169	005c	8fa30010		lw	%r3, 16(%r29)
170	005d	8fa40014		lw	%r4, 20(%r29)
171	005e	8fa50018		lw	%r5, 24(%r29)
172	005f	8fa6001c		lw	%r6, 28(%r29)
173	0060	8fa70020		lw	%r7, 32(%r29)
174	0061	8fa80024		lw	%r8, 36(%r29)
175	0062	8fa90028		lw	%r9, 40(%r29)
176	0063	8faa0030		lw	%r10,48(%r29)
177			
178	0064	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
179			
180				; Return
181	0065	03e00008		jr	%r31
182	0066	00000000		nop
183			
184			
185	0067	00000000	_exit:	nop
186	0068	00000000		nop
187			
188			
189				.section	.data
190			_array:
191	0000	0000002d		.data.32	45
192	0004	0000004b		.data.32	75
193	0008	00000156		.data.32	342
194	000c	00000036		.data.32	54
195	0010	00000007		.data.32	7
196	0014	00000056		.data.32	86
197	0018	0000005c		.data.32	92
198	001c	000000eb		.data.32	235
199	0020	00000004		.data.32	4
200	0024	0000002a		.data.32	42
201	0028	00000063		.data.32	99
202	002c	0000004e		.data.32	78
203	0030	0000003f		.data.32	63
204	0034	00000160		.data.32	352
205	0038	00000015		.data.32	21
206	003c	0000027a		.data.32	634
207	0040	00000006		.data.32	6
208	0044	0000004d		.data.32	77
209	0048	0000015a		.data.32	346
210	004c	00000017		.data.32	23
211			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_whileend	.text	0058	Label	58	157 
_while	.text	0042	Label	42	99 
_array	.data	0000	Label	0	190 
_exit	.text	0067	Label	67	185 
_whileinnerend	.text	0055	Label	55	148 
_endif	.text	0051	Label	51	138 
_whileinner	.text	0047	Label	47	113 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	69 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
