00000000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
00000001	00000000		nop
00000002	00000000		nop
00000003	00000000		nop
00000004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
00000005	00000000		nop
00000006	00000000		nop
00000007	00000000		nop
00000008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
00000009	00000000		nop
0000000a	00000000		nop
0000000b	00000000		nop
0000000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
0000000d	afbf0004		sw	4(%r29), %r31		; Save the return address
0000000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
0000000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
00000010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
00000011	00000000		nop
00000012	00000000		nop
00000013	00000000		nop
00000014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
00000015	20010013		addi	%r1, %r0, $19
00000016	00000000		nop
00000017	00000000		nop
00000018	00000000		nop
00000019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
0000001a	0c00000c		jal	_bubbleSort
0000001b	00000000		nop
0000001c	23bd0008		addi	%r29, %r29, $8
0000001d	00000000		nop
0000001e	00000000		nop
0000001f	00000000		nop
00000020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
00000021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
00000022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
00000023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
00000024	0c000062		jal	_exit
00000025	00000000		nop
00000026	001df020		add	%r30, %r0, %r29		; Establish new frame pointer 
00000027	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
00000028	00000000		nop
00000029	00000000		nop
0000002a	00000000		nop
0000002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer 
0000002c	afbf0004		sw	4(%r29), %r31		; Save the return address 
0000002d	3c010000		lhi	%r1, $(_array*65536)&0xffff
0000002e	8fc20000		lw	%r2, 0(%r30)
0000002f	8fc30004		lw	%r3, 4(%r30)
00000030	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
00000031	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex". (later "innerLoopStart")
00000032	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".	(later "innerLoopEnd")
00000033	40630002		slli	%r3,%r3,$2
00000034	24210000		addui	%r1, %r1, $(_array&0xffff)
00000035	40420002		slli	%r2,%r2,$2
00000036	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
00000037	24630004		addui	%r3,%r3,$4		; innerLoopEnd++;
00000038	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
00000039	00411021		addu	%r2,%r2,%r1
0000003a	afa70020		sw	32(%r29), %r7		; r7 is "variable_xchanged".
0000003b	00611821		addu	%r3,%r3,%r1
0000003c	20070001		addi 	%r7,%r0,$1
0000003d	08000003		j	while1_start
0000003e	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
0000003f	aca10000		sw	0(%r5),%r1	;       *next_j = value_j;	
00000040	00022821		addu	%r5,%r0,%r2	; j = innerLoopStart
00000041	2c630004		subui	%r3,%r3,$4	; innerLoopEnd--;
00000042	10e00038		beqz	%r7, while1_end
00000043	00003820		add	%r7,%r0,%r0
00000044	8ca80000		lw	%r8,0(%r5)	;   value_j = *j;
00000045	8ca90004		lw	%r9,4(%r5)	;     value_next_j = *next_j;
00000046	f8a3fffa		bgeu	%r5,%r3,while1_start	;   while (j < innerLoopEnd) {
00000047	24a50004		addui	%r5,%r5,$4	;     j++;
00000048	00080821		addu	%r1,%r0,%r8	;       tmp = value_j;
00000049	f928fffc		bgeu	%r9,%r8,while2_mit_r7_start	;     if (value_next_j < value_j) {
0000004a	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
0000004b	8ca90004		lw	%r9,4(%r5)
0000004c	f8a3fff3		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
0000004d	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
0000004e	0800000c		j	while2_x_start	;   }
0000004f	20070001		addi	%r7,%r0,$1
00000050	aca1fffc		sw	-4(%r5),%r1	;       *next_j = value_j;	
00000051	8ca90004		lw	%r9,4(%r5)	;     value_next_j = *next_j;
00000052	f8a3ffee		bgeu	%r5,%r3,while1_start	;   while (j < innerLoopEnd) {
00000053	24a50004		addui	%r5,%r5,$4	;     j++;
00000054	00080821		addu	%r1,%r0,%r8	;       tmp = value_j;
00000055	f928fffc		bgeu	%r9,%r8,while2_start	;     if (value_next_j < value_j) {
00000056	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
00000057	8ca90004		lw	%r9,4(%r5)	;     value_next_j = *next_j;
00000058	f8a3ffe7		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
00000059	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
0000005a	24a50004		addui	%r5,%r5,$4	;     j++;
0000005b	f921fff5		bgeu	%r9,%r1,while2_save_start	;     if (value_next_j < value_j) {
0000005c	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
0000005d	8ca90008		lw	%r9,8(%r5)	;     value_next_j = *next_j;
0000005e	f8a3ffe1		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
0000005f	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
00000060	24a50004		addui	%r5,%r5,$4	;     j++;
00000061	f921ffef		bgeu	%r9,%r1,while2_save_start	;     if (value_next_j < value_j) {
00000062	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
00000063	8ca90008		lw	%r9,8(%r5)	;     value_next_j = *next_j;
00000064	f8a3ffdb		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
00000065	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
00000066	24a50004		addui	%r5,%r5,$4	;     j++;
00000067	f921ffe9		bgeu	%r9,%r1,while2_save_start	;     if (value_next_j < value_j) {
00000068	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
00000069	8ca90008		lw	%r9,8(%r5)	;     value_next_j = *next_j;
0000006a	f8a3ffd5		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
0000006b	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
0000006c	24a50004		addui	%r5,%r5,$4	;     j++;
0000006d	f921ffe3		bgeu	%r9,%r1,while2_save_start	;     if (value_next_j < value_j) {
0000006e	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
0000006f	8ca90008		lw	%r9,8(%r5)	;     value_next_j = *next_j;
00000070	f8a3ffcf		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
00000071	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
00000072	24a50004		addui	%r5,%r5,$4	;     j++;
00000073	f921ffdd		bgeu	%r9,%r1,while2_save_start	;     if (value_next_j < value_j) {
00000074	00094021		addu	%r8,%r0,%r9	;       value_j = value_next_j;
00000075	8ca90008		lw	%r9,8(%r5)	;     value_next_j = *next_j;
00000076	f8a3ffc9		bgeu	%r5,%r3,while1_save_start	;   while (j < innerLoopEnd) {
00000077	aca9fffc		sw	-4(%r5),%r9	;       *j = value_next_j;
00000078	0bffffe2		j	while2_x_start	;   }
00000079	00000000		nop
0000007a	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
0000007b	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
0000007c	8fa10008		lw	%r1, 8(%r29)
0000007d	8fa2000c		lw	%r2, 12(%r29)
0000007e	8fa30010		lw	%r3, 16(%r29)
0000007f	8fa50018		lw	%r5, 24(%r29)
00000080	8fa70020		lw	%r7, 32(%r29)
00000081	8fa80024		lw	%r8, 36(%r29)
00000082	8fa90028		lw	%r9, 40(%r29)
00000083	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
00000084	03e00008		jr	%r31
00000085	00000000		nop
00000086	00000000	_exit:	nop
00000087	00000000		nop
00000088	ffffffff	; ----- HALT for simulator -----
