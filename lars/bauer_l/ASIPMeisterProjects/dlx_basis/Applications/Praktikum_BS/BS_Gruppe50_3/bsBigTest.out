****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	00000000		nop
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	20010031		addi	%r1, %r0, $49
29	0016	00000000		nop
30	0017	00000000		nop
31	0018	00000000		nop
32	0019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
33	001a	0c00000c		jal	_bubbleSort
34	001b	00000000		nop
35	001c	23bd0008		addi	%r29, %r29, $8
36			
37	001d	00000000		nop
38	001e	00000000		nop
39	001f	00000000		nop
40	0020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
41	0021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
42	0022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
43	0023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
44			
45				; HALT
46	0024	0c000048		jal	_exit
47	0025	00000000		nop
48			
49			
50			_bubbleSort:
51	0026	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
52	0027	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
53	0028	00000000		nop
54	0029	00000000		nop
55	002a	00000000		nop
56	002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer
57	002c	afbf0004		sw	4(%r29), %r31		; Save the return address
58			
59				; Save Registers
60	002d	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
61	002e	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
62	002f	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
63	0030	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
64	0031	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
65	0032	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
66	0033	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
67	0034	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
68	0035	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
69	0036	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
70	0037	00000000		nop
71			
72				; Load Parameters
73	0038	8fc20000		lw	%r2, 0(%r30)
74	0039	00000000		nop
75	003a	00000000		nop
76	003b	00000000		nop
77	003c	8fc30004		lw	%r3, 4(%r30)
78			
79				; Initialize start address of 'array'
80	003d	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
81	003e	00000000		nop
82	003f	00000000		nop
83	0040	00000000		nop
84	0041	254a0000		addui	%r10, %r10, $(_array&0xffff)
85			
86			
87				;;;;;;;;;;;;;;;;;;;;;;;;
88				;; Add your code here ;;
89				;;;;;;;;;;;;;;;;;;;;;;;;
90			
91	0042	00022020		add	%r4, %r0, %r2	; i = startIndex;
92	0043	40610002		slli	%r1, %r3, $2	; innerLoopEnd = array+endIndex
93	0044	00000000		nop
94	0045	00000000		nop	
95	0046	00000000		nop
96				
97	0047	01413020		add	%r6, %r10, %r1  ; 
98				
99			_outer:	
100	0048	000a3820		add	%r7, %r0, %r10	;   next_j = j;	
101	0049	000a2820		add	%r5, %r0, %r10	;	j = array+startIndex;
102				
103	004a	f8830013		bgeu	%r4, %r3, _outerE	; while (i < endIndex) {
104					
105	004b	8d480000		lw	%r8, 0(%r10)	;   value_j = *j;
106	004c	00000000		nop;
107								
108								;   while (j < innerLoopEnd) {
109			_inner:
110	004d	8ce90004		lw	%r9, 4(%r7)	;     value_next_j = *next_j
111	004e	f8a6000c		bgeu	%r5, %r6, _innerE	
112				
113	004f	20e70004		addi	%r7, %r7, $4	;     next_j++;	
114	0050	00000000		nop
115				;nop
116				
117							;     if (value_next_j < value_j) {
118			_if:	
119	0051	f9280007		bgeu	%r9, %r8, _ifE
120				
121	0052	20a50004		addi	%r5, %r5, $4	;     j = next_j;	
122	0053	00000000		nop
123	0054	00000000		nop
124			
125	0055	aca90000		sw	0(%r5), %r9	;       *j = value_next_j;	
126	0056	0bfffff7		j 	_inner
127	0057	ace80000		sw	0(%r7), %r8	;       *next_j = value_j;	
128							;     }
129			_ifE:	
130	0058	0bfffff5		j	_inner
131	0059	00094020		add	%r8, %r0, %r9	;     value_j = value_next_j;
132			
133			
134			_innerE:
135			
136	005a	20840001		addi	%r4, %r4, $1	;   i++;
137	005b	0bffffed		j	_outer		; }
138	005c	28c60004		subi	%r6, %r6, $4	;   innerLoopEnd--;
139			_outerE:
140			
141				;;;;;;;;;;;;;;;;;
142				;; Ende        ;;
143				;;;;;;;;;;;;;;;;;
144			
145	005d	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
146	005e	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
147			
148				; Restore the saved registers
149	005f	8fa10008		lw	%r1, 8(%r29)
150	0060	8fa2000c		lw	%r2, 12(%r29)
151	0061	8fa30010		lw	%r3, 16(%r29)
152	0062	8fa40014		lw	%r4, 20(%r29)
153	0063	8fa50018		lw	%r5, 24(%r29)
154	0064	8fa6001c		lw	%r6, 28(%r29)
155	0065	8fa70020		lw	%r7, 32(%r29)
156	0066	8fa80024		lw	%r8, 36(%r29)
157	0067	8fa90028		lw	%r9, 40(%r29)
158	0068	8faa0030		lw	%r10,48(%r29)
159			
160	0069	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
161			
162				; Return
163	006a	03e00008		jr	%r31
164	006b	00000000		nop
165			
166			
167	006c	00000000	_exit:	nop
168	006d	00000000		nop
169			
170			
171			
172				.section	.data
173			_array:
174	0000	0000016c		.data.32	364
175	0004	00000038		.data.32	56
176	0008	000002df		.data.32	735
177	000c	00000017		.data.32	23
178	0010	0000004c		.data.32	76
179	0014	0000004c		.data.32	76
180	0018	0000005c		.data.32	92
181	001c	00000d93		.data.32	3475
182	0020	0000002b		.data.32	43
183	0024	0000004d		.data.32	77
184	0028	0000004e		.data.32	78
185	002c	0000004e		.data.32	78
186	0030	0000092a		.data.32	2346
187	0034	0000035e		.data.32	862
188	0038	0000002f		.data.32	47
189	003c	00001637		.data.32	5687
190	0040	00000022		.data.32	34
191	0044	0000002f		.data.32	47
192	0048	00000307		.data.32	775
193	004c	000001c9		.data.32	457
194	0050	0000015b		.data.32	347
195	0054	000000ea		.data.32	234
196	0058	00000037		.data.32	55
197	005c	0000002d		.data.32	45
198	0060	000002ad		.data.32	685
199	0064	0000004b		.data.32	75
200	0068	0000031c		.data.32	796
201	006c	00000237		.data.32	567
202	0070	000002fc		.data.32	764
203	0074	00000238		.data.32	568
204	0078	0000005f		.data.32	95
205	007c	00000038		.data.32	56
206	0080	0000004c		.data.32	76
207	0084	00000300		.data.32	768
208	0088	00000041		.data.32	65
209	008c	0000004e		.data.32	78
210	0090	00001ed2		.data.32	7890
211	0094	00000165		.data.32	357
212	0098	0000004c		.data.32	76
213	009c	00000044		.data.32	68
214	00a0	0000004f		.data.32	79
215	00a4	00000039		.data.32	57
216	00a8	00000301		.data.32	769
217	00ac	00000237		.data.32	567
218	00b0	0000002d		.data.32	45
219	00b4	000003db		.data.32	987
220	00b8	0000004c		.data.32	76
221	00bc	000003db		.data.32	987
222	00c0	00000044		.data.32	68
223	00c4	00000381		.data.32	897
224			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_if	.text	0051	Label	51	118 
_ifE	.text	0058	Label	58	129 
_outer	.text	0048	Label	48	99 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_array	.data	0000	Label	0	173 
_outerE	.text	005d	Label	5d	139 
_exit	.text	006c	Label	6c	167 
_innerE	.text	005a	Label	5a	134 
_inner	.text	004d	Label	4d	109 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	6e 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		c8 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
