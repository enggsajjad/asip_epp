****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	00000000		nop
7	0002	00000000		nop
8	0003	00000000		nop
9	0004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
10	0005	00000000		nop
11	0006	00000000		nop
12	0007	00000000		nop
13	0008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
14	0009	00000000		nop
15	000a	00000000		nop
16	000b	00000000		nop
17	000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
18	000d	afbf0004		sw	4(%r29), %r31		; Save the return address
19	000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
20	000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
21			
22				; Call BubbleSort
23	0010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
24	0011	00000000		nop
25	0012	00000000		nop
26	0013	00000000		nop
27	0014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
28	0015	20010013		addi	%r1, %r0, $19
29	0016	00000000		nop
30	0017	00000000		nop
31	0018	00000000		nop
32	0019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
33	001a	0c00000c		jal	_bubbleSort
34	001b	00000000		nop
35	001c	23bd0008		addi	%r29, %r29, $8
36			
37	001d	00000000		nop
38	001e	00000000		nop
39	001f	00000000		nop
40	0020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
41	0021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
42	0022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
43	0023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
44			
45				; HALT
46	0024	0c000052		jal	_exit
47	0025	00000000		nop
48			
49			
50			_bubbleSort:
51	0026	001df020		add	%r30, %r0, %r29		; Establish new frame pointer 
52	0027	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
53	0028	00000000		nop
54	0029	00000000		nop
55	002a	00000000		nop
56	002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer 
57	002c	afbf0004		sw	4(%r29), %r31		; Save the return address 
58			
59				; Save Registers 
60	002d	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
61	002e	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
62	002f	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
63	0030	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
64	0031	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
65	0032	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
66	0033	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
67	0034	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
68	0035	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
69	0036	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
70	0037	00000000		nop
71			
72				; Load Parameters
73	0038	8fc20000		lw	%r2, 0(%r30)
74	0039	8fc30004		lw	%r3, 4(%r30)
75			
76				; Initialize start address of 'array'
77	003a	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
78	003b	00000000		nop
79	003c	00000000		nop
80	003d	00000000		nop
81	003e	254a0000		addui	%r10, %r10, $(_array&0xffff)
82			
83				; ADD YOUR CODE HERE
84	003f	20010004		addi	%r1, %r0, $4
85	0040	00000000		nop
86	0041	00000000		nop
87	0042	00000000		nop
88	0043	00610818		mult	%r1, %r3, %r1
89	0044	00000000		nop
90	0045	00000000		nop
91	0046	00000000		nop
92	0047	01413020		add	%r6, %r10, %r1		; innerLoopEnd = array+endIndex
93	0048	00402020		add	%r4, %r2, %r0		; i = startIndex;
94	0049	00000000		nop
95	004a	20010004		addi	%r1, %r0, $4
96	004b	20c60004		addi	%r6, %r6, $4
97	004c	20840001		addi	%r4, %r4, $1
98	004d	00000000		nop
99	004e	00411018		mult	%r2, %r2, %r1		; aus StartIndex wird StartIndex mit Faktor 4 
100	004f	00000000		nop
101	0050	00000000		nop
102	0051	00000000		nop
103	0052	01422820		add	%r5, %r10, %r2		;   j = array+startIndex;
104			_OuterLoop:
105	0053	28c60004		subi	%r6, %r6, $4		;   innerLoopEnd--;
106	0054	20840001		addi	%r4, %r4, $1		;   i++;
107	0055	f8830012		bgeu	%r4, %r3, _ExitOuterLoop	; while (i < endIndex) {
108	0056	00053820		add	%r7, %r0, %r5		;   next_j = j;
109	0057	8ca80000		lw	%r8, 0(%r5)		;   value_j = *j;
110	0058	00000000		nop
111			_InnerLoop:	
112				;   while (j < innerLoopEnd) {
113	0059	8ce90004		lw	%r9, 4(%r7)		;     value_next_j = *next_j; (r7'OLD)
114	005a	f8a6000b		bgeu	%r5, %r6, _ExitInnerLoop
115	005b	00080820		add	%r1, %r0, %r8		;       tmp = value_j;
116	005c	20e70004		addi	%r7, %r7, $4		;     next_j++;
117				;     if (value_next_j < value_j) {
118	005d	f9280005		bgeu	%r9, %r8, _SkipExchange				
119	005e	00094020		add	%r8, %r0, %r9		;       value_j = value_next_j;
120	005f	00014820		add	%r9, %r0, %r1		;       value_next_j = tmp;
121	0060	ace80000		sw	0(%r7), %r8		;       *next_j = value_j;(r8'OLD)
122	0061	aca90000		sw	0(%r5), %r9		;       *j = value_next_j;(r9'OLD)
123			_SkipExchange:				;     }
124	0062	00072820		add	%r5, %r0, %r7		;     j = next_j;
125	0063	0bfffff6		j	_InnerLoop
126	0064	00094020		add	%r8, %r0, %r9		;     value_j = value_next_j;
127			_ExitInnerLoop:					;   }
128	0065	0bffffee		j	_OuterLoop
129	0066	01422820		add	%r5, %r10, %r2		;   j = array+startIndex;
130			_ExitOuterLoop:				; }
131				;; End own code
132			
133			
134			
135	0067	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
136	0068	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
137			
138				; Restore the saved registers
139	0069	8fa10008		lw	%r1, 8(%r29)
140	006a	8fa2000c		lw	%r2, 12(%r29)
141	006b	8fa30010		lw	%r3, 16(%r29)
142	006c	8fa40014		lw	%r4, 20(%r29)
143	006d	8fa50018		lw	%r5, 24(%r29)
144	006e	8fa6001c		lw	%r6, 28(%r29)
145	006f	8fa70020		lw	%r7, 32(%r29)
146	0070	8fa80024		lw	%r8, 36(%r29)
147	0071	8fa90028		lw	%r9, 40(%r29)
148	0072	8faa0030		lw	%r10,48(%r29)
149			
150	0073	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
151			
152				; Return
153	0074	03e00008		jr	%r31
154	0075	00000000		nop
155			
156			
157	0076	00000000	_exit:	nop
158	0077	00000000		nop
159			
160			
161				.section	.data
162			_array:
163	0000	0000002d		.data.32	45
164	0004	0000004b		.data.32	75
165	0008	00000156		.data.32	342
166	000c	00000036		.data.32	54
167	0010	00000007		.data.32	7
168	0014	00000056		.data.32	86
169	0018	0000005c		.data.32	92
170	001c	000000eb		.data.32	235
171	0020	00000004		.data.32	4
172	0024	0000002a		.data.32	42
173	0028	00000063		.data.32	99
174	002c	0000004e		.data.32	78
175	0030	0000003f		.data.32	63
176	0034	00000160		.data.32	352
177	0038	00000015		.data.32	21
178	003c	0000027a		.data.32	634
179	0040	00000006		.data.32	6
180	0044	0000004d		.data.32	77
181	0048	0000015a		.data.32	346
182	004c	00000017		.data.32	23
183			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_array	.data	0000	Label	0	162 
_InnerLoop	.text	0059	Label	59	111 
_exit	.text	0076	Label	76	157 
_ExitInnerLoop	.text	0065	Label	65	127 
_OuterLoop	.text	0053	Label	53	104 
_ExitOuterLoop	.text	0067	Label	67	130 
_SkipExchange	.text	0062	Label	62	123 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	78 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
