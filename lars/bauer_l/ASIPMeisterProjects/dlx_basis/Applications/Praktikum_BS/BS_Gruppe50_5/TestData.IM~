00000000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
00000001	00000000		nop
00000002	00000000		nop
00000003	00000000		nop
00000004	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
00000005	00000000		nop
00000006	00000000		nop
00000007	00000000		nop
00000008	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
00000009	00000000		nop
0000000a	00000000		nop
0000000b	00000000		nop
0000000c	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
0000000d	afbf0004		sw	4(%r29), %r31		; Save the return address
0000000e	afa10008		sw	8(%r29), %r1		; Save r1, which is used in main.
0000000f	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
00000010	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
00000011	00000000		nop
00000012	00000000		nop
00000013	00000000		nop
00000014	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
00000015	20010013		addi	%r1, %r0, $19
00000016	00000000		nop
00000017	00000000		nop
00000018	00000000		nop
00000019	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
0000001a	0c00000c		jal	_bubbleSort
0000001b	00000000		nop
0000001c	23bd0008		addi	%r29, %r29, $8
0000001d	00000000		nop
0000001e	00000000		nop
0000001f	00000000		nop
00000020	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
00000021	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
00000022	8fa10008		lw	%r1,  8(%r29)		; Restore r1
00000023	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
00000024	0c000052		jal	_exit
00000025	00000000		nop
00000026	001df020		add	%r30, %r0, %r29		; Establish new frame pointer 
00000027	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
00000028	00000000		nop
00000029	00000000		nop
0000002a	00000000		nop
0000002b	afbe0000		sw	0(%r29), %r30		; Save the frame pointer 
0000002c	afbf0004		sw	4(%r29), %r31		; Save the return address 
0000002d	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
0000002e	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
0000002f	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
00000030	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
00000031	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
00000032	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
00000033	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
00000034	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
00000035	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
00000036	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
00000037	00000000		nop
00000038	8fc20000		lw	%r2, 0(%r30)
00000039	8fc30004		lw	%r3, 4(%r30)
0000003a	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
0000003b	00000000		nop
0000003c	00000000		nop
0000003d	00000000		nop
0000003e	254a0000		addui	%r10, %r10, $(_array&0xffff)
0000003f	20010004		addi	%r1, %r0, $4
00000040	00000000		nop
00000041	00000000		nop
00000042	00000000		nop
00000043	00610818		mult	%r1, %r3, %r1
00000044	00000000		nop
00000045	00000000		nop
00000046	00000000		nop
00000047	01413020		add	%r6, %r10, %r1		; innerLoopEnd = array+endIndex
00000048	00402020		add	%r4, %r2, %r0		; i = startIndex;
00000049	00000000		nop
0000004a	20010004		addi	%r1, %r0, $4
0000004b	20c60004		addi	%r6, %r6, $4
0000004c	20840001		addi	%r4, %r4, $1
0000004d	00000000		nop
0000004e	00411018		mult	%r2, %r2, %r1		; aus StartIndex wird StartIndex mit Faktor 4 
0000004f	00000000		nop
00000050	00000000		nop
00000051	00000000		nop
00000052	01422820		add	%r5, %r10, %r2		;   j = array+startIndex;
00000053	28c60004		subi	%r6, %r6, $4		;   innerLoopEnd--;
00000054	20840001		addi	%r4, %r4, $1		;   i++;
00000055	f8830012		bgeu	%r4, %r3, _ExitOuterLoop	; while (i < endIndex) {
00000056	00053820		add	%r7, %r0, %r5		;   next_j = j;
00000057	8ca80000		lw	%r8, 0(%r5)		;   value_j = *j;
00000058	00000000		nop
00000059	8ce90004		lw	%r9, 4(%r7)		;     value_next_j = *next_j; (r7'OLD)
0000005a	f8a6000b		bgeu	%r5, %r6, _ExitInnerLoop
0000005b	00080820		add	%r1, %r0, %r8		;       tmp = value_j;
0000005c	20e70004		addi	%r7, %r7, $4		;     next_j++;
0000005d	f9280005		bgeu	%r9, %r8, _SkipExchange				
0000005e	00094020		add	%r8, %r0, %r9		;       value_j = value_next_j;
0000005f	00014820		add	%r9, %r0, %r1		;       value_next_j = tmp;
00000060	ace80000		sw	0(%r7), %r8		;       *next_j = value_j;(r8'OLD)
00000061	aca90000		sw	0(%r5), %r9		;       *j = value_next_j;(r9'OLD)
00000062	00072820		add	%r5, %r0, %r7		;     j = next_j;
00000063	0bfffff6		j	_InnerLoop
00000064	00094020		add	%r8, %r0, %r9		;     value_j = value_next_j;
00000065	0bffffee		j	_OuterLoop
00000066	01422820		add	%r5, %r10, %r2		;   j = array+startIndex;
00000067	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
00000068	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
00000069	8fa10008		lw	%r1, 8(%r29)
0000006a	8fa2000c		lw	%r2, 12(%r29)
0000006b	8fa30010		lw	%r3, 16(%r29)
0000006c	8fa40014		lw	%r4, 20(%r29)
0000006d	8fa50018		lw	%r5, 24(%r29)
0000006e	8fa6001c		lw	%r6, 28(%r29)
0000006f	8fa70020		lw	%r7, 32(%r29)
00000070	8fa80024		lw	%r8, 36(%r29)
00000071	8fa90028		lw	%r9, 40(%r29)
00000072	8faa0030		lw	%r10,48(%r29)
00000073	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
00000074	03e00008		jr	%r31
00000075	00000000		nop
00000076	00000000	_exit:	nop
00000077	00000000		nop
00000078	ffffffff	; ----- HALT for simulator -----
