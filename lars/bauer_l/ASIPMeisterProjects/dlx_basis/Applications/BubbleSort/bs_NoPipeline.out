****** Source Program List ******
LineNo	LC	Code		Source Program 
1				.addressing	Word
2				.section	.text
3			_main:
4				; Initialize Stack Pointer
5	0000	3c1d0000		lhi	%r29, $(((1024-4)*65536)&0xffff)	; MemSize is 1024
6	0001	27bd03fc		addui	%r29, %r29, $((1024-4)&0xffff)
7			
8	0002	2bbd000c		subi	%r29, %r29, $12		; Adjust Stack Pointer
9	0003	afbe0000		sw	0(%r29), %r30		; Save the old frame pointer
10	0004	afbf0004		sw	4(%r29), %r31		; Save the return address
11	0005	afa10008		sw	8(%r29), %r1		; Save r1, which will be overwritten in main
12	0006	001df020		add	%r30, %r0, %r29		; Establish new frame pointer
13			
14				; Call BubbleSort
15	0007	2bbd0008		subi	%r29, %r29, $8		; create place for the parameters
16	0008	afa00000		sw	0(%r29), %r0		; "const unsigned int startIndex"
17	0009	20010013		addi	%r1, %r0, $19
18	000a	afa10004		sw	4(%r29), %r1		; "const unsigned int endIndex"
19	000b	0c000009		jal	_bubbleSort
20	000c	00000000		nop
21	000d	23bd0008		addi	%r29, %r29, $8		; clean up place for parameters
22			
23	000e	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
24	000f	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
25	0010	8fa10008		lw	%r1,  8(%r29)		; Restore r1
26	0011	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
27			
28	0012	0c000043		jal	_exit
29	0013	00000000		nop
30			
31			
32			_bubbleSort:
33	0014	001df020		add	%r30, %r0, %r29		; Establish new frame pointer 
34	0015	2bbd0030		subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
35	0016	afbe0000		sw	0(%r29), %r30		; Save the frame pointer 
36	0017	afbf0004		sw	4(%r29), %r31		; Save the return address 
37			
38				; Save Registers 
39	0018	afa10008		sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
40	0019	afa2000c		sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
41	001a	afa30010		sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
42	001b	afa40014		sw	20(%r29), %r4		; r4 is the loop-variable "i".
43	001c	afa50018		sw	24(%r29), %r5		; r5 is the loop-variable "j".
44	001d	afa6001c		sw	28(%r29), %r6		; r6 is the loop-end "innerLoopEnd".
45	001e	afa70020		sw	32(%r29), %r7		; r7 is "next_j".
46	001f	afa80024		sw	36(%r29), %r8		; r8 is "value_j".
47	0020	afa90028		sw	40(%r29), %r9		; r9 is "value_next_j".
48	0021	afaa002c		sw	44(%r29), %r10		; r10 is the start address of 'array'.
49	0022	00000000		nop
50			
51				; Load Parameters
52	0023	8fc20000		lw	%r2, 0(%r30)
53	0024	8fc30004		lw	%r3, 4(%r30)
54			
55				; initialize start address of 'array'
56	0025	3c0a0000		lhi	%r10, $(_array*65536)&0xffff
57	0026	254a0000		addui	%r10, %r10, $(_array&0xffff)
58			
59				; innerLoopEnd = array+endIndex;
60	0027	40660002		slli	%r6, %r3, $2
61	0028	00ca3020		add	%r6, %r6, %r10
62			
63				; i = startIndex;
64	0029	00402020		add	%r4, %r2, %r0
65			
66			OuterLoop_Start:
67				; while (i < endIndex) {
68	002a	0083083a		sltu	%r1, %r4, %r3
69	002b	1020001b		beqz	%r1, OuterLoop_End
70	002c	00000000		nop
71			
72				; j = array+startIndex;
73	002d	40450002		slli	%r5, %r2, $2
74	002e	00aa2820		add	%r5, %r5, %r10
75			
76				; value_j = *j;
77	002f	8ca80000		lw	%r8, 0(%r5)
78			
79				; next_j = j;
80	0030	00a03820		add	%r7, %r5, %r0
81			
82			InnerLoop_Start:
83				; while (j < innerLoopEnd) {
84	0031	00a6083a		sltu	%r1, %r5, %r6
85	0032	10200010		beqz	%r1, InnerLoop_End
86	0033	00000000		nop
87			
88				; next_j++;
89	0034	20e70004		addi	%r7, %r7, $4
90			
91				; value_next_j = *next_j;
92	0035	8ce90000		lw	%r9, 0(%r7)
93			
94				; if (value_next_j < value_j) {
95	0036	0128083a		sltu	%r1, %r9, %r8
96	0037	10200007		beqz	%r1, SkipExchange
97	0038	00000000		nop
98			
99				; tmp = value_j;
100	0039	00080820		add	%r1, %r0, %r8
101			
102				; *j = value_next_j;
103	003a	aca90000		sw	0(%r5), %r9
104			
105				; value_j = value_next_j;
106	003b	00094020		add	%r8, %r0, %r9
107			
108				; *next_j = tmp;
109	003c	ace10000		sw	0(%r7), %r1
110			
111				; value_next_j = tmp;
112	003d	00014820		add	%r9, %r0, %r1
113			
114			SkipExchange:
115				; j = next_j;
116	003e	00072820		add	%r5, %r0, %r7
117			
118				; value_j = value_next_j;
119	003f	00094020		add	%r8, %r0, %r9
120			
121				; }
122	0040	0bfffff1		j	InnerLoop_Start
123	0041	00000000		nop
124			
125			InnerLoop_End:
126				; innerLoopEnd--;
127	0042	28c60004		subi	%r6, %r6, $4
128			
129				; i++;
130	0043	20840001		addi	%r4, %r4, $1
131			
132				; }
133	0044	0bffffe6		j	OuterLoop_Start
134	0045	00000000		nop
135			
136			OuterLoop_End:
137	0046	8fbe0000		lw	%r30, 0(%r29)		; Restore frame pointer
138	0047	8fbf0004		lw	%r31, 4(%r29)		; Restore return address
139			
140				; Restore the saved registers
141	0048	8fa10008		lw	%r1, 8(%r29)
142	0049	8fa2000c		lw	%r2, 12(%r29)
143	004a	8fa30010		lw	%r3, 16(%r29)
144	004b	8fa40014		lw	%r4, 20(%r29)
145	004c	8fa50018		lw	%r5, 24(%r29)
146	004d	8fa6001c		lw	%r6, 28(%r29)
147	004e	8fa70020		lw	%r7, 32(%r29)
148	004f	8fa80024		lw	%r8, 36(%r29)
149	0050	8fa90028		lw	%r9, 40(%r29)
150	0051	8faa0030		lw	%r10,48(%r29)
151			
152	0052	001ee820		add	%r29, %r0, %r30		; Restore stack pointer
153			
154				; Return
155	0053	03e00008		jr	%r31
156	0054	00000000		nop
157			
158			
159	0055	00000000	_exit:	nop
160	0056	00000000		nop
161			
162			
163				.section	.data
164			_array:
165	0000	0000002d		.data.32	45
166	0004	0000004b		.data.32	75
167	0008	00000156		.data.32	342
168	000c	00000036		.data.32	54
169	0010	00000007		.data.32	7
170	0014	00000056		.data.32	86
171	0018	0000002d		.data.32	45
172	001c	000000eb		.data.32	235
173	0020	00000004		.data.32	4
174	0024	0000002d		.data.32	45
175	0028	0000004b		.data.32	75
176	002c	0000004e		.data.32	78
177	0030	0000003f		.data.32	63
178	0034	00000160		.data.32	352
179	0038	00000015		.data.32	21
180	003c	0000027a		.data.32	634
181	0040	00000006		.data.32	6
182	0044	0000004b		.data.32	75
183	0048	0000015a		.data.32	346
184	004c	00000017		.data.32	23
185			


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
InnerLoop_End	.text	0042	Label	42	125 
_main	.text	0000	Label	0	3 
OuterLoop_Start	.text	002a	Label	2a	66 
_bubbleSort	.text	0014	Label	14	32 
_array	.data	0000	Label	0	164 
_exit	.text	0055	Label	55	159 
SkipExchange	.text	003e	Label	3e	114 
OuterLoop_End	.text	0046	Label	46	136 
InnerLoop_Start	.text	0031	Label	31	82 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	57 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
