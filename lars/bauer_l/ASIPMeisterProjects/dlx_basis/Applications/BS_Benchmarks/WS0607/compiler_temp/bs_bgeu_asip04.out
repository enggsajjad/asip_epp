****** Source Program List ******
LineNo	LC	Code		Source Program 
1			        .addressing        Word
2			        .section        .text
3			_main:
4			        ; Initialize Stack Pointer
5	0000	3c1d0000	        lhi        %r29, $(((1024-4)*65536)&0xffff)        ; MemSize is 1024
6	0001	00000000	        nop
7	0002	00000000	        nop
8	0003	00000000	        nop
9	0004	27bd03fc	        addui        %r29, %r29, $((1024-4)&0xffff)
10	0005	00000000	        nop
11	0006	00000000	        nop
12	0007	00000000	        nop
13	0008	2bbd000c	        subi        %r29, %r29, $12                ; Adjust Stack Pointer
14	0009	00000000	        nop
15	000a	00000000	        nop
16	000b	00000000	        nop
17	000c	afbe0000	        sw        0(%r29), %r30                ; Save the old frame pointer
18	000d	afbf0004	        sw        4(%r29), %r31                ; Save the return address
19	000e	afa10008	        sw        8(%r29), %r1                ; Save r1, which is used in main.
20	000f	001df020	        add        %r30, %r0, %r29                ; Establish new frame pointer
21			
22			        ; Call BubbleSort
23	0010	2bbd0008	        subi        %r29, %r29, $8                ; create place for the parameters
24	0011	00000000	        nop
25	0012	00000000	        nop
26	0013	00000000	        nop
27	0014	afa00000	        sw        0(%r29), %r0                ; "const unsigned int startIndex"
28	0015	20010013	        addi        %r1, %r0, $19
29	0016	00000000	        nop
30	0017	00000000	        nop
31	0018	00000000	        nop
32	0019	afa10004	        sw        4(%r29), %r1                ; "const unsigned int endIndex"
33	001a	0c00000c	        jal        _bubbleSort
34	001b	00000000	        nop
35	001c	23bd0008	        addi        %r29, %r29, $8
36			
37	001d	00000000	        nop
38	001e	00000000	        nop
39	001f	00000000	        nop
40	0020	8fbe0000	        lw        %r30, 0(%r29)                ; Restore frame pointer
41	0021	8fbf0004	        lw        %r31, 4(%r29)                ; Restore return address
42	0022	8fa10008	        lw        %r1,  8(%r29)                ; Restore r1
43	0023	001ee820	        add        %r29, %r0, %r30                ; Restore stack pointer
44			
45			        ; HALT
46	0024	0c000041	        jal        _exit
47	0025	00000000	        nop
48			
49			
50			_bubbleSort:
51			
52	0026	001df020	        add        %r30, %r0, %r29                ; Establish new frame pointer
53	0027	2bbd0030	        subi        %r29, %r29, $(8 + 10*4)        ; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
54	0028	00000000	        nop
55	0029	00000000	        nop
56	002a	afbe0000	        sw        0(%r29), %r30                ; Save the frame pointer
57	002b	afbf0004	        sw        4(%r29), %r31                ; Save the return address
58			
59			        ; Save Registers
60	002c	afa10008	        sw         8(%r29), %r1                ; r1 is used for comparing-results and for temporary stuff.
61	002d	afa2000c	        sw        12(%r29), %r2                ; r2 is the parameter value "startIndex".
62	002e	afa30010	        sw        16(%r29), %r3                ; r3 is the parameter value "endIndex".
63	002f	afa40014	        sw        20(%r29), %r4                ; r4 is the loop-variable "i".
64	0030	afa50018	        sw        24(%r29), %r5                ; r5 is the loop-variable "j".
65	0031	afa6001c	        sw        28(%r29), %r6                ; r6 is the loop-end "innerLoopEnd".
66	0032	afa70020	        sw        32(%r29), %r7                ; r7 is "next_j".
67	0033	afa80024	        sw        36(%r29), %r8                ; r8 is "value_j".
68	0034	afa90028	        sw        40(%r29), %r9                ; r9 is "value_next_j".
69	0035	afaa002c	        sw        44(%r29), %r10                ; r10 is the start address of 'array'.
70			
71			        ; Load Parameters
72	0036	8fc20000	        lw        %r2, 0(%r30)
73	0037	8fc30004	        lw      %r3, 4(%r30)
74			
75			        ; Initialize start address of 'array'
76	0038	3c0a0000	        lhi    %r10, $(_array/65536)&0xffff
77	0039	40630002	        slli   %r3, %r3, $2
78	003a	00022020	        add    %r4, %r0, %r2
79	003b	00000000	        nop
80	003c	254a0000	        addui  %r10, %r10, $(_array&0xffff)
81			
82			        ;;;;;;;;;;;;;;;;;;;;;;;;
83			        ;; Add your code here ;;
84			        ;;;;;;;;;;;;;;;;;;;;;;;;
85			
86			       
87			        ; innerLoopEnd = array+endIndex
88			       
89	003d	01433020	               add  %r6, %r10, %r3
90			              
91			        ; i = startIndex;
92			       
93			        ; while (i < endIndex) {
94			       
95	003e	f8830019	_while: bgeu  %r4 , %r3, _wend
96			
97			        ;   j = array+startIndex;
98			
99	003f	01422820	        add %r5, %r10, %r2
100	0040	00000000	        nop
101	0041	00000000	        nop
102	0042	00000000	        nop
103			        ;   value_j = *j;
104			       
105	0043	8ca80000	        lw  %r8, 0(%r5)
106			       
107			        ;   next_j = j;
108			
109	0044	00053820	        add   %r7, %r0, %r5
110			       
111			       ;   while (j < innerLoopEnd) {
112			
113			_innerLoop:
114			       
115	0045	f8a6000f	        bgeu   %r5, %r6, _innerLoopEnd
116			        ;     next_j++;
117			
118	0046	20e70004	        addi %r7, %r7, $4
119	0047	00000000	        nop       
120	0048	00000000	        nop
121	0049	00000000	        nop
122			       
123			        ;     value_next_j = *next_j;
124			
125	004a	8ce90000	        lw   %r9, 0(%r7)
126			        ;     if (value_next_j < value_j) {
127	004b	f9280006	        bgeu  %r9, %r8, _endIf                       
128			        ;       *j = value_next_j;
129			
130	004c	aca90000	         sw   0(%r5), %r9
131			       
132			        ;       *next_j = value_j;
133			       
134	004d	ace80000	         sw   0(%r7), %r8
135			       
136			        ;       tmp = value_j;
137			       
138	004e	00080820	        add   %r1, %r0, %r8
139			       
140			        ;       value_j = value_next_j;
141			
142	004f	00094020	        add   %r8, %r0, %r9
143			        ;       value_next_j = tmp;
144			
145	0050	00014820	        add   %r9, %r0, %r1
146			       
147			        ;     }
148			       
149			               
150			       
151			        ;     j = next_j;
152			
153	0051	00072820	_endIf:        add   %r5, %r0, %r7
154			       
155			        ;     value_j = value_next_j;
156			
157	0052	00094020	        add   %r8, %r0, %r9
158			       
159			        ;   }
160			
161	0053	0bfffff2	        j    _innerLoop
162			       
163			        ;   innerLoopEnd--;
164			
165			_innerLoopEnd:
166			       
167	0054	28c60004	         subi %r6, %r6, $4
168			       
169			        ;   i++;
170			
171	0055	20840004	        addi %r4, %r4, $4
172			       
173			       
174			        ; }
175			       
176	0056	0bffffe8	               j    _while
177			
178			_wend:
179	0057	8fbe0000	        lw        %r30, 0(%r29)                ; Restore frame pointer
180	0058	8fbf0004	        lw        %r31, 4(%r29)                ; Restore return address
181			
182			        ; Restore the saved registers
183	0059	8fa10008	        lw        %r1, 8(%r29)
184	005a	8fa2000c	        lw        %r2, 12(%r29)
185	005b	8fa30010	        lw        %r3, 16(%r29)
186	005c	8fa40014	        lw        %r4, 20(%r29)
187	005d	8fa50018	        lw        %r5, 24(%r29)
188	005e	8fa6001c	        lw        %r6, 28(%r29)
189	005f	8fa70020	        lw        %r7, 32(%r29)
190	0060	8fa80024	        lw        %r8, 36(%r29)
191	0061	8fa90028	        lw        %r9, 40(%r29)
192	0062	8faa0030	        lw        %r10,48(%r29)
193			
194	0063	001ee820	        add        %r29, %r0, %r30                ; Restore stack pointer
195			
196			        ; Return
197	0064	03e00008	        jr        %r31
198			
199			
200			_exit:       
201			
202			
203			        .section        .data
204			_array:
205	0000	0000002d	        .data.32        45
206	0004	0000004b	        .data.32        75
207	0008	00000156	        .data.32        342
208	000c	00000036	        .data.32        54
209	0010	00000007	        .data.32        7
210	0014	00000056	        .data.32        86
211	0018	0000005c	        .data.32        92
212	001c	000000eb	        .data.32        235
213	0020	00000004	        .data.32        4
214	0024	0000002a	        .data.32        42
215	0028	00000063	        .data.32        99
216	002c	0000004e	        .data.32        78
217	0030	0000003f	        .data.32        63
218	0034	00000160	        .data.32        352
219	0038	00000015	        .data.32        21
220	003c	0000027a	        .data.32        634
221	0040	00000006	        .data.32        6
222	0044	0000004d	        .data.32        77
223	0048	0000015a	        .data.32        346
224	004c	00000017	        .data.32        23


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
_main	.text	0000	Label	0	3 
_bubbleSort	.text	0026	Label	26	50 
_while	.text	003e	Label	3e	95 
_wend	.text	0057	Label	57	178 
_array	.data	0000	Label	0	204 
_innerLoopEnd	.text	0054	Label	54	165 
_innerLoop	.text	0045	Label	45	113 
_exit	.text	0065	Label	65	200 
_endIf	.text	0051	Label	51	153 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	65 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
