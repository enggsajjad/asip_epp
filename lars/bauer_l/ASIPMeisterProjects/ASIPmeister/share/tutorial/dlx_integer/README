############################################
#  dlx integer assembly coding information #
############################################

1. the order of operands 


1.1  register-register type (ex: ADD,SUB,SLL ...etc)
 
   A:"assembly code"
     [ Instruction-Name  destination, source0, source1 ]
       ex:  ADD %r10,%r1,%r2   (behavior:  r10 = r1 + r2)

   B:"instruction definition in ASIP Meister"
     [ ope-code  source0  source1  destination  ope-code ]
       ex:  ADD-opecode r1 r2 r10 ADD-opecode

   Meta-assembler(pas) translates from A into B.


1.2  register-immediate type (ex: ADDI,SUBI,SLLI ...etc)

   A:"assembly code"
     [ Instruction-Name  destination, source0, immediate ]
       ex:  ADDI %r10,%r1,$7   (behavior:  r10 = r1 + 7)

   B:"instruction definition in ASIP Meister"
     [ ope-code  source0  destination  immediate ]
       ex:  ADD-opecode r1 r10 7

   Meta-assembler(pas) translates from A into B.


1.3  memory access type (ex: SW,LW,SB ...etc)

   A:"assembly code"
     [ Instruction-Name  source0,  immediate(source1) ]
                                     immediate: offset value
                                     source1  : base register
       ex:  SW %r10,20(%r1)   (behavior:  r10 = MEM[r1+20])

   B:"instruction definition in ASIP Meister"
     [ ope-code  source0  source1  destination ]
       ex:  SW-opecode r10 r1 20

   Meta-assembler(pas) translates from A into B.


1.4  branch(control) type (ex: BEQZ,BNEZ ...etc)

   A:"assembly code"
     [ Instruction-Name  source0,  label ]
                                   label: label or absolute address
       ex: L1  ...    
               ...
               BEQZ %r1,$((L1-L2)/4)   
           L2  ...  
           (behavior:  if (r1 == 0) then {jump to L1})
                     

   B:"instruction definition in ASIP Meister"
     [ ope-code  source0  no-use  immediate ]
       ex:  BEQZ-opecode r1 no-use address-offset

   Meta-assembler(pas) translates from A into B.
